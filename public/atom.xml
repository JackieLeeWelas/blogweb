<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>莲花银</title>
  
  <subtitle>随便分享，想写啥就写啥的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jackielee.cn/"/>
  <updated>2019-03-02T14:28:41.742Z</updated>
  <id>http://www.jackielee.cn/</id>
  
  <author>
    <name>Jackie Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django搭建简单网页（Form）</title>
    <link href="http://www.jackielee.cn/posts/3633b975.html"/>
    <id>http://www.jackielee.cn/posts/3633b975.html</id>
    <published>2019-03-02T10:34:16.000Z</published>
    <updated>2019-03-02T14:28:41.742Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、使用表单处理数据"><a href="#一、使用表单处理数据" class="headerlink" title="一、使用表单处理数据"></a>一、使用表单处理数据</h2><ol><li><p>为了实现投票功能，当点击某一选项时，能提交数据到vote里去处理并返回结果，需要使用表单提交数据，在之前的detail.html里写上如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#polls/templates/polls/detail.html</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;&#123;&#123; question.question_text &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&#123;% if error_message %&#125;&lt;p&gt;&lt;strong&gt;&#123;&#123; error_message &#125;&#125;&lt;/</span>strong&gt;&lt;/p&gt;&#123;% endif %&#125;</span><br><span class="line">&lt;form action=<span class="string">"&#123;% url 'polls:vote' question.id %&#125;"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">&#123;% csrf_token %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> choice <span class="keyword">in</span> question.choice_set.all %&#125;</span><br><span class="line">    &lt;input type=<span class="string">"radio"</span> name=<span class="string">"choice"</span> id=<span class="string">"choice&#123;&#123; forloop.counter &#125;&#125;"</span> value=<span class="string">"&#123;&#123; choice.id &#125;&#125;"</span> /&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">"choice&#123;&#123; forloop.counter &#125;&#125;"</span>&gt;&#123;&#123; choice.choice_text &#125;&#125;&lt;<span class="regexp">/label&gt;&lt;br /</span>&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"Vote"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>为了能找到vote的路径，需要在urls.py中设置路径：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#polls/urls.py</span></span><br><span class="line">url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/vote/$'</span>, views.vote, name=<span class="string">'vote'</span>),</span><br></pre></td></tr></table></figure></li><li><p>然后在views.py的vote函数中编写代码处理数据，实现一个问题的某一选项的票数增加并存储：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#polls/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect, HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.core.urlresolvers <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    p = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        selected_choice = p.choice_set.get(pk=request.POST[<span class="string">'choice'</span>])</span><br><span class="line">    <span class="keyword">except</span> (KeyError, Choice.DoesNotExist):</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;</span><br><span class="line">            <span class="string">'question'</span>: p,</span><br><span class="line">            <span class="string">'error_message'</span>: <span class="string">"You didn't select a choice."</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        selected_choice.votes += <span class="number">1</span></span><br><span class="line">        selected_choice.save()</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'polls:results'</span>, args=(p.id,)))</span><br></pre></td></tr></table></figure></li><li><p>点击投票按钮后需要跳转到投票结果页面results.html，显示某个问题的得票情况，也就是显示票数，并提示是否需要继续投票，以下代码修改view.py中的results函数，处理点击投票按钮后的数据，指定返回results.html的页面：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#polls/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/results.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure><p> 在polls的template中创建results.html，在results.html中编写如下代码：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#polls/templates/polls/results.html</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;&#123;&#123; question.question_text &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;ul&gt;</span></span><br><span class="line"><span class="regexp">&#123;% for choice in question.choice_set.all %&#125;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;&#123;&#123; choice.choice_text &#125;&#125; -- &#123;&#123; choice.votes &#125;&#125; vote&#123;&#123; choice.votes|pluralize &#125;&#125;&lt;/</span>li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;a href="&#123;% url 'polls:detail' question.id %&#125;"&gt;Vote again?&lt;/</span>a&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="二、精简代码，使用generic-views"><a href="#二、精简代码，使用generic-views" class="headerlink" title="二、精简代码，使用generic views"></a>二、精简代码，使用generic views</h2><p>接下来，我们使用如下步骤，来转变我们之前的代码：</p><ol><li>改变URL配置</li><li>删除一些不需要的，旧的view</li><li>引进新的，基于Django的 generic views</li></ol><p><strong><em>第一步，修改URL配置：</em></strong></p><p>首先，打开polls/urls.py，作如下修改：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#polls/urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.IndexView.as_view(), name=<span class="string">'index'</span>),</span><br><span class="line">    url(<span class="string">r'^(?P&lt;pk&gt;[0-9]+)/$'</span>, views.DetailView.as_view(), name=<span class="string">'detail'</span>),</span><br><span class="line">    url(<span class="string">r'^(?P&lt;pk&gt;[0-9]+)/results/$'</span>, views.ResultsView.as_view(), name=<span class="string">'results'</span>),</span><br><span class="line">    url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/vote/$'</span>, views.vote, name=<span class="string">'vote'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p><strong><em>第二步，修改view，引进新的generic views：</em></strong><br>删除之前的函数，新建类引进generic view，实现之前函数实现的功能：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#polls/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.core.urlresolvers <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> generic</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(generic.ListView)</span>:</span></span><br><span class="line">    template_name = <span class="string">'polls/index.html'</span></span><br><span class="line">    context_object_name = <span class="string">'latest_question_list'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Return the last five published questions."""</span></span><br><span class="line">        <span class="keyword">return</span> Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span><span class="params">(generic.DetailView)</span>:</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">'polls/detail.html'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResultsView</span><span class="params">(generic.DetailView)</span>:</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">'polls/results.html'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line"></span><br><span class="line">    ... <span class="comment"># same as above</span></span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、使用表单处理数据&quot;&gt;&lt;a href=&quot;#一、使用表单处理数据&quot; class=&quot;headerlink&quot; title=&quot;一、使用表单处理数据&quot;&gt;&lt;/a&gt;一、使用表单处理数据&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;为了实现投票功能，当点击某一选项时，能提交数据到vote里
      
    
    </summary>
    
      <category term="原创" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Python" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/Python/"/>
    
    
      <category term="Python" scheme="http://www.jackielee.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://www.jackielee.cn/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django搭建简单网页（View）</title>
    <link href="http://www.jackielee.cn/posts/6ad03acf.html"/>
    <id>http://www.jackielee.cn/posts/6ad03acf.html</id>
    <published>2019-03-02T10:23:42.000Z</published>
    <updated>2019-03-02T14:28:41.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、编写前台界面views："><a href="#一、编写前台界面views：" class="headerlink" title="一、编写前台界面views："></a>一、编写前台界面views：</h2><ol><li><p>编写前台界面需要显示的内容，打开polls/views.py，编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#polls/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http importHttpResponse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> HttpResponse(<span class="string">"Hello, world. You're atthe polls index."</span>)</span><br></pre></td></tr></table></figure></li><li><p>编写自己应用的urls文件，在应用polls下创建urls.py，添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#polls/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>在项目的urls文件里指定自己应用的urls文件，打开项目的urls.py，添加如下代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysite/urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">   url(<span class="string">r'^polls/'</span>, include(<span class="string">'polls.urls'</span>)),</span><br><span class="line">   url(<span class="string">r'^admin/'</span>, include(admin.site.urls)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>在浏览器中打开<a href="http://127.0.0.1:8000/polls" target="_blank" rel="noopener">http://127.0.0.1:8000/polls</a>, 就可以看到刚刚写的view，即显示“Hello,world. You’re at the polls index.” </p></li></ol><h2 id="二、编写若干个views界面"><a href="#二、编写若干个views界面" class="headerlink" title="二、编写若干个views界面"></a>二、编写若干个views界面</h2><p>同上面的原理是一样的，先写界面内容，再去自己应用的urls里面使用正则表达式指定路径。</p><ol><li><p>在polls/views.py中添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#polls/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> HttpResponse(<span class="string">"You're looking at question %s."</span> %question_id)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">   response = <span class="string">"You're looking at the results of question %s."</span></span><br><span class="line">   <span class="keyword">return</span> HttpResponse(response % question_id)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> HttpResponse(<span class="string">"You're voting on question %s."</span> %question_id)</span><br></pre></td></tr></table></figure></li><li><p>在polls/urls.py中指定路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#polls/urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment">#ex: /polls/</span></span><br><span class="line">   url(<span class="string">r'^$'</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">    <span class="comment">#ex: /polls/5/</span></span><br><span class="line">   url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/$'</span>, views.detail, name=<span class="string">'detail'</span>),</span><br><span class="line">    <span class="comment">#ex: /polls/5/results/</span></span><br><span class="line">   url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/results/$'</span>, views.results, name=<span class="string">'results'</span>),</span><br><span class="line">    <span class="comment">#ex: /polls/5/vote/</span></span><br><span class="line">   url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/vote/$'</span>, views.vote, name=<span class="string">'vote'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>然后就可以在浏览器里输入各种路径，如：<br> <a href="http://127.0.0.1:8000/polls/3" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/3</a>: 显示“You’re looking at question 3.”<br> <a href="http://127.0.0.1:8000/polls/3/results" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/3/results</a>: 显示“You’re looking at the results ofquestion 3.”<br> <a href="http://127.0.0.1:8000/polls/3/vote" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/3/vote</a>: 显示“You’re voting on question 3.”</p></li></ol><h2 id="三、编写用于显示后台数据的前台界面："><a href="#三、编写用于显示后台数据的前台界面：" class="headerlink" title="三、编写用于显示后台数据的前台界面："></a>三、编写用于显示后台数据的前台界面：</h2><p>上面的界面内容只是静态的显示一些字符串，接下来是实现从后台读取数据显示在前台界面</p><p>修改polls/views.py文件，其他的操作是一样的：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#polls/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    latest_question_list =Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br><span class="line">    output = <span class="string">', '</span>.join([p.question_text <span class="keyword">for</span> pin latest_question_list])</span><br><span class="line">   <span class="keyword">return</span> HttpResponse(output)</span><br></pre></td></tr></table></figure></p><p>这里导入了models里的Question，然后读取出Question里的内容，病按日期排序。</p><h2 id="四、从views-py中分离出template进行界面编写"><a href="#四、从views-py中分离出template进行界面编写" class="headerlink" title="四、从views.py中分离出template进行界面编写"></a>四、从views.py中分离出template进行界面编写</h2><ol><li><p>在应用polls里创建templates文件夹，再在里面创建polls文件夹，在新建的polls里创建index.html文件，打开并编写如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> latest_question_list %&#125;</span><br><span class="line">   &lt;ul&gt;</span><br><span class="line">   &#123;% <span class="keyword">for</span> question <span class="keyword">in</span> latest_question_list %&#125;</span><br><span class="line">       &lt;li&gt;&lt;a href="/polls/&#123;&#123; question.id &#125;&#125;/"&gt;&#123;&#123;question.question_text &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">   &#123;% endfor %&#125;</span><br><span class="line">   &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&#123;% else %&#125;</span></span><br><span class="line"><span class="regexp">   &lt;p&gt;No polls are available.&lt;/</span>p&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p> 上面代码是从views.py里分离出来的用来显示最近问题列表的功能，这里分条显示。</p></li><li><p>然后在polls的views里修改代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#polls/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> RequestContext,loader</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    latest_question_list =Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br><span class="line">    template =loader.get_template(<span class="string">'polls/index.html'</span>)</span><br><span class="line">    context = RequestContext(request, &#123;</span><br><span class="line">        <span class="string">'latest_question_list'</span>: latest_question_list,</span><br><span class="line">    &#125;)</span><br><span class="line">    returnHttpResponse(template.render(context))</span><br></pre></td></tr></table></figure><p> 这里用loader装载template：polls/index.html，然后再传递上下文给template进行render。</p></li></ol><h2 id="五、用render-代替HttpResponse，简化代码"><a href="#五、用render-代替HttpResponse，简化代码" class="headerlink" title="五、用render( )代替HttpResponse，简化代码"></a>五、用render( )代替HttpResponse，简化代码</h2><p>代码修改如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#polls/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">   latest_question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br><span class="line">   context = &#123;<span class="string">'latest_question_list'</span>: latest_question_list&#125;</span><br><span class="line">   <span class="keyword">return</span> render(request, <span class="string">'polls/index.html'</span>, context)</span><br></pre></td></tr></table></figure></p><p>这样就不用导入loader,RequestContext和HttpResponse了， render本身就是返回一个HttpResponse对象，所以直接返回。<br>也可以这样修改更简洁：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">   latest_question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br><span class="line">   <span class="keyword">return</span> render(request, <span class="string">'polls/index.html'</span>, &#123;<span class="string">'latest_question_list'</span>:latest_question_list&#125;)</span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、编写前台界面views：&quot;&gt;&lt;a href=&quot;#一、编写前台界面views：&quot; class=&quot;headerlink&quot; title=&quot;一、编写前台界面views：&quot;&gt;&lt;/a&gt;一、编写前台界面views：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;编写前台界面需要显示的内容
      
    
    </summary>
    
      <category term="原创" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Python" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/Python/"/>
    
    
      <category term="Python" scheme="http://www.jackielee.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://www.jackielee.cn/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django搭建简单网页（admin）</title>
    <link href="http://www.jackielee.cn/posts/9a5c839.html"/>
    <id>http://www.jackielee.cn/posts/9a5c839.html</id>
    <published>2019-03-02T10:16:00.000Z</published>
    <updated>2019-03-02T14:46:12.277Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、运行后台管理"><a href="#一、运行后台管理" class="headerlink" title="一、运行后台管理"></a>一、运行后台管理</h2><ol><li><p>创建超级用户以便于登录到后台管理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">    python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p> 接着输入用户名，邮箱，密码完成创建</p></li><li><p>运行服务程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p> 然后在浏览器里输入：<a href="http://127.0.0.1:8000/admin/" target="_blank" rel="noopener">http://127.0.0.1:8000/admin/</a>, 在登录界面完成登录就可以进入管理界面了。</p></li><li><p>为了在后台管理界面中显示我们编写的应用polls，需要在polls/admin.py中添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line">admin.site.register(Question)  <span class="comment">#在管理网页中注册需要显示的Question</span></span><br></pre></td></tr></table></figure><p> 这时后台会自动为Question生成一些管理表单。<br> 为了在后台管理界面中显示我们编写的应用polls，需要在polls/admin.py中添加如下代码：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from .models import Question</span><br><span class="line">admin.site.register(Question)  #在管理网页中注册需要显示的Question</span><br></pre></td></tr></table></figure><p> 这时后台会自动为Question生成一些管理表单。</p></li></ol><h2 id="二、自定义管理表单"><a href="#二、自定义管理表单" class="headerlink" title="二、自定义管理表单"></a>二、自定义管理表单</h2><p>上面只是简单的注册了Question，然后让django自动生成表单。接下来要自定义表单显示的方式。</p><ol><li><p>把publication date放在Question text的前面显示，还是在polls/admin.py中，只是用以下代码替代admin.site.register(Question) ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">   fields = [<span class="string">'pub_date'</span>, <span class="string">'question_text'</span>]</span><br><span class="line">admin.site.register(Question,QuestionAdmin)</span><br></pre></td></tr></table></figure><p> 同样，以后也可以自定义其他的管理对象，然后作为register()函数的第二个参数。</p></li><li><p>当Question字段太多的时候，需要把它们分开显示，这时就可以用下面的代码代替上面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">   fieldsets = [</span><br><span class="line">       (<span class="keyword">None</span>,               &#123;<span class="string">'fields'</span>:[<span class="string">'question_text'</span>]&#125;),</span><br><span class="line">       (<span class="string">'Date information'</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'pub_date'</span>]&#125;),</span><br><span class="line">    ]</span><br><span class="line">admin.site.register(Question,QuestionAdmin)</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>一个Question对应多个Choice,所以需要将多个Choice显示在一个Question下，在polls/admin.py中用如下代码实现：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from .models import Choice, Question</span><br><span class="line">class ChoiceInline(admin.StackedInline):</span><br><span class="line">   model = Choice</span><br><span class="line">   extra = 3</span><br><span class="line">class QuestionAdmin(admin.ModelAdmin):</span><br><span class="line">   fieldsets = [</span><br><span class="line">       (None,               &#123;&apos;fields&apos;:[&apos;question_text&apos;]&#125;),</span><br><span class="line">       (&apos;Date information&apos;, &#123;&apos;fields&apos;: [&apos;pub_date&apos;], &apos;classes&apos;: [&apos;collapse&apos;]&#125;),#日期信息这一栏设置了可隐藏</span><br><span class="line">    ]</span><br><span class="line">   inlines = [ChoiceInline]</span><br><span class="line">admin.site.register(Question,QuestionAdmin)</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>当一个问题的投票选项太多的时候，上面那样的Choice每条都比较占空间，不够简洁，如下修改ChoiceInline继承的类为TabularInline：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   class ChoiceInline(admin.TabularInline):</span><br><span class="line">       #...</span><br></pre></td></tr></table></figure><p> 这样每个Question下面每个Choice就分两列罗列出来，简洁明了。</p><p> 关于表单的自定义，如各种元素的显示方式，都可以参考官方文档的ModelAdmin ：<a href="https://docs.djangoproject.com/en/1.8/ref/contrib/admin/#django.contrib.admin.ModelAdmin" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/ref/contrib/admin/#django.contrib.admin.ModelAdmin</a></p></li></ol><h2 id="三、自定义自己项目的template"><a href="#三、自定义自己项目的template" class="headerlink" title="三、自定义自己项目的template"></a>三、自定义自己项目的template</h2><p>之前是django自动生成的template，从而定义的后台管理界面的风格和显示内容，现在要自己自定义自己项目的template，这样就可以在自己项目的template里修改代码，定制界面风格。根据以下步骤可以完成这个任务：</p><ol><li><p>在项目目录下（即与manage.py同层次的目录）创建一个template文件夹，然后在mysite/settings.py中的DIRS选项中添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;DIRS&apos;:[os.path.join(BASE_DIR, &apos;templates&apos;)],</span><br></pre></td></tr></table></figure></li><li><p>在刚创建的template文件夹下再创建admin文件夹，然后在Django的安装目录django\contrib\admin\templates\admin文件夹下，把相关的html文件复制到刚刚创建的admin下，如把admin/base_site.html复制到刚创建的admin中。</p></li><li><p>然后打开base_site.html编辑代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%block branding %&#125;</span><br><span class="line">&lt;h1 id=&quot;site-name&quot;&gt;&lt;ahref=&quot;&#123;% url &apos;admin:index&apos; %&#125;&quot;&gt;PollsAdministration&lt;/a&gt;&lt;/h1&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p> 这样标题就会变为PollsAdministration.</p></li><li><p>同理可以自定义其他的内容格式，一样的从django/admin目录里复制html文件到自己创建的admin中，修改其中的代码。</p></li></ol><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、运行后台管理&quot;&gt;&lt;a href=&quot;#一、运行后台管理&quot; class=&quot;headerlink&quot; title=&quot;一、运行后台管理&quot;&gt;&lt;/a&gt;一、运行后台管理&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建超级用户以便于登录到后台管理&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
      <category term="原创" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Python" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/Python/"/>
    
    
      <category term="Python" scheme="http://www.jackielee.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://www.jackielee.cn/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django搭建简单网页（models）</title>
    <link href="http://www.jackielee.cn/posts/1f3cc00.html"/>
    <id>http://www.jackielee.cn/posts/1f3cc00.html</id>
    <published>2019-03-02T10:04:43.000Z</published>
    <updated>2019-03-02T14:28:41.745Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、创建一个django工程"><a href="#一、创建一个django工程" class="headerlink" title="一、创建一个django工程"></a>一、创建一个django工程</h2><ol><li><p>选择一个工作目录，然后用下面命令行创建一个project</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject mysite</span><br></pre></td></tr></table></figure><p> 创建后的目录如下所示：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysite/</span><br><span class="line">   manage.py</span><br><span class="line">   mysite/</span><br><span class="line">       __init__.py</span><br><span class="line">       settings.py</span><br><span class="line">       urls.py</span><br><span class="line">       wsgi.py</span><br></pre></td></tr></table></figure></li><li><p>可以去mysite/settings.py中设置数据库，默认为sqlite3</p></li><li><p>使用数据库之前，得先在数据库中创建表。用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></li><li><p>启动django服务程序： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure></li><li><p>在浏览器中输入地址<a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a> 就可以访问初始界面。</p></li></ol><h2 id="二、创建models"><a href="#二、创建models" class="headerlink" title="二、创建models"></a>二、创建models</h2><ol><li><p>在项目目录下创建自己的app应用程序，app名为polls，使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp polls</span><br></pre></td></tr></table></figure><p> 则app的目录结构如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">polls/</span><br><span class="line">    __init__.py</span><br><span class="line">   admin.py</span><br><span class="line">   migrations/</span><br><span class="line">       __init__.py</span><br><span class="line">   models.py</span><br><span class="line">   tests.py</span><br><span class="line">   views.py</span><br></pre></td></tr></table></figure></li><li><p>在polls的models.py文件里编写代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from django.dbimport models</span><br><span class="line"></span><br><span class="line">classQuestion(models.Model):</span><br><span class="line"></span><br><span class="line">    question_text =models.CharField(max_length=200)</span><br><span class="line"></span><br><span class="line">    pub_date = models.DateTimeField(&apos;datepublished&apos;)</span><br><span class="line"></span><br><span class="line">classChoice(models.Model):</span><br><span class="line"></span><br><span class="line">    question = models.ForeignKey(Question)</span><br><span class="line"></span><br><span class="line">    choice_text =models.CharField(max_length=200)</span><br><span class="line"></span><br><span class="line">    votes = models.IntegerField(default=0)</span><br></pre></td></tr></table></figure><p> 每个类对应数据库里的一个表，类中的成员变量对应表中的字段，即列项。</p></li><li><p>激活models，在mysite/settings.py中添加应用的名字polls，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;polls&apos;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>Django 知道包含了我们自己的应用polls，再用以下命令行告诉django你对models做了改变，一开始是添加了model，以后每次改变了models都要使用这条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python manage.py makemigrations polls</span><br></pre></td></tr></table></figure></li><li><p>再次使用 python manage.py migrate为所有的models在数据库中创建表</p></li><li><p>以后每次改变models的时候，更新数据库直接使用如下步骤：<br>（1）在models.py改变models<br>（2）运行命令： python manage.py makemigrations 为改变创建migration<br>（3）运行命令：python manage.py migrate 在数据库中改变表</p></li><li><p>使用django数据库的api，打开python的shell：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure><p> 在shell中可以使用django的database api对models进行操作。<br> 比如：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from polls.models import Question, Choice  </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Question.objects.all()</span><br><span class="line"></span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from django.utils import timezone</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; q = Question(question_text=&quot;What&apos;s new?&quot;,pub_date=timezone.now())</span><br><span class="line"></span><br><span class="line"># Save the objectinto the database. You have to call save() explicitly.</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; q.save()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; q.id</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"># Access modelfield values via Python attributes.</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; q.question_text</span><br><span class="line"></span><br><span class="line">&quot;What&apos;snew?&quot;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; q.pub_date</span><br><span class="line"></span><br><span class="line">datetime.datetime(2012,2, 26, 13, 0, 0, 775217, tzinfo=&lt;UTC&gt;)</span><br><span class="line"></span><br><span class="line"># Change values bychanging the attributes, then calling save().</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; q.question_text = &quot;What&apos;s up?&quot;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; q.save()</span><br><span class="line"></span><br><span class="line"># objects.all()displays all the questions in the database.</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Question.objects.all()</span><br><span class="line"></span><br><span class="line">[&lt;Question:Question object&gt;]</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、创建一个django工程&quot;&gt;&lt;a href=&quot;#一、创建一个django工程&quot; class=&quot;headerlink&quot; title=&quot;一、创建一个django工程&quot;&gt;&lt;/a&gt;一、创建一个django工程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;选择一个工作目录，然后用下
      
    
    </summary>
    
      <category term="原创" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Python" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/Python/"/>
    
    
      <category term="Python" scheme="http://www.jackielee.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://www.jackielee.cn/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>记一次github提交失败的坑</title>
    <link href="http://www.jackielee.cn/posts/f587e199.html"/>
    <id>http://www.jackielee.cn/posts/f587e199.html</id>
    <published>2016-07-02T08:35:57.000Z</published>
    <updated>2019-03-02T15:41:38.173Z</updated>
    
    <content type="html"><![CDATA[<p>git push的时候出现错误：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> blogweb git:(master) git push</span><br><span class="line"><span class="meta">&gt;</span> remote: Permission to XXX/XXX.git denied to XXX.</span><br><span class="line">fatal: unable to access 'https://github.com/XXX/XXX.git/': The requested URL returned error: 403</span><br></pre></td></tr></table></figure></p><p>先试着把https方式换成ssh方式<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> vim .git/config</span><br><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = true</span><br><span class="line">        bare = false</span><br><span class="line">        logallrefupdates = true</span><br><span class="line">        ignorecase = true</span><br><span class="line">        precomposeunicode = true</span><br><span class="line">[remote "origin"]</span><br><span class="line">        url = git@github.com:XXX/XXX.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch "master"]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/master</span><br></pre></td></tr></table></figure></p><p>执行命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git remote set-url origin git@github.com:XXX/XXX.git</span><br><span class="line"><span class="meta">$</span> git push</span><br></pre></td></tr></table></figure></p><p>又报另一个错：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> ERROR: Permission to XXX/XXX.git denied to deploy key</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure></p><p>因为之前在本机连过github，也推过代码，一开始也没想到key的问题</p><p>最后还是去github上的设置看了下，发现竟然没加ssh keys，然后想把本地~/.ssh/id_rsa.pub里的公钥加上，结果报Error: Key already in use错误<br>使用下面命令看看密钥用在哪儿了：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh -T -ai ~/.ssh/id_rsa git@github.com</span><br><span class="line"><span class="meta">&gt;</span> Hi XXX/XXX! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></p><p>发现问题了，用户名竟然是我的github名+仓库名，去github上的这个仓库看了下，还真有个key的配置，删除后，再重新配置全局的ssh keys</p><p>再执行以下命令，变正常了，push也成功了<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh -T -ai ~/.ssh/id_rsa git@github.com</span><br><span class="line"><span class="meta">&gt;</span> Hi XXX! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></p><p>参考：<br><a href="https://help.github.com/en/articles/error-permission-denied-publickey" target="_blank" rel="noopener">https://help.github.com/en/articles/error-permission-denied-publickey</a><br><a href="https://help.github.com/en/articles/error-key-already-in-use" target="_blank" rel="noopener">https://help.github.com/en/articles/error-key-already-in-use</a></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;git push的时候出现错误：&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;
      
    
    </summary>
    
      <category term="原创" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Git" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/Git/"/>
    
    
      <category term="填坑" scheme="http://www.jackielee.cn/tags/%E5%A1%AB%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>linux和windows的线程机制的区别</title>
    <link href="http://www.jackielee.cn/posts/b3139f08.html"/>
    <id>http://www.jackielee.cn/posts/b3139f08.html</id>
    <published>2016-03-31T14:02:39.000Z</published>
    <updated>2019-03-02T15:36:44.152Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux内核中，描述一个进程主要是task_struct，一个称为进程描述符的数据结构。这个数据结构很庞大，包含了内核管理一个进程所需的所有信息，描述了一个正在执行的进程，包括进程ID，它打开的文件，进程的地址空间，挂起的信号，进程的状态等等其他信息。</p><p>Linux的线程机制和Windows等其他操作系统的很不一样，Linux中没有为线程设置专门的数据结构，也没有专门的线程调度算法，在Linux内核看来，线程就是一个进程，只是一个和其他进程共享资源的特殊进程而已。</p><p>在Linux中，创建线程时，和创建普通的进程类似，每个线程都拥有自个的进程描述符task_struct，只是在调用clone()的时候需要传递一些参数标志来指明共享的资源。如图1所示。  </p><p><img src="./b3139f08/1.jpg" alt="linux下的进程和线程"></p><p>而在windows等其他操作系统中，进程拥有一个进程描述符，描述一些地址空间和打开的文件等共享资源，进程中包含指向不同线程的指针，这些线程没有进程描述符，只描述一些少量的独有的资源，因此很轻量。同时这些线程共享进程的资源。如图2所示。  </p><p><img src="./b3139f08/2.jpg" alt="其他操作系统的进程和线程"></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Linux内核中，描述一个进程主要是task_struct，一个称为进程描述符的数据结构。这个数据结构很庞大，包含了内核管理一个进程所需的所有信息，描述了一个正在执行的进程，包括进程ID，它打开的文件，进程的地址空间，挂起的信号，进程的状态等等其他信息。&lt;/p&gt;
&lt;p&gt;L
      
    
    </summary>
    
      <category term="原创" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="系统" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="linux" scheme="http://www.jackielee.cn/tags/linux/"/>
    
      <category term="windows" scheme="http://www.jackielee.cn/tags/windows/"/>
    
      <category term="线程机制" scheme="http://www.jackielee.cn/tags/%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Vmware+Ubuntu14.04+mininet中的host如何访问外网</title>
    <link href="http://www.jackielee.cn/posts/5bd388e3.html"/>
    <id>http://www.jackielee.cn/posts/5bd388e3.html</id>
    <published>2016-01-17T09:32:21.000Z</published>
    <updated>2019-03-02T15:39:37.886Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要mininet虚拟出的网络拓扑中的host访问外网，搞了几天，总是出些小问题，今天终于可以不出问题的搞定了。在这里总结一下，以防以后再出问题。</p><p><code>环境：Win7，Vmware workstation 10.0 ，Ubuntu 14.04，mininet 2.2.0</code></p><p>首先把宿主机win7中的VMnet8设置为自动获取IP地址，然后配置Vmware的Ubuntu，配置两块网卡，都是NAT模式。如下图：</p><center><img src="5bd388e3/1.png" alt="图1"></center><br>点击确定后，点击虚拟网络编辑器，配置VMnet8的子网和掩码以及网关：<br><center><img src="5bd388e3/2.png" alt="图2"></center><br>我这里设置子网为10.0.0.0，子网掩码为255.255.255.0，当然也可以设置为其他的，因为是NAT模式，所以不影响其连外网。这里主要是方便后面设置主机的IP。<br><center><img src="5bd388e3/3.png" alt="图3"></center><br>网关设置为10.0.0.254。<br><center><img src="5bd388e3/4.png" alt="图4"></center><br>这里的DHCP地址范围设置随便取一个合适的范围。<br><br>OK，上面的配置已经为Ubuntu配置好了网络，可以启动Ubuntu了，查看网卡信息：<br><center><img src="5bd388e3/5.png" alt="图5"></center><br>这个时候，ping一下，则可以ping通，而且只有通过eth0来ping通，eth1 ping不通。<br><br>分别用：<code>ping -I eth0 baidu.com</code> 和 <code>ping –I eth1 baidu.com</code>测试。<br><br>为了后面的需要，我们把eth1的IP设置为：0.0.0.0，这样这个闲置的网卡资源就可以被用来桥接到mininet网络中的交换机上，这个后面会介绍怎样桥接。<br><br>利用命令：<code>sudo ifconfig eth1 0.0.0.0</code>，查看IP地址时eth1已经看不到IP地址了。<br><center><img src="5bd388e3/6.png" alt="图6"></center><br>好了，后面开始重点部分了，先在本地运行floodlight控制器，ip为127.0.0.1，端口为6653。然后编写python脚本创建mininet网络，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> mininet.cli <span class="keyword">import</span> CLI</span><br><span class="line"><span class="keyword">from</span> mininet.log <span class="keyword">import</span> setLogLevel, info, error</span><br><span class="line"><span class="keyword">from</span> mininet.net <span class="keyword">import</span> Mininet</span><br><span class="line"><span class="keyword">from</span> mininet.link <span class="keyword">import</span> Intf</span><br><span class="line"><span class="keyword">from</span> mininet.topolib <span class="keyword">import</span> TreeTopo</span><br><span class="line"><span class="keyword">from</span> mininet.util <span class="keyword">import</span> quietRun</span><br><span class="line"><span class="keyword">from</span> mininet.node <span class="keyword">import</span> OVSSwitch, OVSController, Controller, RemoteController</span><br><span class="line"><span class="keyword">from</span> mininet.topo <span class="keyword">import</span> Topo</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTopo</span><span class="params">( Topo )</span>:</span></span><br><span class="line"><span class="comment">#    "this topo is used for Scheme_1"</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">( self )</span>:</span></span><br><span class="line">        <span class="string">"Create custom topo."</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># Initialize topology</span></span><br><span class="line">        Topo.__init__( self )</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># Add hosts </span></span><br><span class="line">        h1 = self.addHost( <span class="string">'h1'</span> , ip=<span class="string">"10.0.0.1/24"</span>, mac=<span class="string">"00:00:00:00:00:01"</span>, defaultRoute=<span class="string">"via 10.0.0.254"</span>)</span><br><span class="line">        h2 = self.addHost( <span class="string">'h2'</span> , ip=<span class="string">"10.0.0.2/24"</span>, mac=<span class="string">"00:00:00:00:00:02"</span>, defaultRoute=<span class="string">"via 10.0.0.254"</span>)</span><br><span class="line">        h3 = self.addHost( <span class="string">'h3'</span> , ip=<span class="string">"10.0.0.3/24"</span>, mac=<span class="string">"00:00:00:00:00:03"</span>, defaultRoute=<span class="string">"via 10.0.0.254"</span>)</span><br><span class="line">        h4 = self.addHost( <span class="string">'h4'</span> , ip=<span class="string">"10.0.0.4/24"</span>, mac=<span class="string">"00:00:00:00:00:04"</span>, defaultRoute=<span class="string">"via 10.0.0.254"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Add switches</span></span><br><span class="line">        s1 = self.addSwitch( <span class="string">'s1'</span> )</span><br><span class="line">        s2 = self.addSwitch( <span class="string">'s2'</span> )</span><br><span class="line">        s3 = self.addSwitch( <span class="string">'s3'</span> )</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># Add links</span></span><br><span class="line">        self.addLink( s1, s2 )</span><br><span class="line">        self.addLink( s1, s3 )</span><br><span class="line">        self.addLink( s2, h1 )</span><br><span class="line">        self.addLink( s2, h2 )</span><br><span class="line">        self.addLink( s3, h3 )</span><br><span class="line">        self.addLink( s3, h4 )</span><br><span class="line">//检查eth1或者其他指定的网卡资源是不是已经被占用</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkIntf</span><span class="params">( intf )</span>:</span></span><br><span class="line">    <span class="string">"Make sure intf exists and is not configured."</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="string">' %s:'</span> % intf ) <span class="keyword">not</span> <span class="keyword">in</span> quietRun( <span class="string">'ip link show'</span> ):</span><br><span class="line">        error( <span class="string">'Error:'</span>, intf, <span class="string">'does not exist!\n'</span> )</span><br><span class="line">        exit( <span class="number">1</span> )</span><br><span class="line">    ips = re.findall( <span class="string">r'\d+\.\d+\.\d+\.\d+'</span>, quietRun( <span class="string">'ifconfig '</span> + intf ) )</span><br><span class="line">    <span class="keyword">if</span> ips:</span><br><span class="line">        error( <span class="string">'Error:'</span>, intf, <span class="string">'has an IP address,'</span></span><br><span class="line">               <span class="string">'and is probably in use!\n'</span> )</span><br><span class="line">        exit( <span class="number">1</span> )</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    setLogLevel( <span class="string">'info'</span> )</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># try to get hw intf from the command line; by default, use eth1</span></span><br><span class="line">    intfName = sys.argv[ <span class="number">1</span> ] <span class="keyword">if</span> len( sys.argv ) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">'eth1'</span></span><br><span class="line">    info( <span class="string">'*** Connecting to hw intf: %s'</span> % intfName )</span><br><span class="line"> </span><br><span class="line">    info( <span class="string">'*** Checking'</span>, intfName, <span class="string">'\n'</span> )</span><br><span class="line">    checkIntf( intfName )</span><br><span class="line"> </span><br><span class="line">    info( <span class="string">'*** Creating network\n'</span> )</span><br><span class="line">    net = Mininet( topo=MyTopo(),controller=<span class="keyword">None</span>) //关键函数，创建mininet网络，指定拓扑和控制器。这里的控制器在后面添加进去</span><br><span class="line">    switch = net.switches[ <span class="number">0</span> ] //取第一个交换机与eth1桥接</span><br><span class="line">    info( <span class="string">'*** Adding hardware interface'</span>, intfName, <span class="string">'to switch'</span>, switch.name, <span class="string">'\n'</span> )</span><br><span class="line">    _intf = Intf( intfName, node=switch ) //最关键的函数，用作把一个网卡与一个交换机桥接</span><br><span class="line"> </span><br><span class="line">    info( <span class="string">'*** Note: you may need to reconfigure the interfaces for '</span></span><br><span class="line">          <span class="string">'the Mininet hosts:\n'</span>, net.hosts, <span class="string">'\n'</span> )</span><br><span class="line">    c0 = RemoteController( <span class="string">'c0'</span>, ip=<span class="string">'127.0.0.1'</span>, port=<span class="number">6653</span> )</span><br><span class="line">    net.addController(c0)</span><br><span class="line">    net.start()</span><br><span class="line">    CLI( net )</span><br><span class="line">    net.stop()</span><br></pre></td></tr></table></figure><br><br>上面的脚本运行后，在floodlight web UI中可以看到创建了如下拓扑：<br><center><img src="5bd388e3/7.png" alt="图7"></center><br>用上面的脚本设置了虚拟网络中的host的IP地址，MAC地址以及默认网关，然后把 Ubuntu的eth1网卡桥接到s1上，这里实现这个桥接功能主要是由Intf函数起作用，可以参看<a href="https://github.com/mininet/mininet/blob/master/examples/hwintf.py：" target="_blank" rel="noopener">https://github.com/mininet/mininet/blob/master/examples/hwintf.py：</a><br><br>使用 <code>sudo python mytopo.py</code> 运行脚本，出现mininet命令行。在命令行中使用xterm h1打开h1的独立窗口，再ping一下baidu.com。<br><center><img src="5bd388e3/8.png" alt="图8"></center><br>到这里就完成了host访问外网的任务了，而且在Ubuntu和win7中也都可以和host通信（ping通）。<br>最后我根据自己的理解画了个总体的图，仅作为参考，不对的地方请留言指出，谢谢。。。<br><center><img src="5bd388e3/9.png" alt="图9"></center><hr><p>参考链接：</p><ol><li><a href="http://techandtrains.com/2013/11/24/mininet-host-talking-to-internet/" target="_blank" rel="noopener">http://techandtrains.com/2013/11/24/mininet-host-talking-to-internet/</a></li><li><a href="http://www.muzixing.com/pages/2013/12/06/yuan-chuang-mininetda-jian-zi-ding-yi-wang-luo-tuo-bu-by-muzi.html" target="_blank" rel="noopener">http://www.muzixing.com/pages/2013/12/06/yuan-chuang-mininetda-jian-zi-ding-yi-wang-luo-tuo-bu-by-muzi.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近需要mininet虚拟出的网络拓扑中的host访问外网，搞了几天，总是出些小问题，今天终于可以不出问题的搞定了。在这里总结一下，以防以后再出问题。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;环境：Win7，Vmware workstation 10.0 ，Ubuntu 14.04，mi
      
    
    </summary>
    
      <category term="原创" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="SDN" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/SDN/"/>
    
    
      <category term="SDN" scheme="http://www.jackielee.cn/tags/SDN/"/>
    
      <category term="Mininet" scheme="http://www.jackielee.cn/tags/Mininet/"/>
    
      <category term="Linux" scheme="http://www.jackielee.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Floodligh Web UI显示的host比实际多且不会被清除的原因和解决方法</title>
    <link href="http://www.jackielee.cn/posts/7d75af24.html"/>
    <id>http://www.jackielee.cn/posts/7d75af24.html</id>
    <published>2016-01-09T14:24:24.000Z</published>
    <updated>2019-03-03T02:54:48.664Z</updated>
    
    <content type="html"><![CDATA[<p>每次启动完floodlight控制器，在<a href="http://127.0.0.1:8080/ui/index.html" target="_blank" rel="noopener">http://127.0.0.1:8080/ui/index.html</a> 中打开floodlight的Web UI界面后，发现host总是会比我定义的多，打开拓扑图界面也很混乱。网上查了下，说是因为OVS的一个local port会去发现外部网络的拓扑，只要禁用OVS的这个端口就可以了，有兴趣的可以试试那个方法。下面是我的实验过程及解决方法。</p><p><strong>命令：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mn --controller=remote,ip=127.0.0.1,port=6653 --topo=tree,2</span><br></pre></td></tr></table></figure></p><p><strong>如下图：</strong></p><p><center><img src="7d75af24/1.png" alt="图1"></center></p><p><center><img src="7d75af24/2.png" alt="图2"></center><br>这样都分不清哪个host是我定义的，交换机倒还好，都很清晰。</p><p>所以我在用mininet创建网络拓扑的时候使用了如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mn --controller=remote,ip=127.0.0.1,port=6653 --mac --topo=tree,2</span><br></pre></td></tr></table></figure></p><p>多加了个mac参数，表示自动设置host的mac，会使我们的host的mac很有规律，如下图：</p><p><center><img src="7d75af24/3.png" alt="图3"></center><br>虽然这样还没解决主机多出来几个的问题，但至少我们能很快分清哪几个使我们的host，这时的host的mac地址，会从00:00:00:00:00:01开始分配。</p><p><strong>1. 方法一：</strong><br>最后我解决host多于实际的方法是先启动mininet，再启动floodlight，因为交换机启动时，链路需要协商，如果先启动floodlight，就会把这些数据包也记录下来。所以先启动mininet，等OVS稳定下来，再启动floodlight控制器，这样就不会把OVS协商链路时发现的一些主机也记录进去。</p><p><center><img src="7d75af24/4.png" alt="图4"></center></p><p><center><img src="7d75af24/5.png" alt="图5"></center><br>虽然一开始，启动mininet时，不能连接上控制器，但在启动控制器后，mininet会主动与控制器连接。</p><p>还有一个问题就是，当退出mininet后，UI上的交换机会立马没了，而主机还在。</p><p><center><img src="7d75af24/6.png" alt="图6"></center><br>然后再用mininet创建网络，UI上的原来的host不变，host在这基础上又会增加几个，每次退出再创建都会多几个host。</p><p><center><img src="7d75af24/7.png" alt="图7"></center><br>上面是我重复三次这样的过程后生成的host，本来只会生成四个host，如今已越来越多。这样很烦，解决的方法是，退出mininet后，就刷新一遍网页，注意不是直接按F5刷新，这样会出错，是再输一次：<a href="http://127.0.0.1:8080/ui/index.html" target="_blank" rel="noopener">http://127.0.0.1:8080/ui/index.html</a> 按回车。这时host才会从网页中清除：</p><p><center><img src="7d75af24/8.png" alt="图8"></center><br>后面再创建拓扑的时候就重复上面的过程，先启动mininet，再启动floodlight，每次退出mininet，就刷新一遍网页。</p><p><strong>2. 方法二：</strong><br>Google查了下发现了其他的几种方法，试了下面的方法，感觉比之前的好了，但还是有点小问题，可能只是我机子的问题。仅作参考。<br>在floodlight的日志输出里有很多IPv6的信息。所以这个解决方法是禁用IPv6。<br>用命令：<code>sudo vim /etc/sysctl.conf</code> ，然后在最后添加下面三行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    net.ipv6.conf.all.disable_ipv6 = 1</span><br><span class="line">    net.ipv6.conf.default.disable_ipv6 = 1</span><br><span class="line">    net.ipv6.conf.lo.disable_ipv6 = 1</span><br></pre></td></tr></table></figure></p><p>保存后重启电脑或者运行：<code>sudo sysctl –p</code><br>上面那种禁用IPv6的方法不一定都适用，使用其他禁用方法也可以。</p><p><strong>3. 方法三：</strong><br>上面的方法二有时候不怎么好，后面我又找到了另外一种更彻底的方法：<br>我的OVS版本是 2.0.1：</p><p><center><img src="7d75af24/9.png" alt="图9"></center><br>Ubuntu版本是3.13:</p><p><center><img src="7d75af24/10.png" alt="图10"></center><br>Google上说是OVS版本和Ubuntu的问题，OVS 2.0.1版本支持Ubuntu 2.6.32 到 3.10，所以我的问题出在OVS版本太低，或者Ubuntu版本过高。解决方法是升级OVS或者降低Ubuntu版本。</p><p>运行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudoapt-get install openvswitch-controller openvswitch-switchopenvswitch-datapath-source</span><br></pre></td></tr></table></figure></p><p>把OVS更新到2.0.2：</p><p><center><img src="7d75af24/11.png" alt="图11"></center><br>然后问题就解决了，至少目前是解决了，彻不彻底后面再看。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每次启动完floodlight控制器，在&lt;a href=&quot;http://127.0.0.1:8080/ui/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://127.0.0.1:8080/ui/index.html&lt;/a&gt; 
      
    
    </summary>
    
      <category term="原创" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="SDN" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/SDN/"/>
    
    
      <category term="SDN" scheme="http://www.jackielee.cn/tags/SDN/"/>
    
      <category term="Floodlight" scheme="http://www.jackielee.cn/tags/Floodlight/"/>
    
  </entry>
  
  <entry>
    <title>简单配置bind9 的master 和slave</title>
    <link href="http://www.jackielee.cn/posts/7ce23410.html"/>
    <id>http://www.jackielee.cn/posts/7ce23410.html</id>
    <published>2016-01-02T12:55:21.000Z</published>
    <updated>2019-03-02T14:28:41.749Z</updated>
    
    <content type="html"><![CDATA[<p><strong>系统</strong>：两台FreeBSD 10.1<br><strong>部署</strong>：一台做master，一台做slave</p><p><strong>具体步骤如下：</strong></p><ol><li><p>首先是安装bind9，我是用的ansible远程安装的，暂时还没有把主从两个安装和配置分开，所以一开始在两台FreeBSD上安装的是一样的bind9，包括named.conf和zone文件都是一样，后面再分开配置的。</p></li><li><p>安装的过程就不赘述了，网上有很多资料，安装完后，就该分别配置两台主机使它们分别作为主从域名服务器了，其实基本配置差不多，比如options里的参数就差不多，只需要改变zone的配置。  </p></li></ol><p><strong>在master中：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">zone&quot;XXX.com&quot; IN &#123;</span><br><span class="line">            type master;</span><br><span class="line">            file &quot;XXX.com.zone&quot;;</span><br><span class="line">            allow-update &#123; none; &#125;;</span><br><span class="line">            allow-transfer &#123; &lt;slave的IP地址&gt;; &#125;;  //允许被哪台slave复制数据过去</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>  <strong>在slave中：</strong><br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zone &quot;XXX.com&quot; IN &#123;</span><br><span class="line">             type slave;</span><br><span class="line">             file &quot;slaves/XXX.com.zone&quot;; //自动创建并从master复制内容</span><br><span class="line">             masters &#123; &lt;master的IP地址&gt;; &#125;;  //指明那台是master，可以有多台，指定多台的时候，multi-master设置为yes</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><ol start="3"><li>Zone对应的资源文件只需要在master里编写和修改就可以了，配置好了后，分别重启服务：service named restart ，就可以看到在slave中原本没有资源文件，现在自动从master中同步过来了。当master中的zone设置了allow-transfer，且资源文件里的Serial有改变时，就会通知slave同步masters里对应地址的主域名服务器的数据。</li></ol><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;系统&lt;/strong&gt;：两台FreeBSD 10.1&lt;br&gt;&lt;strong&gt;部署&lt;/strong&gt;：一台做master，一台做slave&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;具体步骤如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先是安装bind9，我
      
    
    </summary>
    
      <category term="原创" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="网络" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="bind9" scheme="http://www.jackielee.cn/tags/bind9/"/>
    
  </entry>
  
  <entry>
    <title>如何编写Floodlight REST 应用</title>
    <link href="http://www.jackielee.cn/posts/b9b7a1c4.html"/>
    <id>http://www.jackielee.cn/posts/b9b7a1c4.html</id>
    <published>2015-12-28T08:41:37.000Z</published>
    <updated>2019-03-02T14:28:41.748Z</updated>
    
    <content type="html"><![CDATA[<p>可以用任何你喜欢的编程语言编写REST应用</p><h4 id="参照步骤"><a href="#参照步骤" class="headerlink" title="参照步骤"></a>参照步骤</h4><p>1、确定需求，也就是你编写的REST应用需要哪些网络服务和信息。<br>2、检查REST API，看看是否有提供你所需的服务。  </p><ul><li>如果有，了解其RESTAPI的语法，输入的参数以及可得的选项，这样就可以直接拿来用。  </li><li>如果没有，也可能是你所需的网络服务和资源信息没有提供REST API，但却可以在floodlight模块中可获得这些信息，只是没通过API暴露出来。这种情况，你可以自己实现REST API来提供你所需的服务。  </li><li>如果既没有REST API，又在floodlight中找不到，那你可以自己开发floodlight Java模块，并且实现自定义的模块的REST API来提供所需的服务。</li></ul><p>3、用所有你需要的REST API方法，设计以及组成你的应用。<br>4、测试你的应用并且反馈给floodlight。</p><p>下面通过在floodlight/apps目录下的 python Circuit Pusher应用说明。<br>Curcuit Pusher例子给我们展示了如何创建一个在OpenFlow集群中的两个有IP的主机A和B之间的静态单路径线路。</p><h4 id="设计方法"><a href="#设计方法" class="headerlink" title="设计方法"></a>设计方法</h4><p>1、确定所需的网络服务和信息：  </p><ul><li>主机A和B的接触点，即用（交换机ID，端口）表示的数据实体，代表A和B的物理位置。</li><li>A和B之间接触点的路由，即从A经过哪个交换机和哪个端口到达B的路径</li><li>在A和B路由上所有交换机安装流量线路的服务</li></ul><p>2、从RESTAPI中查到的可提供的信息：</p><ul><li>从/wm/device/的GET参数获取设备的接触点信息，比如IP地址</li><li>从/wm/topology/route/<switchida>/<porta>/<switchidb>/<portb>/json可以获取A和B接触点之间的路由信息</portb></switchidb></porta></switchida></li><li>用/wm/staticflowentrypusher/json的POST方法给指定的交换机安装流表项</li></ul><p>3、应用设计：</p><ul><li>语言使用Python</li><li>使用os.popen方法发送curl 命令来调用REST API的方法(应该还可以使用os.system)</li><li>熟悉 /wm/device语法特点，然后在命令返回的结果中解析出A和B接触点的交换机</li><li>熟悉 /wm/topology/route的语法，获取交换机和端口用来下发流表项</li><li>对于每个交换机和端口对，可以通过/wm/staticflowentrypusher/json下发流表</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;可以用任何你喜欢的编程语言编写REST应用&lt;/p&gt;
&lt;h4 id=&quot;参照步骤&quot;&gt;&lt;a href=&quot;#参照步骤&quot; class=&quot;headerlink&quot; title=&quot;参照步骤&quot;&gt;&lt;/a&gt;参照步骤&lt;/h4&gt;&lt;p&gt;1、确定需求，也就是你编写的REST应用需要哪些网络服务和信息。&lt;
      
    
    </summary>
    
      <category term="原创" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="SDN" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/SDN/"/>
    
    
      <category term="SDN" scheme="http://www.jackielee.cn/tags/SDN/"/>
    
      <category term="Floodlight" scheme="http://www.jackielee.cn/tags/Floodlight/"/>
    
  </entry>
  
  <entry>
    <title>Floodlight控制器的安装以及SDN环境的配置</title>
    <link href="http://www.jackielee.cn/posts/96090f8a.html"/>
    <id>http://www.jackielee.cn/posts/96090f8a.html</id>
    <published>2015-12-25T14:28:51.000Z</published>
    <updated>2019-03-02T14:28:41.747Z</updated>
    
    <content type="html"><![CDATA[<p>虽然网上有好多这种配置教材，但是在配置的过程中还是都会出各种问题，所以我想基于我自己的过程，记录下我的配置过程便于以后少走弯路，也给别人参考参考一下，下面的配置是我每步成功过后就记下来的，可能以后环境不是一模一样的还是会出各种小问题，这也难免。</p><p>首先在win7的VMware上安装Ubuntu14.04，并且在Ubuntu里安装一些常用到的软件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sudo apt-get install vim,git</span><br></pre></td></tr></table></figure></p><p>然后进入正式安装floodlight的环节：</p><h3 id="安装java环境以及eclipse"><a href="#安装java环境以及eclipse" class="headerlink" title="安装java环境以及eclipse"></a>安装java环境以及eclipse</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sudo apt-get install build-essentialdefault-jdk ant python-dev eclipse</span><br></pre></td></tr></table></figure><h3 id="下载floodlight源代码以及编译"><a href="#下载floodlight源代码以及编译" class="headerlink" title="下载floodlight源代码以及编译"></a>下载floodlight源代码以及编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git://github.com/floodlight/floodlight.git </span><br><span class="line">$ cd floodlight </span><br><span class="line">$ ant; </span><br><span class="line">$ sudo mkdir /var/lib/floodlight   //同步数据的目录，编译完了floodlight会在这里自动生成一个SyncDB/文件夹，这行不是必需的</span><br><span class="line">$ sudo chmod  /var/lib/floodlight  777</span><br></pre></td></tr></table></figure><h3 id="安装mininet"><a href="#安装mininet" class="headerlink" title="安装mininet"></a>安装mininet</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sudo apt-get install mininet</span><br></pre></td></tr></table></figure><p>然后可以简单测试下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sudo mn</span><br></pre></td></tr></table></figure></p><p>可以进入mininet的命令行就表示安装成功。</p><h3 id="运行floodlight："><a href="#运行floodlight：" class="headerlink" title="运行floodlight："></a>运行floodlight：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd floodlight</span><br><span class="line">$ java –jar target/floodlight.jar //控制台就打印出debug信息</span><br></pre></td></tr></table></figure><h3 id="运行mininet："><a href="#运行mininet：" class="headerlink" title="运行mininet："></a>运行mininet：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sudo mn --controller=remote,ip=127.0.0.1,port=6653</span><br></pre></td></tr></table></figure><p>这一步是把在mininet中建立的虚拟网络连接到floodlight控制器上。</p><h3 id="查看floodlight提供的UI界面"><a href="#查看floodlight提供的UI界面" class="headerlink" title="查看floodlight提供的UI界面"></a>查看floodlight提供的UI界面</h3><p>在浏览器中输入：<a href="http://127.0.0.1:8080/ui/index.html就可以看到floodlight提供的Web" target="_blank" rel="noopener">http://127.0.0.1:8080/ui/index.html就可以看到floodlight提供的Web</a> UI界面。在webUI中可以查看交换机，主机，流表以及网络拓扑等信息。</p><h3 id="配置eclipse"><a href="#配置eclipse" class="headerlink" title="配置eclipse"></a>配置eclipse</h3><p>上面已经完成了基本的配置工作，但是为了方便后续的开发，我们还需要配置好eclipse，把floodlight的源代码导入到其中。方便以后给控制器添加应用模块以及查看控制器的各个模块的源代码。<br>首先需要在floodlight的目录下执行下面这个命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ant</span><br></pre></td></tr></table></figure></p><p>然后打开eclipse，导入已存在的项目到工作空间，选择根目录为floodlight文件夹。</p><p>然后配置eclipse，在eclipse中右键floodlight目录，run as里面的run configurations,新建一个Java Application，name用FloodlightLaunch，project填Floodlight，main填net.floodlightcontroller.core.Main，点应用就OK了。</p><p>上面配置好了，就可以运行floodlight控制器了，点工具栏里的三角形按钮或者右键run as a JavaApplication,然后控制台就一直输出调试信息。后面就可以在eclipse中进行模块以及服务的开发。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然网上有好多这种配置教材，但是在配置的过程中还是都会出各种问题，所以我想基于我自己的过程，记录下我的配置过程便于以后少走弯路，也给别人参考参考一下，下面的配置是我每步成功过后就记下来的，可能以后环境不是一模一样的还是会出各种小问题，这也难免。&lt;/p&gt;
&lt;p&gt;首先在win7
      
    
    </summary>
    
      <category term="原创" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="SDN" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/SDN/"/>
    
    
      <category term="SDN" scheme="http://www.jackielee.cn/tags/SDN/"/>
    
      <category term="Floodlight" scheme="http://www.jackielee.cn/tags/Floodlight/"/>
    
  </entry>
  
  <entry>
    <title>Floodlight控制器创建一个模块的简单过程</title>
    <link href="http://www.jackielee.cn/posts/2335eb7f.html"/>
    <id>http://www.jackielee.cn/posts/2335eb7f.html</id>
    <published>2015-12-24T09:07:18.000Z</published>
    <updated>2019-03-02T14:28:41.746Z</updated>
    
    <content type="html"><![CDATA[<p>假设floodlight和eclipse的安装以及配置已经完成，如果还没有，请参考：<br><a href="https://floodlight.atlassian.net/wiki/display/floodlightcontroller/Installation+Guide" target="_blank" rel="noopener">https://floodlight.atlassian.net/wiki/display/floodlightcontroller/Installation+Guide</a></p><p>很简单的过程，大神就不用看了，主要是记下来方便自己以后用，也给需要的人参考，以下过程全部在eclipse中操作完成</p><ol><li><p>在floodlight项目的src/main/java包上右键新建Java类，填上包路径和Java类名以及继承的类（继承的类一般都包括”IOFMessageListener” 和 “IFloodlightModule”），然后就会自动生成一些需要重写的函数。</p></li><li><p>为了使我们新建的这个类监听到OpenFlow消息，需要在FloodlightProvider （一个IFloodlightProviderService类）注册我们的类。</p></li><li><p>我们需要修改getModuleDependencies()函数，用来告诉模块装载器我们依赖它。getModuleDependencies()函数是第一步添加父类后自动生成的函数。</p></li><li><p>接着编写init方法，init方法在控制器启动的时候就会调用，用来加载依赖模块和初始化数据结构。</p></li><li><p>然后实现基本的监听器，在startUP方法中注册PACKET_IN消息</p></li><li><p>为OFMessage监听器加上一个ID，这步在getName()中实现</p></li><li><p>关键的一步，定义接收到PACKET_IN消息后的行为，在receive()中实现，返回Command.CONTINUE以允许这个消息继续被其他的消息处理模块接收到。</p></li><li><p>我们还需要为之前我们创建的模块注册，这样floodlight启动的时候就可以加载我们的模块，在这一步，首先我们得告诉加载器我们的模块的存在，这可以在src/main/resources/META-INF/services/net.floodlightcontroller.core.module.IFloodlightModule文件里添加我们的模块的类</p></li><li><p>最后，我们还必须在floodlight模块配置文件中添加我们创建的模块，这个是在src/main/resources/floodlightdefault.properties文件里的floodlight.modules里添加我们的包和类的全路径。</p></li></ol><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假设floodlight和eclipse的安装以及配置已经完成，如果还没有，请参考：&lt;br&gt;&lt;a href=&quot;https://floodlight.atlassian.net/wiki/display/floodlightcontroller/Installation+Gu
      
    
    </summary>
    
      <category term="原创" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="SDN" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/SDN/"/>
    
    
      <category term="SDN" scheme="http://www.jackielee.cn/tags/SDN/"/>
    
      <category term="Floodlight" scheme="http://www.jackielee.cn/tags/Floodlight/"/>
    
  </entry>
  
  <entry>
    <title>django 外键model的互相读取</title>
    <link href="http://www.jackielee.cn/posts/d507d673.html"/>
    <id>http://www.jackielee.cn/posts/d507d673.html</id>
    <published>2015-12-15T02:07:27.000Z</published>
    <updated>2019-03-02T14:28:41.747Z</updated>
    
    <content type="html"><![CDATA[<p>先设定一个关系模型如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">   name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">   tagline = models.TextField()</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>            </span><br><span class="line">       <span class="keyword">return</span> self.name</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">   name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">   email = models.EmailField()</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>           </span><br><span class="line">       <span class="keyword">return</span> self.name</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entry</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">   blog = models.ForeignKey(Blog)</span><br><span class="line">   headline = models.CharField(max_length=<span class="number">255</span>)</span><br><span class="line">   body_text = models.TextField()</span><br><span class="line">   authors = models.ManyToManyField(Author)</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>            </span><br><span class="line">      <span class="keyword">return</span> self.headline</span><br></pre></td></tr></table></figure></p><p>上面的数据关系很明晰,Entry中有Blog和Author的外键,如果要在Entry中读取blog和author的数据很容易:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">entry = Entry.objects.all()</span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> entry:</span><br><span class="line">    blog = e.blog</span><br><span class="line">    author = e.authors</span><br></pre></td></tr></table></figure></p><p>要在Blog和Author中读取Entry也可以：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">blog = Blog.objects.all()</span><br><span class="line">entry = blog.entry_set.all()</span><br><span class="line"> </span><br><span class="line">author = Author.objects.all()</span><br><span class="line">entry = author.entry_set.all()</span><br></pre></td></tr></table></figure></p><p>下面通过entry使blog和author互相读取，比如要知道一个blog的Author只需如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">blogs = Blog.objects.all()</span><br><span class="line"><span class="keyword">for</span> blog <span class="keyword">in</span> blogs:</span><br><span class="line">    <span class="keyword">if</span> blog.name== “我们想要查询的博客的name”</span><br><span class="line">        author = blog. entry_set.authors</span><br></pre></td></tr></table></figure></p><p>要查询一个author的所有blog如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">authors = Author.objects.all()</span><br><span class="line">blogs = []</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> author <span class="keyword">in</span> authors:</span><br><span class="line">    <span class="keyword">if</span> author.name== “我们想要查询的Author的name”</span><br><span class="line">        <span class="keyword">for</span> entry <span class="keyword">in</span> author.entry_set.all():</span><br><span class="line">            blogs.append(entry. blog)</span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先设定一个关系模型如下:&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/
      
    
    </summary>
    
      <category term="原创" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Python" scheme="http://www.jackielee.cn/categories/%E5%8E%9F%E5%88%9B/Python/"/>
    
    
      <category term="Python" scheme="http://www.jackielee.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://www.jackielee.cn/tags/Django/"/>
    
  </entry>
  
</feed>
