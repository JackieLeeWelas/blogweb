{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/hexo-generate.sh","path":"hexo-generate.sh","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/images/pasted-0.png","path":"images/pasted-0.png","modified":1,"renderable":0},{"_id":"source/images/pasted-14.png","path":"images/pasted-14.png","modified":1,"renderable":0},{"_id":"source/images/pasted-16.png","path":"images/pasted-16.png","modified":1,"renderable":0},{"_id":"source/images/pasted-2.png","path":"images/pasted-2.png","modified":1,"renderable":0},{"_id":"source/images/pasted-4.png","path":"images/pasted-4.png","modified":1,"renderable":0},{"_id":"source/images/pasted-8.png","path":"images/pasted-8.png","modified":1,"renderable":0},{"_id":"source/images/pasted-7.png","path":"images/pasted-7.png","modified":1,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"source/images/pasted-11.png","path":"images/pasted-11.png","modified":1,"renderable":0},{"_id":"source/images/pasted-12.png","path":"images/pasted-12.png","modified":1,"renderable":0},{"_id":"source/images/pasted-13.png","path":"images/pasted-13.png","modified":1,"renderable":0},{"_id":"source/images/pasted-15.png","path":"images/pasted-15.png","modified":1,"renderable":0},{"_id":"source/images/pasted-3.png","path":"images/pasted-3.png","modified":1,"renderable":0},{"_id":"source/images/pasted-9.png","path":"images/pasted-9.png","modified":1,"renderable":0},{"_id":"source/download/image/2018年美团点评技术年货（合）.jpg","path":"download/image/2018年美团点评技术年货（合）.jpg","modified":1,"renderable":0},{"_id":"source/download/image/EffectiveJava中文版（第2版）.jpg","path":"download/image/EffectiveJava中文版（第2版）.jpg","modified":1,"renderable":0},{"_id":"source/download/image/JAVA并发编程实战.jpg","path":"download/image/JAVA并发编程实战.jpg","modified":1,"renderable":0},{"_id":"source/download/image/Java核心技术卷1第9版.jpg","path":"download/image/Java核心技术卷1第9版.jpg","modified":1,"renderable":0},{"_id":"source/download/image/Head+First设计模式（中文版）.jpg","path":"download/image/Head+First设计模式（中文版）.jpg","modified":1,"renderable":0},{"_id":"source/download/image/Redis实战.jpg","path":"download/image/Redis实战.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-10.png","path":"images/pasted-10.png","modified":1,"renderable":0},{"_id":"source/download/image/深入理解Java虚拟机：JVM高级特性与最佳实践.jpg","path":"download/image/深入理解Java虚拟机：JVM高级特性与最佳实践.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-6.png","path":"images/pasted-6.png","modified":1,"renderable":0},{"_id":"source/download/image/重构_改善既有代码的设计[高清版].jpg","path":"download/image/重构_改善既有代码的设计[高清版].jpg","modified":1,"renderable":0},{"_id":"source/download/image/阿里巴巴Java开发手册.jpg","path":"download/image/阿里巴巴Java开发手册.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/mypic2.jpg","path":"images/mypic2.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechat-qcode.jpg","path":"images/wechat-qcode.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechat-qcode.png","path":"images/wechat-qcode.png","modified":1,"renderable":1},{"_id":"source/images/pasted-5.png","path":"images/pasted-5.png","modified":1,"renderable":0},{"_id":"themes/next/source/images/mypic.jpg","path":"images/mypic.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"source/download/book/阿里巴巴Java开发手册.pdf","path":"download/book/阿里巴巴Java开发手册.pdf","modified":1,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/myhead.jpg","path":"images/myhead.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/download/book/JAVA并发编程实战.pdf","path":"download/book/JAVA并发编程实战.pdf","modified":1,"renderable":0},{"_id":"source/download/book/程序员的思维修炼—开发认知潜能的九堂课.pdf","path":"download/book/程序员的思维修炼—开发认知潜能的九堂课.pdf","modified":1,"renderable":0},{"_id":"source/download/book/Java并发编程的艺术.pdf","path":"download/book/Java并发编程的艺术.pdf","modified":1,"renderable":0},{"_id":"source/download/book/redis设计与实现（第二版）.pdf","path":"download/book/redis设计与实现（第二版）.pdf","modified":1,"renderable":0},{"_id":"source/download/book/程序员必读之软件架构.pdf","path":"download/book/程序员必读之软件架构.pdf","modified":1,"renderable":0},{"_id":"source/download/book/深入理解Linux内核.pdf","path":"download/book/深入理解Linux内核.pdf","modified":1,"renderable":0},{"_id":"source/download/book/自己动手写操作系统完全版.pdf","path":"download/book/自己动手写操作系统完全版.pdf","modified":1,"renderable":0},{"_id":"source/download/book/设计模式：可复用面向对象软件的基础.pdf","path":"download/book/设计模式：可复用面向对象软件的基础.pdf","modified":1,"renderable":0},{"_id":"source/download/book/重构_改善既有代码的设计.pdf","path":"download/book/重构_改善既有代码的设计.pdf","modified":1,"renderable":0},{"_id":"source/download/book/Linux内核设计与实现_第三版.pdf","path":"download/book/Linux内核设计与实现_第三版.pdf","modified":1,"renderable":0},{"_id":"source/download/book/Head+First设计模式（中文版）.pdf","path":"download/book/Head+First设计模式（中文版）.pdf","modified":1,"renderable":0},{"_id":"source/download/book/深入理解Java虚拟机：JVM高级特性与最佳实践.pdf","path":"download/book/深入理解Java虚拟机：JVM高级特性与最佳实践.pdf","modified":1,"renderable":0},{"_id":"source/download/book/Java多线程编程核心技术.pdf","path":"download/book/Java多线程编程核心技术.pdf","modified":1,"renderable":0},{"_id":"source/download/book/EffectiveJava中文版（第2版）.pdf","path":"download/book/EffectiveJava中文版（第2版）.pdf","modified":1,"renderable":0},{"_id":"source/download/book/Redis实战.pdf","path":"download/book/Redis实战.pdf","modified":1,"renderable":0},{"_id":"source/download/book/追踪Linux-TCP-IP代码运行：基于2.6内核.pdf","path":"download/book/追踪Linux-TCP-IP代码运行：基于2.6内核.pdf","modified":1,"renderable":0},{"_id":"source/download/book/Java性能权威指南.pdf","path":"download/book/Java性能权威指南.pdf","modified":1,"renderable":0},{"_id":"source/download/book/大话设计模式.pdf","path":"download/book/大话设计模式.pdf","modified":1,"renderable":0},{"_id":"source/download/book/2018年美团点评技术年货（合）.pdf","path":"download/book/2018年美团点评技术年货（合）.pdf","modified":1,"renderable":0},{"_id":"source/download/book/Java核心技术卷1第9版.pdf","path":"download/book/Java核心技术卷1第9版.pdf","modified":1,"renderable":0},{"_id":"source/download/book/深入浅出MyBatis技术原理与实战.pdf","path":"download/book/深入浅出MyBatis技术原理与实战.pdf","modified":1,"renderable":0},{"_id":"source/download/book/HTTP权威指南（中文版）.pdf","path":"download/book/HTTP权威指南（中文版）.pdf","modified":1,"renderable":0},{"_id":"source/download/book/Python学习手册（第4版）.pdf","path":"download/book/Python学习手册（第4版）.pdf","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"ae4badddbeb7401eb28769ab0c5d8496d0e8c544","modified":1553515894633},{"_id":"source/googlec83ece8c0cfa58e5.html","hash":"116edd3a744b88e7421ca67ea86b0fc325124212","modified":1551508603658},{"_id":"source/hexo-generate.sh","hash":"ee0480aeef63366836b34805aef89d86d5058951","modified":1551508603628},{"_id":"source/robots.txt","hash":"aa82ce19cc9834576ca168c1a40250d5984a5dc6","modified":1551603740420},{"_id":"themes/next/.DS_Store","hash":"aeae975bf5b58d68a2c3ca6cd653732588beaace","modified":1553530042066},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1551508604922},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1551508604923},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1551508605000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1551508604932},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1551508604771},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1551508604921},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1551508604921},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1551508605001},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1551508605002},{"_id":"themes/next/_config.yml","hash":"020462606b6ce3e6c9ca912e9ac0c25af7de11b9","modified":1553530217827},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1551508604724},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1551508604932},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1551508604723},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1551508604922},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1551508604770},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1551508604933},{"_id":"source/_discarded/test.md","hash":"55a0ac9e2b7bd9ae599a88b0610e013fbf553537","modified":1551596185819},{"_id":"source/about/index.md","hash":"ba3599ca3ee99547dfccf61cc04e1d8bfdbb1245","modified":1553444364349},{"_id":"source/_posts/.DS_Store","hash":"fbc8426d025a1a42500fa5787957833b795f8061","modified":1553516399898},{"_id":"source/_posts/Django搭建简单网页（Form）.md","hash":"f947762fb173ed3514fcaf00d263d622a9e3830d","modified":1551595311105},{"_id":"source/_posts/Django搭建简单网页（View）.md","hash":"4223f8bb017b60745c2c6c2184d2a86739c5c2c6","modified":1551595288187},{"_id":"source/_posts/Django搭建简单网页（admin）.md","hash":"b312c800b699416e95112f61100145096a1a2bd7","modified":1551595320048},{"_id":"source/_posts/Django搭建简单网页（models）.md","hash":"521eb1d786699143be602f84f547a53ca9b9fc84","modified":1551595297471},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法.md","hash":"a23eac1df35ca5062903707ae44f9e8f1a838aca","modified":1551595280455},{"_id":"source/_posts/Floodlight控制器创建一个模块的简单过程.md","hash":"b98fa2406ae6d92dddd8a1d705840aa16b929b5a","modified":1551595273236},{"_id":"source/_posts/Floodlight控制器的安装以及SDN环境的配置.md","hash":"012d3e1014b3c54e4fe18d5757ea7844ee3dc093","modified":1551595261013},{"_id":"source/_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网.md","hash":"de5dbd5a71b3461c6e7cf47e2e62389c1cd94f04","modified":1553512300727},{"_id":"source/_posts/django-外键model的互相读取.md","hash":"fce8b3a3a2920063d930aacad9aa188a61aaf466","modified":1551595340694},{"_id":"source/_posts/linux和windows的线程机制的区别.md","hash":"485f5cd540ea86b48302a5838fbaf08df3035894","modified":1551595251498},{"_id":"source/_posts/如何编写Floodlight-REST-应用.md","hash":"c5eeadfe90fda76289676cbfd4966a6b28c61303","modified":1551595178286},{"_id":"source/_posts/深入理解JVM类加载机制.md","hash":"3935b1a9fd184a38d0b980e54a394e3f507a67c8","modified":1553530203920},{"_id":"source/_posts/深入解析Class类文件的结构.md","hash":"888d0b00c74a841e3107661b5f7729b5fcb00c02","modified":1553512375609},{"_id":"source/_posts/简单配置bind9-的master-和slave.md","hash":"a69d2ee7f17494b4fe37bef53f097af01a4b575d","modified":1551595162215},{"_id":"source/_posts/记一次github提交失败的坑.md","hash":"d18bfc0defab18736eb4b09f8f3c10d58a0ab801","modified":1551595119734},{"_id":"source/categories/index.md","hash":"e31c1809f1d30aa06219982c31007581fe18518b","modified":1551508604720},{"_id":"source/download/.DS_Store","hash":"e666f9fce71db25d278a957b7219922328713c40","modified":1551752717493},{"_id":"source/download/index.md","hash":"518dd9815a5ecef80b31566de45403c607f31f7b","modified":1553444567479},{"_id":"source/favorite/index.md","hash":"ecc0cfdfb629a2fe71655c5543271d2c4aa194d8","modified":1553180229513},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1551604399055},{"_id":"source/images/pasted-0.png","hash":"f08f211f231c447a8ad9aa9a1bdd8ca8ed90e22a","modified":1553444210310},{"_id":"source/images/pasted-14.png","hash":"fe0daaf91f26bd358d3ac460c210c4bc3f75c045","modified":1551601750702},{"_id":"source/images/pasted-16.png","hash":"d95e816456d0a1a9aa98416635f9d35e74b36e09","modified":1551601774798},{"_id":"source/images/pasted-2.png","hash":"564b7de342d6927fa909e4d1f1ba8ba8d49d0a80","modified":1551601602368},{"_id":"source/images/pasted-4.png","hash":"faa95551effa7962646209f0b3247a42000f7612","modified":1551601628772},{"_id":"source/images/pasted-8.png","hash":"6c3680632ef9de47936d59dff3c59afdd5283066","modified":1551601678257},{"_id":"source/images/pasted-7.png","hash":"d95e816456d0a1a9aa98416635f9d35e74b36e09","modified":1551601662486},{"_id":"source/tags/index.md","hash":"9a9157abb9c1e6e3579a9f12281f1fae6f9ebb61","modified":1551508603662},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1551508604942},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1551508604941},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1551508604941},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1551508604940},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1551508604927},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1551508604924},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1551508604929},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1551508604930},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1551508604926},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1551508604928},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1551508604928},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1551508604929},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1551508604926},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1551508604925},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1551508604927},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1551508604930},{"_id":"themes/next/languages/zh-Hans.yml","hash":"0f0a4584c065174186654502748c5a19a02db4a4","modified":1551508604925},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1551508604931},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1551508604929},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1551508604931},{"_id":"themes/next/layout/_layout.swig","hash":"27c6b35949dbd159fc5cdd6361ceb36629771650","modified":1551508604730},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1551508604745},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1551508604730},{"_id":"themes/next/layout/index.swig","hash":"0ae8be9063611551f6b45f90e29a5a96b2df9b3d","modified":1551603411760},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1551508604735},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1551508604735},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1551508604935},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1551508604728},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1551508604727},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1551508604935},{"_id":"themes/next/source/.DS_Store","hash":"452f6f48cfe4f70f1c9586cb3ed6982246c0df01","modified":1553516389711},{"_id":"themes/next/source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1551508604859},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1551508604726},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1551508604726},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1551508604725},{"_id":"source/images/pasted-11.png","hash":"30a4c5fdcf0b52c95dafffc87fa3838e9ce71bac","modified":1551601715293},{"_id":"source/images/pasted-12.png","hash":"02b7d7ace1c3aa59d72417afe4041c7a98c143b1","modified":1551601727855},{"_id":"source/images/pasted-13.png","hash":"e9698af867b387f9c7b9cb0a6b6fe937334f0d07","modified":1551601740982},{"_id":"source/images/pasted-15.png","hash":"6099408722836c430208a0b8485e3980ca3ee36d","modified":1551601761760},{"_id":"source/images/pasted-3.png","hash":"322e25106128343387324eeaf9221b04bd3e1540","modified":1551601617187},{"_id":"source/images/pasted-9.png","hash":"fb7965b0468e3367b8d6550fd56522fe039aea00","modified":1551601690127},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551508604920},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1551508603648},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/10.png","hash":"5c2cc24af2d6e8e82d71ae0221582d456bab5473","modified":1551508603650},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/11.png","hash":"137f343fc21590dbfdbcdde1870d35ba1a1581ac","modified":1551508603649},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/5.png","hash":"08c52c9a9a83141bd6d0aa4ead31576fc0e2e422","modified":1551508603652},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/6.png","hash":"b448b9a73a7b7cba5b230f5180c0931f6ddff942","modified":1551508603653},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/4.png","hash":"45ad9cb25621904c742415db43bc79feb0f9f783","modified":1551508603651},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/8.png","hash":"b3459303a8c1ea88b687e53e0f9d605ac2bfb349","modified":1551508603648},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/9.png","hash":"244c42171b5f2123f759abcbc469d1f134b65c5c","modified":1551508603649},{"_id":"source/_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网/1.png","hash":"6dd322a59db6f8abe80bc186c13c2c4e082c5bfe","modified":1551508603640},{"_id":"source/_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网/4.png","hash":"fc16b122f574044d9702df3632a729e0b6ce07ad","modified":1551508603635},{"_id":"source/_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网/3.png","hash":"2d9c5952ede291882f184932ad1b37722355fb73","modified":1551508603640},{"_id":"source/_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网/2.png","hash":"fdde86701b22619da50fe5828e0566b9182ca639","modified":1551508603639},{"_id":"source/_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网/5.png","hash":"8d51374c1e4a5f49b87f2aba3eca8ac2ea28ea69","modified":1551508603636},{"_id":"source/_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网/6.png","hash":"edb09583b2ffe2c9da687b797c5506e5e1d79d87","modified":1551508603638},{"_id":"source/_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网/7.png","hash":"70b0c785059af5906b13b1c552621745a0341b16","modified":1551508603637},{"_id":"source/_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网/8.png","hash":"12f8837e39b54fd235dd3f825bcbf7c0470f6e78","modified":1551508603633},{"_id":"source/_posts/linux和windows的线程机制的区别/2.jpg","hash":"b59cb70213287fe225647f91378e7db13094725f","modified":1551508603645},{"_id":"source/_posts/linux和windows的线程机制的区别/1.jpg","hash":"19e9b657ee0f8963dfd92039c8b6a36b70a29fa0","modified":1551508603646},{"_id":"source/_posts/深入解析Class类文件的结构/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1553491284204},{"_id":"source/download/image/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1551508603667},{"_id":"source/download/image/2018年美团点评技术年货（合）.jpg","hash":"0abe4f3c5da18d102fc6f9eb8e194ea4c46f6efa","modified":1551752735927},{"_id":"source/download/image/EffectiveJava中文版（第2版）.jpg","hash":"defc1d2041bf88a15fe720c5c1ecf3a44181c4d5","modified":1551752750776},{"_id":"source/download/image/JAVA并发编程实战.jpg","hash":"ef5e2ea13ca91dd7e7fe77f233f66d128c94268a","modified":1551752782288},{"_id":"source/download/image/Java核心技术卷1第9版.jpg","hash":"89f5d55f7f8562d6853fdb66bbc0338fd7a97312","modified":1551752795041},{"_id":"source/download/image/Head+First设计模式（中文版）.jpg","hash":"c3386213443a32e0a9f7122616505bb5b3ac7941","modified":1551752763398},{"_id":"source/download/image/Redis实战.jpg","hash":"76ce1f801006b9acf2bfbd8f8b8c0e0b1c9ca9da","modified":1551752806484},{"_id":"source/images/pasted-10.png","hash":"03e430c7cbb90201c67c84150d5914cca97d670a","modified":1551601702321},{"_id":"source/download/image/深入理解Java虚拟机：JVM高级特性与最佳实践.jpg","hash":"729e81cadf4d0afd5609aeeb658783a0854f8088","modified":1551752820978},{"_id":"source/images/pasted-6.png","hash":"b976b0db4d1ae34c9d37c7a21901f1e9813a3ebf","modified":1551601651504},{"_id":"source/download/image/重构_改善既有代码的设计[高清版].jpg","hash":"57535e8d210f2b64ce449d37b787ab0dc2662686","modified":1551752833341},{"_id":"source/download/image/阿里巴巴Java开发手册.jpg","hash":"0b52093c8f8ebcb0ec0f82f3292796446b1beb1a","modified":1551752848919},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1551508604729},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1551508604729},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"87bd54ac6de0edb6662b582b8fea1d284ce27f59","modified":1551508604766},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1551508604769},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1551508604769},{"_id":"themes/next/layout/_macro/post.swig","hash":"e86eeaa00c3faacf897c0ae63e93f14d1521e941","modified":1551586132359},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1551508604741},{"_id":"themes/next/layout/_partials/footer.swig","hash":"b5b66aad2b23e23b21fcf19f9933dbc9788f57e7","modified":1551508604741},{"_id":"themes/next/layout/_partials/head.swig","hash":"26705d9a0cb44b9f5db7a1b3efd32e7bbf2d0a08","modified":1551508604742},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1551508604742},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1551508604768},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1551508604768},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1551508604765},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1551508604737},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1551508604740},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1551508604743},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1551508604733},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"566193618fef46b0d21c82c971f4c5c493562282","modified":1551508604734},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1551508604733},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1551508604757},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1551508604752},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1551508604753},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1551508604757},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1551508604759},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1551508604752},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1551508604938},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1551508604936},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1551508604939},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1551508604938},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1551508604939},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1551508604939},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1551508604936},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1551508604937},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1551508604937},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1551508604816},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1551508604842},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1551508604831},{"_id":"themes/next/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1551604488074},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1551508604836},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1551508604840},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1551508604834},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1551508604831},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1551508604845},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1551508604837},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1551508604847},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1551508604846},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1551508604844},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1551508604844},{"_id":"themes/next/source/images/favicon.ico","hash":"7a6daa6422b9f7b8a26ab9a5c0f91e1f454a2951","modified":1551508604832},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551508604842},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1551508604847},{"_id":"themes/next/source/images/mypic2.jpg","hash":"5b75ab5bf7ee7e319e63b070b8abeb1cd1a9b634","modified":1551604507598},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551508604830},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1551508604841},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1551508604844},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1551508604836},{"_id":"themes/next/source/images/wechat-qcode.jpg","hash":"c57219ecb4cab7c703a02bf399dcec607cd6d548","modified":1551508604842},{"_id":"themes/next/source/images/wechat-qcode.png","hash":"f08f211f231c447a8ad9aa9a1bdd8ca8ed90e22a","modified":1553444210310},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/1.png","hash":"9fbe12f2dfe99ad7baf0c85e45668c36ffbd3679","modified":1551508603656},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/2.png","hash":"e9fe4b021ef0ea61c0a1235249fd00278206404a","modified":1551508603655},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/3.png","hash":"f5c473db1e880666115f5c92ed12059f6080866f","modified":1551508603656},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/7.png","hash":"b15cb3b766af5b8217d4cfe4fc5d53b23f7a0730","modified":1551508603652},{"_id":"source/_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网/9.png","hash":"173db1e787ce16c0af3d0b44b39b8f40ce9ad7e6","modified":1551508603634},{"_id":"source/images/pasted-5.png","hash":"a2a8eebdc12635cb79612020db73bd555afdd61d","modified":1551601640009},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551508604732},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551508604732},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1551508604751},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551508604829},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551508604830},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551508604828},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551508604816},{"_id":"themes/next/source/images/mypic.jpg","hash":"2b3b705fcabf67fb7e05ba39d509d66898bbeaee","modified":1553429796197},{"_id":"source/_posts/深入理解JVM类加载机制/双亲委派模型数据流程图.png","hash":"09e9f2f20a693387b4fd1ec244abc15157473b08","modified":1553426275756},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1551508604740},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1551508604740},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1551508604739},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1551508604738},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1551508604738},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1551508604745},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1551508604743},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1551508604744},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1551508604744},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1551508604734},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1551508604732},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1551508604750},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1551508604732},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1551508604747},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1551508604750},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1551508604747},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1551508604749},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1551508604750},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1551508604748},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1551508604751},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1551508604749},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1551508604762},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1551508604761},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1551508604760},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1551508604763},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1551508604765},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1551508604762},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1551508604763},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1551508604761},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1551508604760},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1551508604764},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1551508604762},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1551508604764},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1551508604759},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1551508604753},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1551508604754},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1551508604758},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"53a0421fe862e20544c0b74112ef9741884909f9","modified":1551602722034},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1551508604829},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1551508604829},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1551508604830},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1551508604814},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1551508604814},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1551508604815},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"f842254d95a31ad079553af2858dd97a6bd589f6","modified":1551602141452},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1551508604815},{"_id":"themes/next/source/images/alipay.jpg","hash":"2f6aeb9b9f331eefb13c69ad769205cef9cbec81","modified":1551508604846},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1551508604852},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1551508604858},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1551508604855},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1551508604857},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1551508604852},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1551508604858},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1551508604854},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1551508604856},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1551508604855},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1551508604853},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1551508604853},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1551508604889},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1551508604868},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1551508604869},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1551508604878},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1551508604878},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1551508604861},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1551508604860},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1551508604861},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1551508604911},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1551508604860},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1551508604911},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1551508604908},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1551508604911},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1551508604910},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1551508604880},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1551508604901},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1551508604902},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1551508604900},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1551508604901},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1551508604900},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1551508604900},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1551508604866},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1551508604865},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1551508604864},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1551508604884},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1551508604882},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1551508604885},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1551508604882},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1551508604886},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1551508604885},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1551508604887},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1551508604881},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1551508604883},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1551508604883},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1551508604887},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1551508604882},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1551508604884},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1551508604881},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1551508604893},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1551508604894},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1551508604898},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1551508604891},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1551508604890},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1551508604889},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1551508604891},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1551508604890},{"_id":"source/_posts/深入理解JVM类加载机制/4个验证过程.jpg","hash":"9e769af5d002b745d632b9d234bddffef6f4b68f","modified":1553415611706},{"_id":"source/_posts/深入理解JVM类加载机制/双亲委托模型图.png","hash":"1baf89a0b6c654073de0d52ad4dbfc8375181305","modified":1553420023041},{"_id":"source/_posts/深入理解JVM类加载机制/类的生命周期.png","hash":"3c98eb1d1371fd2c65b8addb33fd2db96987a323","modified":1553413897929},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1551508604754},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"5a3cf2f356e2be712a174f587627013369849c3b","modified":1551508604850},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1551508604879},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1551508604756},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1551508604756},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1551508604803},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1551508604796},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1551508604797},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1551508604777},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1551508604795},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1551508604796},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1551508604802},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1551508604813},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1551508604775},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1551508604774},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1551508604775},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1551508604776},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1551508604776},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1551508604776},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1551508604825},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1551508604826},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1551508604827},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1551508604828},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"a941707857e39b6f3c5d8f70ce846f4a8865616f","modified":1551594791691},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1551508604827},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1551508604820},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1551508604825},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1551508604819},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1551508604818},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1551508604820},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1551508604819},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1551508604822},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1551508604819},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1551508604823},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1551508604821},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1551508604821},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1551508604822},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1551508604823},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1551508604851},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1551508604903},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1551508604907},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1551508604903},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1551508604873},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1551508604874},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1551508604871},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1551508604874},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1551508604872},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1551508604873},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1551508604872},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1551508604871},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1551508604862},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1551508604862},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1551508604909},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1551508604909},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1551508604910},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1551508604899},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1551508604899},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1551508604872},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1551508604918},{"_id":"source/_posts/深入理解JVM类加载机制/JVM体系结构.png","hash":"6c8cfa905b63712410e00ee063b7d522b99f43d9","modified":1553413710598},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1551508604786},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"5898f811303cd39953129e3626cdfbbd8223b678","modified":1551508604812},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1551508604812},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1551508604811},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1551508604812},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1551508604795},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1551508604794},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1551508604794},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1551508604810},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1551508604810},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1551508604809},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1551508604809},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1551508604808},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"3496dc2ca5647bbf6a827f991d61849205a5955a","modified":1551508604787},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1551508604791},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1551508604792},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1551508604792},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1551508604793},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1551508604790},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1551508604789},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1551508604789},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1551508604787},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1551508604788},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1551508604791},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1551508604790},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1551508604789},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1551508604791},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"0a753aaebc89572748dba691d86879fb4f5b2662","modified":1551508604788},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1551508604778},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"d051ed26c02c2e2f6a76b0e6b3f2c8f087ed8396","modified":1551508604783},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1551508604793},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1551508604785},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1551508604780},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1551508604781},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1551508604784},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1551508604785},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1551508604784},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1551508604783},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1551508604779},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1551508604801},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1551508604797},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1551508604800},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1551508604799},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1551508604801},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1551508604798},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1551508604798},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1551508604798},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1551508604804},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1551508604804},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1551508604799},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1551508604805},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1551508604807},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1551508604806},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1551508604805},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1551508604807},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1551508604806},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1551508604803},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1551508604807},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1551508604826},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1551508604824},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1551508604818},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1551508604905},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1551508604905},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1551508604904},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1551508604907},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1551508604906},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1551508604906},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1551508604875},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1551508604877},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1551508604877},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1551508604876},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1551508604876},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1551508604876},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1551508604914},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1551508604915},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1551508604811},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1551508604919},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1551508604916},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1551508604892},{"_id":"source/_posts/深入理解JVM类加载机制/7类符号引用.png","hash":"cb3f0958fafececb10d8ae151d01e36557905774","modified":1553417995025},{"_id":"source/_posts/深入解析Class类文件的结构/字节码文件实战分析.png","hash":"f241ec85df700a0eacdeac8d3252c0fe359d6dd2","modified":1553230720016},{"_id":"source/download/book/阿里巴巴Java开发手册.pdf","hash":"d9a6da7ac5bff8f442131f61cf86fb96ab24d671","modified":1551508604718},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1551508604867},{"_id":"source/_posts/深入理解JVM类加载机制/双亲委派模型核心代码.png","hash":"752d84464972db63383dd58c477dbc6e12cd83ec","modified":1553426198284},{"_id":"themes/next/source/images/myhead.jpg","hash":"9707dfd0809c36aea22dcdc0a64a436918888bb0","modified":1551508604839},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1551508604896},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1551508604913},{"_id":"source/_posts/深入解析Class类文件的结构/class.png","hash":"be9e629a3f6333d185ed5dc0de0f753983849dc2","modified":1553408759826},{"_id":"source/_posts/深入解析Class类文件的结构/javap.png","hash":"fe2fa980ffa62f081fe64ca782d506bff51cf2ef","modified":1553406399060},{"_id":"source/download/book/JAVA并发编程实战.pdf","hash":"a91ed7fa47581b0d9ed1ff5f3b3023e14d5b4e03","modified":1551508603689},{"_id":"source/download/book/程序员的思维修炼—开发认知潜能的九堂课.pdf","hash":"3067824a4118a091780fdb203078a3a62c1f1c13","modified":1510046843000},{"_id":"source/download/book/Java并发编程的艺术.pdf","hash":"fe7f5476bd7cee54e5dde3e2324325856b75addf","modified":1534658796028},{"_id":"source/download/book/redis设计与实现（第二版）.pdf","hash":"281220a5ddd03d2169139cef8b0f49dd084db0be","modified":1534258296196},{"_id":"source/download/book/程序员必读之软件架构.pdf","hash":"dfd009805ab4cce95e2ffa368775d213a22a96ff","modified":1519461377151},{"_id":"source/download/book/深入理解Linux内核.pdf","hash":"d52971d93078b3bf3329656fdb72256c271178d3","modified":1458916712000},{"_id":"source/download/book/自己动手写操作系统完全版.pdf","hash":"d411ec0f1d10d7e8f9d8f00ac306a96aa8071c1d","modified":1458453110000},{"_id":"source/download/book/设计模式：可复用面向对象软件的基础.pdf","hash":"9ff15da9d15f5f6cfa80284e3e6b5bfc451286e1","modified":1537442914043},{"_id":"source/download/book/重构_改善既有代码的设计.pdf","hash":"5e32c96db94fe4a2880df03e7a4cb548763b4cad","modified":1551508604542},{"_id":"source/download/book/Linux内核设计与实现_第三版.pdf","hash":"efa21e021ac25eefdfcb12035b8b5e886644b40b","modified":1391600370000},{"_id":"source/download/book/Head+First设计模式（中文版）.pdf","hash":"fb37c1fbc204c0f27178b77df8bd28dcba6f2051","modified":1551508604119},{"_id":"source/download/book/深入理解Java虚拟机：JVM高级特性与最佳实践.pdf","hash":"80796b76366b418d62097926b037c9825713a4ce","modified":1551508604230},{"_id":"source/download/book/Java多线程编程核心技术.pdf","hash":"ef0c21437400d543cac89c8b5e5210fbf8522eaf","modified":1542459862700},{"_id":"source/download/book/EffectiveJava中文版（第2版）.pdf","hash":"9a166f4c373d1a3f3c96675860f8248adc13fdfc","modified":1551508604697},{"_id":"source/download/book/Redis实战.pdf","hash":"1849512d73d730e1d45e58330258df076d43d4fe","modified":1551508604023},{"_id":"source/download/book/追踪Linux-TCP-IP代码运行：基于2.6内核.pdf","hash":"233e2885ee2d58732a9d55886a6ab266a018a1bb","modified":1459244358000},{"_id":"source/download/book/Java性能权威指南.pdf","hash":"64aea6b5606a62e9de31f1ae90a3e50de0acfc82","modified":1538104414671},{"_id":"source/download/book/大话设计模式.pdf","hash":"2c353d6262f345e9e9ac681d470a2cbb13e1bcc5","modified":1537443015243},{"_id":"source/download/book/2018年美团点评技术年货（合）.pdf","hash":"3eb58f772cc3e350391366d2858d442503d1f71a","modified":1551508603860},{"_id":"source/download/book/Java核心技术卷1第9版.pdf","hash":"70b3c284f45722ac56b3afef0476152ebe90be96","modified":1551508604454},{"_id":"source/download/book/深入浅出MyBatis技术原理与实战.pdf","hash":"7d4a63bb483380a2bbda98b688b015272996f8b4","modified":1533729589967},{"_id":"source/download/book/HTTP权威指南（中文版）.pdf","hash":"1d7d10d1c9e931f522a41e9a08b024e710c47ff3","modified":1519541420528},{"_id":"source/download/book/Python学习手册（第4版）.pdf","hash":"6689834b7b38b08ab2a84c7c0586c30190a9741c","modified":1543671560157},{"_id":"public/baidusitemap.xml","hash":"c0774c8cf802b45865b3ea5a769e8f1283d29f6d","modified":1553530240302},{"_id":"public/atom.xml","hash":"8b656eef96d29d3e6266b4cc5f71deee9c6e360b","modified":1553530240302},{"_id":"public/search.xml","hash":"1dec962fb8e7c43ed162b6c2aab4b8a085b00954","modified":1553530240329},{"_id":"public/sitemap.xml","hash":"949b8f6f6d6ca9eadd59d0326580078f142a1881","modified":1553530240329},{"_id":"public/googlec83ece8c0cfa58e5.html","hash":"e0c3cbfa53531f184cecaa07d68e125e5d0266be","modified":1553530240350},{"_id":"public/about/index.html","hash":"eaedf20b564dd1ac0bc5f594f600a57bbfd51163","modified":1553530240350},{"_id":"public/categories/index.html","hash":"200b5eb90daaa2159da0b0f66daaa1da8b5d6159","modified":1553530240350},{"_id":"public/download/index.html","hash":"3c837982b5e69f7839175707d6a3e2ad49bc3922","modified":1553530240350},{"_id":"public/favorite/index.html","hash":"1c211708c2f606a0f2b9b9a5408c52b890165b9a","modified":1553530240350},{"_id":"public/tags/index.html","hash":"1d4f81f1fca0bafec72b252c4b1319a005c30aa7","modified":1553530240350},{"_id":"public/posts/7a3ae3d8.html","hash":"9e08c2114af9045bc1da35bcb1bd335c55ea7a4b","modified":1553530240350},{"_id":"public/posts/7eb7d5c7.html","hash":"83d317f046747391e04ce5f98c7bf3c00b4508e4","modified":1553530240350},{"_id":"public/posts/f587e199.html","hash":"1e19966adaa5ee5dbcc5043780c56dd385e3e0ae","modified":1553530240350},{"_id":"public/posts/b3139f08.html","hash":"e5e3d39ed33c1eacf341c6ddba43bd19ca0a4af7","modified":1553530240350},{"_id":"public/posts/5bd388e3.html","hash":"bc20844562efb73f3f324ed292a00d371d81b8a0","modified":1553530240350},{"_id":"public/posts/7d75af24.html","hash":"61806e3c0509f626048cfe93da1729f99da799b7","modified":1553530240350},{"_id":"public/posts/7ce23410.html","hash":"ccdf9eb344a52da66330aefe19570a0eb8c306f0","modified":1553530240350},{"_id":"public/posts/b9b7a1c4.html","hash":"9d77bcf5c1c5da5e18223be5fbf2d86c2500e016","modified":1553530240350},{"_id":"public/posts/96090f8a.html","hash":"59ceb54d42ce32ee77823cbdcbc67e32dcc5a2b9","modified":1553530240350},{"_id":"public/posts/2335eb7f.html","hash":"4990efd31797851afc5845d97f737224d0919e19","modified":1553530240350},{"_id":"public/posts/d507d673.html","hash":"6d9fb14e2c671ca71de7619577eeb5be6733c590","modified":1553530240350},{"_id":"public/posts/3633b975.html","hash":"c5a3b0906ba829b33806ffa3b882135ee6b34c2d","modified":1553530240350},{"_id":"public/posts/9a5c839.html","hash":"6c390a1ae891e2d454bbd0de983d5921d6fbcd46","modified":1553530240351},{"_id":"public/posts/6ad03acf.html","hash":"89527d0e03530b756c3f7f58d1d19723a708aecd","modified":1553530240351},{"_id":"public/posts/1f3cc00.html","hash":"e360376ed0f836730e00f1b79d929aae6a19511c","modified":1553530240351},{"_id":"public/archives/index.html","hash":"e9408e121d07665c6de7fc2e48a146678a6e5e09","modified":1553530240351},{"_id":"public/archives/page/2/index.html","hash":"12c2b8c7bc0018227a624fbd5feaa4286c064e18","modified":1553530240351},{"_id":"public/archives/2015/index.html","hash":"6a64fdf64b895855339a00968df853e06735465b","modified":1553530240351},{"_id":"public/archives/2015/09/index.html","hash":"91fd57f171cd72c6dc3dd167b501bfe172237bce","modified":1553530240351},{"_id":"public/archives/2015/10/index.html","hash":"61e6fef885f55db7f7747afe8216434de0d0fea9","modified":1553530240351},{"_id":"public/archives/2015/12/index.html","hash":"d53768c00dc8eaf3bb6461f847753686b3198f4f","modified":1553530240351},{"_id":"public/archives/2016/index.html","hash":"d0ca0bbba2480bafeee2abc7a91d6ecd5134dd0c","modified":1553530240351},{"_id":"public/archives/2016/01/index.html","hash":"8e3b2da5e4e635dee7b09a890cb72c9ea932d50b","modified":1553530240351},{"_id":"public/archives/2016/03/index.html","hash":"493e2ab895a4e1d984ad67a0b322a79d2edbddf3","modified":1553530240351},{"_id":"public/archives/2016/07/index.html","hash":"6b30a28ca330448520d3e42a6037cdee3304591e","modified":1553530240351},{"_id":"public/archives/2019/index.html","hash":"3242e607655684460a696d77090bec306358d206","modified":1553530240351},{"_id":"public/archives/2019/03/index.html","hash":"bcdb831f54512dc81d572968576161cfb734807c","modified":1553530240351},{"_id":"public/categories/原创/index.html","hash":"fcd937d7fa72e9bc0809338528a828183f446055","modified":1553530240351},{"_id":"public/categories/原创/page/2/index.html","hash":"b4e7d14df7b27e66ab577e234c81bad149470fbd","modified":1553530240351},{"_id":"public/categories/原创/Python/index.html","hash":"e9fcd141a60181fdbbab615fb2398ee7c2476f87","modified":1553530240352},{"_id":"public/categories/原创/SDN/index.html","hash":"93b98a7ddcb6652836474e4f7488837ff2d1332f","modified":1553530240352},{"_id":"public/categories/原创/系统/index.html","hash":"c8e6b6fed8adcd3a6053a272ac163bdbff352cf8","modified":1553530240352},{"_id":"public/categories/原创/JVM/index.html","hash":"0b5215c80c515bc991a4daaaa2b54e21f6d1b9a9","modified":1553530240352},{"_id":"public/categories/原创/网络/index.html","hash":"61312ed9be5e2e83d77559a5d2abca115239401b","modified":1553530240352},{"_id":"public/categories/原创/Git/index.html","hash":"e77b59fd429396373d38d356693289c36feec108","modified":1553530240352},{"_id":"public/index.html","hash":"b46020dae5a192dbe00d179b7f49104bf41cbbb1","modified":1553530240352},{"_id":"public/page/2/index.html","hash":"a19840b895f9dc20f976314b98ae118dc598b6b5","modified":1553530240352},{"_id":"public/tags/Python/index.html","hash":"3a96516867c86fe3830f5ecd23f51a13b04b33df","modified":1553530240352},{"_id":"public/tags/Django/index.html","hash":"b4ee21367cd115ce8d3355c149a98bb09be10aae","modified":1553530240352},{"_id":"public/tags/SDN/index.html","hash":"6adf83d0caa30990cad482e65be87985078cbd67","modified":1553530240352},{"_id":"public/tags/Floodlight/index.html","hash":"eacf3970ecc0f51e6f9ea451d6c6ce044435b1c1","modified":1553530240352},{"_id":"public/tags/Mininet/index.html","hash":"cfd0021636e4b55a5c3bb168afbd0d3948f3630b","modified":1553530240352},{"_id":"public/tags/Linux/index.html","hash":"8998e7d5b439589a4e5c9773c1e2c7c5a5d8d139","modified":1553530240352},{"_id":"public/tags/linux/index.html","hash":"686ecaae0ed850f0d860024aa1fb4b20c33727e0","modified":1553530240352},{"_id":"public/tags/windows/index.html","hash":"b76aa852f89bd31c1d562e3810a5d78a1f8f73df","modified":1553530240352},{"_id":"public/tags/线程机制/index.html","hash":"d125452c1072c091ce2a8c3853dee9202d4aa8cc","modified":1553530240352},{"_id":"public/tags/java/index.html","hash":"f1e404760b23af271b277276b35c1aecf8b11483","modified":1553530240352},{"_id":"public/tags/jvm/index.html","hash":"60058450ec81e75f40573c8636b7443986cb2167","modified":1553530240352},{"_id":"public/tags/bind9/index.html","hash":"4094bccfc6225115598312754f473d502d2e5de3","modified":1553530240352},{"_id":"public/tags/填坑/index.html","hash":"0179ce27b439604d38fe037762c7dcc90f7e3440","modified":1553530240353},{"_id":"public/tags/类加载/index.html","hash":"ba9ad01b14dedd6e6d33114461c67afa95e4118a","modified":1553530240353},{"_id":"public/hexo-generate.sh","hash":"ee0480aeef63366836b34805aef89d86d5058951","modified":1553530240369},{"_id":"public/robots.txt","hash":"aa82ce19cc9834576ca168c1a40250d5984a5dc6","modified":1553530240369},{"_id":"public/images/pasted-0.png","hash":"f08f211f231c447a8ad9aa9a1bdd8ca8ed90e22a","modified":1553530240369},{"_id":"public/images/pasted-14.png","hash":"fe0daaf91f26bd358d3ac460c210c4bc3f75c045","modified":1553530240369},{"_id":"public/images/pasted-16.png","hash":"d95e816456d0a1a9aa98416635f9d35e74b36e09","modified":1553530240369},{"_id":"public/images/pasted-4.png","hash":"faa95551effa7962646209f0b3247a42000f7612","modified":1553530240369},{"_id":"public/images/pasted-2.png","hash":"564b7de342d6927fa909e4d1f1ba8ba8d49d0a80","modified":1553530240369},{"_id":"public/images/pasted-8.png","hash":"6c3680632ef9de47936d59dff3c59afdd5283066","modified":1553530240369},{"_id":"public/images/pasted-7.png","hash":"d95e816456d0a1a9aa98416635f9d35e74b36e09","modified":1553530240370},{"_id":"public/download/image/2018年美团点评技术年货（合）.jpg","hash":"0abe4f3c5da18d102fc6f9eb8e194ea4c46f6efa","modified":1553530240370},{"_id":"public/download/image/EffectiveJava中文版（第2版）.jpg","hash":"defc1d2041bf88a15fe720c5c1ecf3a44181c4d5","modified":1553530240370},{"_id":"public/download/image/JAVA并发编程实战.jpg","hash":"ef5e2ea13ca91dd7e7fe77f233f66d128c94268a","modified":1553530240370},{"_id":"public/download/image/Java核心技术卷1第9版.jpg","hash":"89f5d55f7f8562d6853fdb66bbc0338fd7a97312","modified":1553530240370},{"_id":"public/download/image/Head+First设计模式（中文版）.jpg","hash":"c3386213443a32e0a9f7122616505bb5b3ac7941","modified":1553530240370},{"_id":"public/download/image/Redis实战.jpg","hash":"76ce1f801006b9acf2bfbd8f8b8c0e0b1c9ca9da","modified":1553530240370},{"_id":"public/download/image/深入理解Java虚拟机：JVM高级特性与最佳实践.jpg","hash":"729e81cadf4d0afd5609aeeb658783a0854f8088","modified":1553530240370},{"_id":"public/download/image/重构_改善既有代码的设计[高清版].jpg","hash":"57535e8d210f2b64ce449d37b787ab0dc2662686","modified":1553530240370},{"_id":"public/download/image/阿里巴巴Java开发手册.jpg","hash":"0b52093c8f8ebcb0ec0f82f3292796446b1beb1a","modified":1553530240370},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1553530240370},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1553530240370},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1553530240370},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1553530240371},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1553530240371},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1553530240371},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1553530240371},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1553530240371},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1553530240371},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1553530240371},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1553530240371},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1553530240371},{"_id":"public/images/favicon.ico","hash":"7a6daa6422b9f7b8a26ab9a5c0f91e1f454a2951","modified":1553530240371},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553530240371},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1553530240371},{"_id":"public/images/mypic2.jpg","hash":"5b75ab5bf7ee7e319e63b070b8abeb1cd1a9b634","modified":1553530240371},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553530240371},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1553530240371},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1553530240371},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1553530240372},{"_id":"public/images/wechat-qcode.jpg","hash":"c57219ecb4cab7c703a02bf399dcec607cd6d548","modified":1553530240372},{"_id":"public/images/wechat-qcode.png","hash":"f08f211f231c447a8ad9aa9a1bdd8ca8ed90e22a","modified":1553530240372},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1553530240372},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1553530240372},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1553530240372},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1553530240372},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1553530240372},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1553530240372},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1553530240372},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1553530240372},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1553530240372},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1553530240372},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1553530240372},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1553530240372},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1553530240372},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1553530240372},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1553530240372},{"_id":"public/posts/b3139f08/1.jpg","hash":"19e9b657ee0f8963dfd92039c8b6a36b70a29fa0","modified":1553530240372},{"_id":"public/posts/b3139f08/2.jpg","hash":"b59cb70213287fe225647f91378e7db13094725f","modified":1553530240372},{"_id":"public/posts/5bd388e3/1.png","hash":"6dd322a59db6f8abe80bc186c13c2c4e082c5bfe","modified":1553530240372},{"_id":"public/posts/5bd388e3/2.png","hash":"fdde86701b22619da50fe5828e0566b9182ca639","modified":1553530240373},{"_id":"public/posts/5bd388e3/3.png","hash":"2d9c5952ede291882f184932ad1b37722355fb73","modified":1553530240373},{"_id":"public/posts/5bd388e3/4.png","hash":"fc16b122f574044d9702df3632a729e0b6ce07ad","modified":1553530240373},{"_id":"public/posts/5bd388e3/5.png","hash":"8d51374c1e4a5f49b87f2aba3eca8ac2ea28ea69","modified":1553530240373},{"_id":"public/posts/5bd388e3/6.png","hash":"edb09583b2ffe2c9da687b797c5506e5e1d79d87","modified":1553530240373},{"_id":"public/posts/5bd388e3/7.png","hash":"70b0c785059af5906b13b1c552621745a0341b16","modified":1553530240373},{"_id":"public/posts/5bd388e3/8.png","hash":"12f8837e39b54fd235dd3f825bcbf7c0470f6e78","modified":1553530240373},{"_id":"public/posts/7d75af24/10.png","hash":"5c2cc24af2d6e8e82d71ae0221582d456bab5473","modified":1553530240373},{"_id":"public/posts/7d75af24/11.png","hash":"137f343fc21590dbfdbcdde1870d35ba1a1581ac","modified":1553530240373},{"_id":"public/posts/7d75af24/2.png","hash":"e9fe4b021ef0ea61c0a1235249fd00278206404a","modified":1553530240373},{"_id":"public/posts/7d75af24/5.png","hash":"08c52c9a9a83141bd6d0aa4ead31576fc0e2e422","modified":1553530240373},{"_id":"public/posts/7d75af24/4.png","hash":"45ad9cb25621904c742415db43bc79feb0f9f783","modified":1553530240373},{"_id":"public/posts/7d75af24/6.png","hash":"b448b9a73a7b7cba5b230f5180c0931f6ddff942","modified":1553530240373},{"_id":"public/posts/7d75af24/8.png","hash":"b3459303a8c1ea88b687e53e0f9d605ac2bfb349","modified":1553530240373},{"_id":"public/posts/7d75af24/9.png","hash":"244c42171b5f2123f759abcbc469d1f134b65c5c","modified":1553530240373},{"_id":"public/images/pasted-11.png","hash":"30a4c5fdcf0b52c95dafffc87fa3838e9ce71bac","modified":1553530240847},{"_id":"public/images/pasted-13.png","hash":"e9698af867b387f9c7b9cb0a6b6fe937334f0d07","modified":1553530240852},{"_id":"public/images/pasted-12.png","hash":"02b7d7ace1c3aa59d72417afe4041c7a98c143b1","modified":1553530240854},{"_id":"public/images/pasted-15.png","hash":"6099408722836c430208a0b8485e3980ca3ee36d","modified":1553530240854},{"_id":"public/images/pasted-3.png","hash":"322e25106128343387324eeaf9221b04bd3e1540","modified":1553530240854},{"_id":"public/images/pasted-9.png","hash":"fb7965b0468e3367b8d6550fd56522fe039aea00","modified":1553530240854},{"_id":"public/images/mypic.jpg","hash":"2b3b705fcabf67fb7e05ba39d509d66898bbeaee","modified":1553530240854},{"_id":"public/images/alipay.jpg","hash":"2f6aeb9b9f331eefb13c69ad769205cef9cbec81","modified":1553530240855},{"_id":"public/images/wechatpay.jpg","hash":"5a3cf2f356e2be712a174f587627013369849c3b","modified":1553530240855},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1553530240855},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1553530240855},{"_id":"public/posts/5bd388e3/9.png","hash":"173db1e787ce16c0af3d0b44b39b8f40ce9ad7e6","modified":1553530240855},{"_id":"public/posts/7d75af24/1.png","hash":"9fbe12f2dfe99ad7baf0c85e45668c36ffbd3679","modified":1553530240855},{"_id":"public/posts/7d75af24/3.png","hash":"f5c473db1e880666115f5c92ed12059f6080866f","modified":1553530240855},{"_id":"public/posts/7d75af24/7.png","hash":"b15cb3b766af5b8217d4cfe4fc5d53b23f7a0730","modified":1553530240855},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1553530240862},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1553530240862},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1553530240862},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1553530240862},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1553530240863},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1553530240863},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1553530240863},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1553530240863},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1553530240863},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1553530240863},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1553530240863},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1553530240863},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1553530240863},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1553530240863},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1553530240863},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1553530240863},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1553530240863},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1553530240863},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1553530240863},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1553530240863},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1553530240863},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1553530240863},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1553530240864},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1553530240864},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1553530240864},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1553530240864},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1553530240864},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1553530240864},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1553530240864},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1553530240864},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1553530240864},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1553530240864},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1553530240865},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1553530240865},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1553530240865},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1553530240865},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1553530240865},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1553530240865},{"_id":"public/404.html","hash":"b131af476632738a943170d5949063f8278ac5c1","modified":1553530240865},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1553530240865},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1553530240865},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1553530240865},{"_id":"public/css/main.css","hash":"de83dd6584c55dac1d980e8228fedf2a516f0c75","modified":1553530240865},{"_id":"public/images/pasted-10.png","hash":"03e430c7cbb90201c67c84150d5914cca97d670a","modified":1553530240865},{"_id":"public/images/pasted-6.png","hash":"b976b0db4d1ae34c9d37c7a21901f1e9813a3ebf","modified":1553530240865},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1553530240865},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1553530240865},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1553530240866},{"_id":"public/posts/7a3ae3d8/双亲委托模型图.png","hash":"1baf89a0b6c654073de0d52ad4dbfc8375181305","modified":1553530240866},{"_id":"public/posts/7a3ae3d8/双亲委派模型数据流程图.png","hash":"09e9f2f20a693387b4fd1ec244abc15157473b08","modified":1553530240866},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1553530240877},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1553530240877},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1553530240877},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1553530240877},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1553530240877},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1553530240877},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1553530240877},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1553530240877},{"_id":"public/images/pasted-5.png","hash":"a2a8eebdc12635cb79612020db73bd555afdd61d","modified":1553530240877},{"_id":"public/posts/7a3ae3d8/4个验证过程.jpg","hash":"9e769af5d002b745d632b9d234bddffef6f4b68f","modified":1553530240878},{"_id":"public/posts/7a3ae3d8/类的生命周期.png","hash":"3c98eb1d1371fd2c65b8addb33fd2db96987a323","modified":1553530240878},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1553530240891},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1553530240891},{"_id":"public/posts/7a3ae3d8/JVM体系结构.png","hash":"6c8cfa905b63712410e00ee063b7d522b99f43d9","modified":1553530240891},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1553530240906},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1553530240906},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1553530240922},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1553530240922},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1553530240924},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1553530240924},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1553530240924},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1553530240924},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1553530240924},{"_id":"public/posts/7a3ae3d8/7类符号引用.png","hash":"cb3f0958fafececb10d8ae151d01e36557905774","modified":1553530240924},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1553530240938},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1553530240939},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1553530240939},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1553530240939},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1553530240957},{"_id":"public/posts/7eb7d5c7/字节码文件实战分析.png","hash":"f241ec85df700a0eacdeac8d3252c0fe359d6dd2","modified":1553530240964},{"_id":"public/posts/7a3ae3d8/双亲委派模型核心代码.png","hash":"752d84464972db63383dd58c477dbc6e12cd83ec","modified":1553530240973},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1553530240980},{"_id":"public/download/book/阿里巴巴Java开发手册.pdf","hash":"d9a6da7ac5bff8f442131f61cf86fb96ab24d671","modified":1553530240980},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1553530240986},{"_id":"public/images/myhead.jpg","hash":"9707dfd0809c36aea22dcdc0a64a436918888bb0","modified":1553530240986},{"_id":"public/posts/7eb7d5c7/class.png","hash":"be9e629a3f6333d185ed5dc0de0f753983849dc2","modified":1553530241003},{"_id":"public/posts/7eb7d5c7/javap.png","hash":"fe2fa980ffa62f081fe64ca782d506bff51cf2ef","modified":1553530241009},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1553530241035},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1553530241132},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1553530241162},{"_id":"public/download/book/JAVA并发编程实战.pdf","hash":"a91ed7fa47581b0d9ed1ff5f3b3023e14d5b4e03","modified":1553530241412},{"_id":"public/download/book/Java并发编程的艺术.pdf","hash":"fe7f5476bd7cee54e5dde3e2324325856b75addf","modified":1553530241561},{"_id":"public/download/book/程序员的思维修炼—开发认知潜能的九堂课.pdf","hash":"3067824a4118a091780fdb203078a3a62c1f1c13","modified":1553530241561},{"_id":"public/download/book/redis设计与实现（第二版）.pdf","hash":"281220a5ddd03d2169139cef8b0f49dd084db0be","modified":1553530241628},{"_id":"public/download/book/程序员必读之软件架构.pdf","hash":"dfd009805ab4cce95e2ffa368775d213a22a96ff","modified":1553530241640},{"_id":"public/download/book/深入理解Linux内核.pdf","hash":"d52971d93078b3bf3329656fdb72256c271178d3","modified":1553530241675},{"_id":"public/download/book/自己动手写操作系统完全版.pdf","hash":"d411ec0f1d10d7e8f9d8f00ac306a96aa8071c1d","modified":1553530241906},{"_id":"public/download/book/设计模式：可复用面向对象软件的基础.pdf","hash":"9ff15da9d15f5f6cfa80284e3e6b5bfc451286e1","modified":1553530242077},{"_id":"public/download/book/重构_改善既有代码的设计.pdf","hash":"5e32c96db94fe4a2880df03e7a4cb548763b4cad","modified":1553530242278},{"_id":"public/download/book/Head+First设计模式（中文版）.pdf","hash":"fb37c1fbc204c0f27178b77df8bd28dcba6f2051","modified":1553530242549},{"_id":"public/download/book/Linux内核设计与实现_第三版.pdf","hash":"efa21e021ac25eefdfcb12035b8b5e886644b40b","modified":1553530242591},{"_id":"public/download/book/Java多线程编程核心技术.pdf","hash":"ef0c21437400d543cac89c8b5e5210fbf8522eaf","modified":1553530242785},{"_id":"public/download/book/深入理解Java虚拟机：JVM高级特性与最佳实践.pdf","hash":"80796b76366b418d62097926b037c9825713a4ce","modified":1553530242849},{"_id":"public/download/book/EffectiveJava中文版（第2版）.pdf","hash":"9a166f4c373d1a3f3c96675860f8248adc13fdfc","modified":1553530243184},{"_id":"public/download/book/Redis实战.pdf","hash":"1849512d73d730e1d45e58330258df076d43d4fe","modified":1553530243309},{"_id":"public/download/book/追踪Linux-TCP-IP代码运行：基于2.6内核.pdf","hash":"233e2885ee2d58732a9d55886a6ab266a018a1bb","modified":1553530243445},{"_id":"public/download/book/Java性能权威指南.pdf","hash":"64aea6b5606a62e9de31f1ae90a3e50de0acfc82","modified":1553530243530},{"_id":"public/download/book/大话设计模式.pdf","hash":"2c353d6262f345e9e9ac681d470a2cbb13e1bcc5","modified":1553530243658},{"_id":"public/download/book/2018年美团点评技术年货（合）.pdf","hash":"3eb58f772cc3e350391366d2858d442503d1f71a","modified":1553530243765},{"_id":"public/download/book/Java核心技术卷1第9版.pdf","hash":"70b3c284f45722ac56b3afef0476152ebe90be96","modified":1553530243903},{"_id":"public/download/book/深入浅出MyBatis技术原理与实战.pdf","hash":"7d4a63bb483380a2bbda98b688b015272996f8b4","modified":1553530243989},{"_id":"public/download/book/HTTP权威指南（中文版）.pdf","hash":"1d7d10d1c9e931f522a41e9a08b024e710c47ff3","modified":1553530244129},{"_id":"public/download/book/Python学习手册（第4版）.pdf","hash":"6689834b7b38b08ab2a84c7c0586c30190a9741c","modified":1553530244256}],"Category":[{"name":"原创","_id":"cjtojsgsv0005kaq4lbnk2plg"},{"name":"Python","parent":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgte000mkaq4m1t1ntpf"},{"name":"SDN","parent":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgto000ykaq4qq260eig"},{"name":"系统","parent":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgty001zkaq4wtxsk6dh"},{"name":"JVM","parent":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgu0002akaq448i00t3m"},{"name":"网络","parent":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgu1002fkaq4s3uf5oia"},{"name":"Git","parent":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgu2002jkaq4fd7e71dt"}],"Data":[],"Page":[{"_content":"google-site-verification: googlec83ece8c0cfa58e5.html","source":"googlec83ece8c0cfa58e5.html","raw":"google-site-verification: googlec83ece8c0cfa58e5.html","date":"2019-03-02T09:04:31.515Z","updated":"2019-03-02T06:36:43.658Z","path":"googlec83ece8c0cfa58e5.html","title":"","comments":1,"layout":"page","_id":"cjtojsgqp0000kaq4x3hho45y","content":"google-site-verification: googlec83ece8c0cfa58e5.html","site":{"data":{}},"excerpt":"","more":"google-site-verification: googlec83ece8c0cfa58e5.html"},{"title":"关于作者","comments":1,"date":"2019-02-23T15:49:25.000Z","_content":"<big>**作者介绍**</big>  \n本人目前就职于美团，是一名后端开发程序猿，每日的工作是搬砖打酱油   \n<big>**联系方式**</big>  \n<center>欢迎扫描二维码关注我</center>\n![upload successful](/images/pasted-0.png)","source":"about/index.md","raw":"title: 关于作者\ncomments: true\ndate: 2019-02-23 23:49:25\n---\n<big>**作者介绍**</big>  \n本人目前就职于美团，是一名后端开发程序猿，每日的工作是搬砖打酱油   \n<big>**联系方式**</big>  \n<center>欢迎扫描二维码关注我</center>\n![upload successful](/images/pasted-0.png)","updated":"2019-03-24T16:19:24.349Z","path":"about/index.html","layout":"page","_id":"cjtojsgsr0002kaq4rpy1m5dy","content":"<p><big><strong>作者介绍</strong></big><br>本人目前就职于美团，是一名后端开发程序猿，每日的工作是搬砖打酱油   </p>\n<p><big><strong>联系方式</strong></big>  </p>\n<p><center>欢迎扫描二维码关注我</center><br><img src=\"/images/pasted-0.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><big><strong>作者介绍</strong></big><br>本人目前就职于美团，是一名后端开发程序猿，每日的工作是搬砖打酱油   </p>\n<p><big><strong>联系方式</strong></big>  </p>\n<p><center>欢迎扫描二维码关注我</center><br><img src=\"/images/pasted-0.png\" alt=\"upload successful\"></p>\n"},{"title":"分类","type":"categories","comments":0,"date":"2019-02-23T15:49:25.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: \"categories\"\ncomments: false\ndate: 2019-02-23 23:49:25\n---\n","updated":"2019-03-02T06:36:44.720Z","path":"categories/index.html","layout":"page","_id":"cjtojsgsu0004kaq4tkp2w8j1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"书籍文档下载","comments":1,"date":"2019-02-25T14:29:49.000Z","_content":"<!-- <table>\n    <tr>\n        <td >\n          <center>\n            <img src=\"/download/image/2018年美团点评技术年货（合）.jpg\" width = \"200\" height = \"400\">[点击下载](/download/book/2018年美团点评技术年货（合）.pdf)\n          </center>\n        </td>\n        <td >\n          <center>\n            <img src=\"/download/image/EffectiveJava中文版（第2版）.jpg\" width = \"200\" height = \"400\">[点击下载](/download/book/EffectiveJava中文版（第2版）.pdf)\n          </center>\n        </td>\n        <td >\n          <center>\n            <img src=\"/download/image/JAVA并发编程实战.jpg\" width = \"200\" height = \"400\">[点击下载](/download/book/JAVA并发编程实战.pdf)\n          </center>\n        </td>\n        <td >\n          <center>\n            <img src=\"/download/image/Java核心技术卷1第9版.jpg\" width = \"200\" height = \"400\">[点击下载](/download/book/Java核心技术卷1第9版.pdf)\n          </center>\n        </td>\n    </tr>\n</table> -->\n\n<big>***技术书***</big>\n\n<img src=\"/download/image/2018年美团点评技术年货（合）.jpg\">[点击下载](/download/book/2018年美团点评技术年货（合）.pdf)|<img src=\"/download/image/EffectiveJava中文版（第2版）.jpg\">[点击下载](/download/book/EffectiveJava中文版（第2版）.pdf)|<img src=\"/download/image/JAVA并发编程实战.jpg\">[点击下载](/download/book/JAVA并发编程实战.pdf)|<img src=\"/download/image/Java核心技术卷1第9版.jpg\">[点击下载](/download/book/Java核心技术卷1第9版.pdf)\n:-: | :-: | :-: | :-:\n<img src=\"/images/pasted-2.png\"/>[点击下载](/download/book/HTTP权威指南（中文版）.pdf)|<img src=\"/download/image/Redis实战.jpg\"/>[点击下载](/download/book/Redis实战.pdf)|<img src=\"/download/image/深入理解Java虚拟机：JVM高级特性与最佳实践.jpg\"/>[点击下载](/download/book/深入理解Java虚拟机：JVM高级特性与最佳实践.pdf)|<img src=\"/download/image/阿里巴巴Java开发手册.jpg\">[点击下载](/download/book/阿里巴巴Java开发手册.pdf)\n<img src=\"/download/image/重构_改善既有代码的设计[高清版].jpg\">[点击下载](/download/book/重构_改善既有代码的设计.pdf)|<img src=\"/download/image/Head+First设计模式（中文版）.jpg\">[点击下载](/download/book/Head+First设计模式（中文版）.pdf)|<img src=\"/images/pasted-4.png\">[点击下载](/download/book/Java多线程编程核心技术.pdf)|<img src=\"/images/pasted-3.png\">[点击下载](/download/book/Java性能权威指南.pdf)\n<img src=\"/images/pasted-5.png\">[点击下载](/download/book/大话设计模式.pdf)|<img src=\"/images/pasted-6.png\">[点击下载](/download/book/设计模式：可复用面向对象软件的基础.pdf)|<img src=\"/images/pasted-7.png\">[点击下载](/download/book/Java并发编程的艺术.pdf)|<img src=\"/images/pasted-8.png\">[点击下载](/download/book/redis设计与实现（第二版）.pdf)\n<img src=\"/images/pasted-9.png\">[点击下载](/download/book/深入浅出MyBatis技术原理与实战.pdf)|<img src=\"/images/pasted-10.png\">[点击下载](/download/book/程序员必读之软件架构.pdf)|<img src=\"/images/pasted-11.png\">[点击下载](/download/book/程序员的思维修炼—开发认知潜能的九堂课.pdf)|<img src=\"/images/pasted-12.png\">[点击下载](/download/book/追踪Linux-TCP-IP代码运行：基于2.6内核.pdf)\n<img src=\"/images/pasted-13.png\">[点击下载](/download/book/深入理解Linux内核.pdf)|<img src=\"/images/pasted-14.png\">[点击下载](/download/book/自己动手写操作系统完全版.pdf)|<img src=\"/images/pasted-15.png\">[点击下载](/download/book/Linux内核设计与实现_第三版.pdf)\n\n<big>***非技术书***</big>\n","source":"download/index.md","raw":"title: 书籍文档下载\ncomments: true\ndate: 2019-02-25 22:29:49\n---\n<!-- <table>\n    <tr>\n        <td >\n          <center>\n            <img src=\"/download/image/2018年美团点评技术年货（合）.jpg\" width = \"200\" height = \"400\">[点击下载](/download/book/2018年美团点评技术年货（合）.pdf)\n          </center>\n        </td>\n        <td >\n          <center>\n            <img src=\"/download/image/EffectiveJava中文版（第2版）.jpg\" width = \"200\" height = \"400\">[点击下载](/download/book/EffectiveJava中文版（第2版）.pdf)\n          </center>\n        </td>\n        <td >\n          <center>\n            <img src=\"/download/image/JAVA并发编程实战.jpg\" width = \"200\" height = \"400\">[点击下载](/download/book/JAVA并发编程实战.pdf)\n          </center>\n        </td>\n        <td >\n          <center>\n            <img src=\"/download/image/Java核心技术卷1第9版.jpg\" width = \"200\" height = \"400\">[点击下载](/download/book/Java核心技术卷1第9版.pdf)\n          </center>\n        </td>\n    </tr>\n</table> -->\n\n<big>***技术书***</big>\n\n<img src=\"/download/image/2018年美团点评技术年货（合）.jpg\">[点击下载](/download/book/2018年美团点评技术年货（合）.pdf)|<img src=\"/download/image/EffectiveJava中文版（第2版）.jpg\">[点击下载](/download/book/EffectiveJava中文版（第2版）.pdf)|<img src=\"/download/image/JAVA并发编程实战.jpg\">[点击下载](/download/book/JAVA并发编程实战.pdf)|<img src=\"/download/image/Java核心技术卷1第9版.jpg\">[点击下载](/download/book/Java核心技术卷1第9版.pdf)\n:-: | :-: | :-: | :-:\n<img src=\"/images/pasted-2.png\"/>[点击下载](/download/book/HTTP权威指南（中文版）.pdf)|<img src=\"/download/image/Redis实战.jpg\"/>[点击下载](/download/book/Redis实战.pdf)|<img src=\"/download/image/深入理解Java虚拟机：JVM高级特性与最佳实践.jpg\"/>[点击下载](/download/book/深入理解Java虚拟机：JVM高级特性与最佳实践.pdf)|<img src=\"/download/image/阿里巴巴Java开发手册.jpg\">[点击下载](/download/book/阿里巴巴Java开发手册.pdf)\n<img src=\"/download/image/重构_改善既有代码的设计[高清版].jpg\">[点击下载](/download/book/重构_改善既有代码的设计.pdf)|<img src=\"/download/image/Head+First设计模式（中文版）.jpg\">[点击下载](/download/book/Head+First设计模式（中文版）.pdf)|<img src=\"/images/pasted-4.png\">[点击下载](/download/book/Java多线程编程核心技术.pdf)|<img src=\"/images/pasted-3.png\">[点击下载](/download/book/Java性能权威指南.pdf)\n<img src=\"/images/pasted-5.png\">[点击下载](/download/book/大话设计模式.pdf)|<img src=\"/images/pasted-6.png\">[点击下载](/download/book/设计模式：可复用面向对象软件的基础.pdf)|<img src=\"/images/pasted-7.png\">[点击下载](/download/book/Java并发编程的艺术.pdf)|<img src=\"/images/pasted-8.png\">[点击下载](/download/book/redis设计与实现（第二版）.pdf)\n<img src=\"/images/pasted-9.png\">[点击下载](/download/book/深入浅出MyBatis技术原理与实战.pdf)|<img src=\"/images/pasted-10.png\">[点击下载](/download/book/程序员必读之软件架构.pdf)|<img src=\"/images/pasted-11.png\">[点击下载](/download/book/程序员的思维修炼—开发认知潜能的九堂课.pdf)|<img src=\"/images/pasted-12.png\">[点击下载](/download/book/追踪Linux-TCP-IP代码运行：基于2.6内核.pdf)\n<img src=\"/images/pasted-13.png\">[点击下载](/download/book/深入理解Linux内核.pdf)|<img src=\"/images/pasted-14.png\">[点击下载](/download/book/自己动手写操作系统完全版.pdf)|<img src=\"/images/pasted-15.png\">[点击下载](/download/book/Linux内核设计与实现_第三版.pdf)\n\n<big>***非技术书***</big>\n","updated":"2019-03-24T16:22:47.479Z","path":"download/index.html","layout":"page","_id":"cjtojsgsz0008kaq4rs9l2ygm","content":"<!-- <table>\n    <tr>\n        <td >\n          <center>\n            <img src=\"/download/image/2018年美团点评技术年货（合）.jpg\" width = \"200\" height = \"400\">[点击下载](/download/book/2018年美团点评技术年货（合）.pdf)\n          </center>\n        </td>\n        <td >\n          <center>\n            <img src=\"/download/image/EffectiveJava中文版（第2版）.jpg\" width = \"200\" height = \"400\">[点击下载](/download/book/EffectiveJava中文版（第2版）.pdf)\n          </center>\n        </td>\n        <td >\n          <center>\n            <img src=\"/download/image/JAVA并发编程实战.jpg\" width = \"200\" height = \"400\">[点击下载](/download/book/JAVA并发编程实战.pdf)\n          </center>\n        </td>\n        <td >\n          <center>\n            <img src=\"/download/image/Java核心技术卷1第9版.jpg\" width = \"200\" height = \"400\">[点击下载](/download/book/Java核心技术卷1第9版.pdf)\n          </center>\n        </td>\n    </tr>\n</table> -->\n<big><strong><em>技术书</em></strong></big>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><img src=\"/download/image/2018年美团点评技术年货（合）.jpg\"><a href=\"/download/book/2018年美团点评技术年货（合）.pdf\">点击下载</a></th>\n<th style=\"text-align:center\"><img src=\"/download/image/EffectiveJava中文版（第2版）.jpg\"><a href=\"/download/book/EffectiveJava中文版（第2版）.pdf\">点击下载</a></th>\n<th style=\"text-align:center\"><img src=\"/download/image/JAVA并发编程实战.jpg\"><a href=\"/download/book/JAVA并发编程实战.pdf\">点击下载</a></th>\n<th style=\"text-align:center\"><img src=\"/download/image/Java核心技术卷1第9版.jpg\"><a href=\"/download/book/Java核心技术卷1第9版.pdf\">点击下载</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"/images/pasted-2.png\"><a href=\"/download/book/HTTP权威指南（中文版）.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/download/image/Redis实战.jpg\"><a href=\"/download/book/Redis实战.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/download/image/深入理解Java虚拟机：JVM高级特性与最佳实践.jpg\"><a href=\"/download/book/深入理解Java虚拟机：JVM高级特性与最佳实践.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/download/image/阿里巴巴Java开发手册.jpg\"><a href=\"/download/book/阿里巴巴Java开发手册.pdf\">点击下载</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><img src=\"/download/image/重构_改善既有代码的设计[高清版].jpg\"><a href=\"/download/book/重构_改善既有代码的设计.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/download/image/Head+First设计模式（中文版）.jpg\"><a href=\"/download/book/Head+First设计模式（中文版）.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-4.png\"><a href=\"/download/book/Java多线程编程核心技术.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-3.png\"><a href=\"/download/book/Java性能权威指南.pdf\">点击下载</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><img src=\"/images/pasted-5.png\"><a href=\"/download/book/大话设计模式.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-6.png\"><a href=\"/download/book/设计模式：可复用面向对象软件的基础.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-7.png\"><a href=\"/download/book/Java并发编程的艺术.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-8.png\"><a href=\"/download/book/redis设计与实现（第二版）.pdf\">点击下载</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><img src=\"/images/pasted-9.png\"><a href=\"/download/book/深入浅出MyBatis技术原理与实战.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-10.png\"><a href=\"/download/book/程序员必读之软件架构.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-11.png\"><a href=\"/download/book/程序员的思维修炼—开发认知潜能的九堂课.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-12.png\"><a href=\"/download/book/追踪Linux-TCP-IP代码运行：基于2.6内核.pdf\">点击下载</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><img src=\"/images/pasted-13.png\"><a href=\"/download/book/深入理解Linux内核.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-14.png\"><a href=\"/download/book/自己动手写操作系统完全版.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-15.png\"><a href=\"/download/book/Linux内核设计与实现_第三版.pdf\">点击下载</a></td>\n</tr>\n</tbody>\n</table>\n<big><strong><em>非技术书</em></strong></big>\n","site":{"data":{}},"excerpt":"","more":"<!-- <table>\n    <tr>\n        <td >\n          <center>\n            <img src=\"/download/image/2018年美团点评技术年货（合）.jpg\" width = \"200\" height = \"400\">[点击下载](/download/book/2018年美团点评技术年货（合）.pdf)\n          </center>\n        </td>\n        <td >\n          <center>\n            <img src=\"/download/image/EffectiveJava中文版（第2版）.jpg\" width = \"200\" height = \"400\">[点击下载](/download/book/EffectiveJava中文版（第2版）.pdf)\n          </center>\n        </td>\n        <td >\n          <center>\n            <img src=\"/download/image/JAVA并发编程实战.jpg\" width = \"200\" height = \"400\">[点击下载](/download/book/JAVA并发编程实战.pdf)\n          </center>\n        </td>\n        <td >\n          <center>\n            <img src=\"/download/image/Java核心技术卷1第9版.jpg\" width = \"200\" height = \"400\">[点击下载](/download/book/Java核心技术卷1第9版.pdf)\n          </center>\n        </td>\n    </tr>\n</table> -->\n<big><strong><em>技术书</em></strong></big>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><img src=\"/download/image/2018年美团点评技术年货（合）.jpg\"><a href=\"/download/book/2018年美团点评技术年货（合）.pdf\">点击下载</a></th>\n<th style=\"text-align:center\"><img src=\"/download/image/EffectiveJava中文版（第2版）.jpg\"><a href=\"/download/book/EffectiveJava中文版（第2版）.pdf\">点击下载</a></th>\n<th style=\"text-align:center\"><img src=\"/download/image/JAVA并发编程实战.jpg\"><a href=\"/download/book/JAVA并发编程实战.pdf\">点击下载</a></th>\n<th style=\"text-align:center\"><img src=\"/download/image/Java核心技术卷1第9版.jpg\"><a href=\"/download/book/Java核心技术卷1第9版.pdf\">点击下载</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"/images/pasted-2.png\"><a href=\"/download/book/HTTP权威指南（中文版）.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/download/image/Redis实战.jpg\"><a href=\"/download/book/Redis实战.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/download/image/深入理解Java虚拟机：JVM高级特性与最佳实践.jpg\"><a href=\"/download/book/深入理解Java虚拟机：JVM高级特性与最佳实践.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/download/image/阿里巴巴Java开发手册.jpg\"><a href=\"/download/book/阿里巴巴Java开发手册.pdf\">点击下载</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><img src=\"/download/image/重构_改善既有代码的设计[高清版].jpg\"><a href=\"/download/book/重构_改善既有代码的设计.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/download/image/Head+First设计模式（中文版）.jpg\"><a href=\"/download/book/Head+First设计模式（中文版）.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-4.png\"><a href=\"/download/book/Java多线程编程核心技术.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-3.png\"><a href=\"/download/book/Java性能权威指南.pdf\">点击下载</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><img src=\"/images/pasted-5.png\"><a href=\"/download/book/大话设计模式.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-6.png\"><a href=\"/download/book/设计模式：可复用面向对象软件的基础.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-7.png\"><a href=\"/download/book/Java并发编程的艺术.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-8.png\"><a href=\"/download/book/redis设计与实现（第二版）.pdf\">点击下载</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><img src=\"/images/pasted-9.png\"><a href=\"/download/book/深入浅出MyBatis技术原理与实战.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-10.png\"><a href=\"/download/book/程序员必读之软件架构.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-11.png\"><a href=\"/download/book/程序员的思维修炼—开发认知潜能的九堂课.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-12.png\"><a href=\"/download/book/追踪Linux-TCP-IP代码运行：基于2.6内核.pdf\">点击下载</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><img src=\"/images/pasted-13.png\"><a href=\"/download/book/深入理解Linux内核.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-14.png\"><a href=\"/download/book/自己动手写操作系统完全版.pdf\">点击下载</a></td>\n<td style=\"text-align:center\"><img src=\"/images/pasted-15.png\"><a href=\"/download/book/Linux内核设计与实现_第三版.pdf\">点击下载</a></td>\n</tr>\n</tbody>\n</table>\n<big><strong><em>非技术书</em></strong></big>\n"},{"title":"好东西","comments":1,"date":"2019-02-27T14:50:09.000Z","_content":"<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->\n<blockquote class=\"blockquote-center\">你们如果有好东西，也可以在下面留言告诉我，一起来丰富这个页面</blockquote>\n\n<big>**实用工具**</big>\n1. [json格式化工具](http://www.kjson.com/)\n2. [时间戳转换](http://tools.sharejs.com/unixtime.html)\n3. [在线文本差异对比](http://www.jq22.com/textDifference)\n4. [在线Cron表达式生成器](http://cron.qqe2.com/)\n5. [站长工具](http://tool.chinaz.com/)\n6. [JVM参数设置：JVM Settings](http://jvmmemory.com/)\n7. [正则表达式在线测试](http://tool.chinaz.com/tools/regexgenerate)\n8. [二维码生成器](https://cli.im/)\n9. [经纬度坐标拾取器](http://api.map.baidu.com/lbsapi/getpoint/index.html)\n10. [Url编码解码](https://meyerweb.com/eric/tools/dencoder/)\n11. [代码在线运行](https://tool.lu/coderunner/)\n12. [在线画各种图](http://haha98k.com/)\n\n<big>**资源网站**</big>\n- **无版权高清图片网站**\n    1. [Unsplash](https://unsplash.com/)\n    2. [Pexel](https://www.pexels.com/)\n    3. [Stocksnap.io](https://stocksnap.io/)\n    4. [Gratisography](https://gratisography.com/)\n    5. [Pixabay](https://pixabay.com/)\n    6. [图标:Flaticon](https://www.flaticon.com/)\n    7. [图标:Easyicon](https://www.easyicon.net/)\n    8. [SSYER](https://www.ssyer.com/home)\n    9. [泼辣有图](http://www.polayoutu.com/collections)\n- **书籍下载网站**\n1. [英文书籍和文章：b-ok.org](https://b-ok.org/)\n2. [亚马逊免费kindle电子书](https://www.amazon.cn/b?ie=UTF8&node=116175071)\n3. [书伴](https://bookfere.com/)\n4. [缤闹Kindle论坛](http://www.binnao.com/)\n5. [Kindleshare电子书搜索引擎](https://sk.kindleshare.cn/)\n- **电影下载网站**\n1. [蓝光电影网](https://www.1080.cn/)\n2. [电影天堂](https://www.dytt8.net/)\n3. [迅雷仓](https://www.xunleicang.com/)\n- **优质软件下载网站**\n1. [msdn我告诉你](https://msdn.itellyou.cn/)\n<center>持续更新。。。<center>","source":"favorite/index.md","raw":"title: 好东西\ncomments: true\ndate: 2019-02-27 22:50:09\n---\n<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->\n<blockquote class=\"blockquote-center\">你们如果有好东西，也可以在下面留言告诉我，一起来丰富这个页面</blockquote>\n\n<big>**实用工具**</big>\n1. [json格式化工具](http://www.kjson.com/)\n2. [时间戳转换](http://tools.sharejs.com/unixtime.html)\n3. [在线文本差异对比](http://www.jq22.com/textDifference)\n4. [在线Cron表达式生成器](http://cron.qqe2.com/)\n5. [站长工具](http://tool.chinaz.com/)\n6. [JVM参数设置：JVM Settings](http://jvmmemory.com/)\n7. [正则表达式在线测试](http://tool.chinaz.com/tools/regexgenerate)\n8. [二维码生成器](https://cli.im/)\n9. [经纬度坐标拾取器](http://api.map.baidu.com/lbsapi/getpoint/index.html)\n10. [Url编码解码](https://meyerweb.com/eric/tools/dencoder/)\n11. [代码在线运行](https://tool.lu/coderunner/)\n12. [在线画各种图](http://haha98k.com/)\n\n<big>**资源网站**</big>\n- **无版权高清图片网站**\n    1. [Unsplash](https://unsplash.com/)\n    2. [Pexel](https://www.pexels.com/)\n    3. [Stocksnap.io](https://stocksnap.io/)\n    4. [Gratisography](https://gratisography.com/)\n    5. [Pixabay](https://pixabay.com/)\n    6. [图标:Flaticon](https://www.flaticon.com/)\n    7. [图标:Easyicon](https://www.easyicon.net/)\n    8. [SSYER](https://www.ssyer.com/home)\n    9. [泼辣有图](http://www.polayoutu.com/collections)\n- **书籍下载网站**\n1. [英文书籍和文章：b-ok.org](https://b-ok.org/)\n2. [亚马逊免费kindle电子书](https://www.amazon.cn/b?ie=UTF8&node=116175071)\n3. [书伴](https://bookfere.com/)\n4. [缤闹Kindle论坛](http://www.binnao.com/)\n5. [Kindleshare电子书搜索引擎](https://sk.kindleshare.cn/)\n- **电影下载网站**\n1. [蓝光电影网](https://www.1080.cn/)\n2. [电影天堂](https://www.dytt8.net/)\n3. [迅雷仓](https://www.xunleicang.com/)\n- **优质软件下载网站**\n1. [msdn我告诉你](https://msdn.itellyou.cn/)\n<center>持续更新。。。<center>","updated":"2019-03-21T14:57:09.513Z","path":"favorite/index.html","layout":"page","_id":"cjtojsgt2000akaq47rh5ecok","content":"<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->\n<blockquote class=\"blockquote-center\">你们如果有好东西，也可以在下面留言告诉我，一起来丰富这个页面</blockquote>\n\n<p><big><strong>实用工具</strong></big></p>\n<ol>\n<li><a href=\"http://www.kjson.com/\" target=\"_blank\" rel=\"noopener\">json格式化工具</a></li>\n<li><a href=\"http://tools.sharejs.com/unixtime.html\" target=\"_blank\" rel=\"noopener\">时间戳转换</a></li>\n<li><a href=\"http://www.jq22.com/textDifference\" target=\"_blank\" rel=\"noopener\">在线文本差异对比</a></li>\n<li><a href=\"http://cron.qqe2.com/\" target=\"_blank\" rel=\"noopener\">在线Cron表达式生成器</a></li>\n<li><a href=\"http://tool.chinaz.com/\" target=\"_blank\" rel=\"noopener\">站长工具</a></li>\n<li><a href=\"http://jvmmemory.com/\" target=\"_blank\" rel=\"noopener\">JVM参数设置：JVM Settings</a></li>\n<li><a href=\"http://tool.chinaz.com/tools/regexgenerate\" target=\"_blank\" rel=\"noopener\">正则表达式在线测试</a></li>\n<li><a href=\"https://cli.im/\" target=\"_blank\" rel=\"noopener\">二维码生成器</a></li>\n<li><a href=\"http://api.map.baidu.com/lbsapi/getpoint/index.html\" target=\"_blank\" rel=\"noopener\">经纬度坐标拾取器</a></li>\n<li><a href=\"https://meyerweb.com/eric/tools/dencoder/\" target=\"_blank\" rel=\"noopener\">Url编码解码</a></li>\n<li><a href=\"https://tool.lu/coderunner/\" target=\"_blank\" rel=\"noopener\">代码在线运行</a></li>\n<li><a href=\"http://haha98k.com/\" target=\"_blank\" rel=\"noopener\">在线画各种图</a></li>\n</ol>\n<p><big><strong>资源网站</strong></big></p>\n<ul>\n<li><strong>无版权高清图片网站</strong><ol>\n<li><a href=\"https://unsplash.com/\" target=\"_blank\" rel=\"noopener\">Unsplash</a></li>\n<li><a href=\"https://www.pexels.com/\" target=\"_blank\" rel=\"noopener\">Pexel</a></li>\n<li><a href=\"https://stocksnap.io/\" target=\"_blank\" rel=\"noopener\">Stocksnap.io</a></li>\n<li><a href=\"https://gratisography.com/\" target=\"_blank\" rel=\"noopener\">Gratisography</a></li>\n<li><a href=\"https://pixabay.com/\" target=\"_blank\" rel=\"noopener\">Pixabay</a></li>\n<li><a href=\"https://www.flaticon.com/\" target=\"_blank\" rel=\"noopener\">图标:Flaticon</a></li>\n<li><a href=\"https://www.easyicon.net/\" target=\"_blank\" rel=\"noopener\">图标:Easyicon</a></li>\n<li><a href=\"https://www.ssyer.com/home\" target=\"_blank\" rel=\"noopener\">SSYER</a></li>\n<li><a href=\"http://www.polayoutu.com/collections\" target=\"_blank\" rel=\"noopener\">泼辣有图</a></li>\n</ol>\n</li>\n<li><strong>书籍下载网站</strong></li>\n</ul>\n<ol>\n<li><a href=\"https://b-ok.org/\" target=\"_blank\" rel=\"noopener\">英文书籍和文章：b-ok.org</a></li>\n<li><a href=\"https://www.amazon.cn/b?ie=UTF8&amp;node=116175071\" target=\"_blank\" rel=\"noopener\">亚马逊免费kindle电子书</a></li>\n<li><a href=\"https://bookfere.com/\" target=\"_blank\" rel=\"noopener\">书伴</a></li>\n<li><a href=\"http://www.binnao.com/\" target=\"_blank\" rel=\"noopener\">缤闹Kindle论坛</a></li>\n<li><a href=\"https://sk.kindleshare.cn/\" target=\"_blank\" rel=\"noopener\">Kindleshare电子书搜索引擎</a></li>\n</ol>\n<ul>\n<li><strong>电影下载网站</strong></li>\n</ul>\n<ol>\n<li><a href=\"https://www.1080.cn/\" target=\"_blank\" rel=\"noopener\">蓝光电影网</a></li>\n<li><a href=\"https://www.dytt8.net/\" target=\"_blank\" rel=\"noopener\">电影天堂</a></li>\n<li><a href=\"https://www.xunleicang.com/\" target=\"_blank\" rel=\"noopener\">迅雷仓</a></li>\n</ol>\n<ul>\n<li><strong>优质软件下载网站</strong></li>\n</ul>\n<ol>\n<li><a href=\"https://msdn.itellyou.cn/\" target=\"_blank\" rel=\"noopener\">msdn我告诉你</a><br><center>持续更新。。。<center></center></center></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->\n<blockquote class=\"blockquote-center\">你们如果有好东西，也可以在下面留言告诉我，一起来丰富这个页面</blockquote>\n\n<p><big><strong>实用工具</strong></big></p>\n<ol>\n<li><a href=\"http://www.kjson.com/\" target=\"_blank\" rel=\"noopener\">json格式化工具</a></li>\n<li><a href=\"http://tools.sharejs.com/unixtime.html\" target=\"_blank\" rel=\"noopener\">时间戳转换</a></li>\n<li><a href=\"http://www.jq22.com/textDifference\" target=\"_blank\" rel=\"noopener\">在线文本差异对比</a></li>\n<li><a href=\"http://cron.qqe2.com/\" target=\"_blank\" rel=\"noopener\">在线Cron表达式生成器</a></li>\n<li><a href=\"http://tool.chinaz.com/\" target=\"_blank\" rel=\"noopener\">站长工具</a></li>\n<li><a href=\"http://jvmmemory.com/\" target=\"_blank\" rel=\"noopener\">JVM参数设置：JVM Settings</a></li>\n<li><a href=\"http://tool.chinaz.com/tools/regexgenerate\" target=\"_blank\" rel=\"noopener\">正则表达式在线测试</a></li>\n<li><a href=\"https://cli.im/\" target=\"_blank\" rel=\"noopener\">二维码生成器</a></li>\n<li><a href=\"http://api.map.baidu.com/lbsapi/getpoint/index.html\" target=\"_blank\" rel=\"noopener\">经纬度坐标拾取器</a></li>\n<li><a href=\"https://meyerweb.com/eric/tools/dencoder/\" target=\"_blank\" rel=\"noopener\">Url编码解码</a></li>\n<li><a href=\"https://tool.lu/coderunner/\" target=\"_blank\" rel=\"noopener\">代码在线运行</a></li>\n<li><a href=\"http://haha98k.com/\" target=\"_blank\" rel=\"noopener\">在线画各种图</a></li>\n</ol>\n<p><big><strong>资源网站</strong></big></p>\n<ul>\n<li><strong>无版权高清图片网站</strong><ol>\n<li><a href=\"https://unsplash.com/\" target=\"_blank\" rel=\"noopener\">Unsplash</a></li>\n<li><a href=\"https://www.pexels.com/\" target=\"_blank\" rel=\"noopener\">Pexel</a></li>\n<li><a href=\"https://stocksnap.io/\" target=\"_blank\" rel=\"noopener\">Stocksnap.io</a></li>\n<li><a href=\"https://gratisography.com/\" target=\"_blank\" rel=\"noopener\">Gratisography</a></li>\n<li><a href=\"https://pixabay.com/\" target=\"_blank\" rel=\"noopener\">Pixabay</a></li>\n<li><a href=\"https://www.flaticon.com/\" target=\"_blank\" rel=\"noopener\">图标:Flaticon</a></li>\n<li><a href=\"https://www.easyicon.net/\" target=\"_blank\" rel=\"noopener\">图标:Easyicon</a></li>\n<li><a href=\"https://www.ssyer.com/home\" target=\"_blank\" rel=\"noopener\">SSYER</a></li>\n<li><a href=\"http://www.polayoutu.com/collections\" target=\"_blank\" rel=\"noopener\">泼辣有图</a></li>\n</ol>\n</li>\n<li><strong>书籍下载网站</strong></li>\n</ul>\n<ol>\n<li><a href=\"https://b-ok.org/\" target=\"_blank\" rel=\"noopener\">英文书籍和文章：b-ok.org</a></li>\n<li><a href=\"https://www.amazon.cn/b?ie=UTF8&amp;node=116175071\" target=\"_blank\" rel=\"noopener\">亚马逊免费kindle电子书</a></li>\n<li><a href=\"https://bookfere.com/\" target=\"_blank\" rel=\"noopener\">书伴</a></li>\n<li><a href=\"http://www.binnao.com/\" target=\"_blank\" rel=\"noopener\">缤闹Kindle论坛</a></li>\n<li><a href=\"https://sk.kindleshare.cn/\" target=\"_blank\" rel=\"noopener\">Kindleshare电子书搜索引擎</a></li>\n</ol>\n<ul>\n<li><strong>电影下载网站</strong></li>\n</ul>\n<ol>\n<li><a href=\"https://www.1080.cn/\" target=\"_blank\" rel=\"noopener\">蓝光电影网</a></li>\n<li><a href=\"https://www.dytt8.net/\" target=\"_blank\" rel=\"noopener\">电影天堂</a></li>\n<li><a href=\"https://www.xunleicang.com/\" target=\"_blank\" rel=\"noopener\">迅雷仓</a></li>\n</ol>\n<ul>\n<li><strong>优质软件下载网站</strong></li>\n</ul>\n<ol>\n<li><a href=\"https://msdn.itellyou.cn/\" target=\"_blank\" rel=\"noopener\">msdn我告诉你</a><br><center>持续更新。。。<center></center></center></li>\n</ol>\n"},{"title":"标签","type":"tags","comments":0,"date":"2019-02-24T15:49:34.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: \"tags\"\ncomments: false\ndate: 2019-02-24 23:49:34\n---\n","updated":"2019-03-02T06:36:43.662Z","path":"tags/index.html","layout":"page","_id":"cjtojsgt5000ekaq435ks1qg2","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Django搭建简单网页（Form）","copyright":true,"abbrlink":"3633b975","date":"2015-10-11T07:58:00.000Z","_content":"## 一、使用表单处理数据\n\n1. 为了实现投票功能，当点击某一选项时，能提交数据到vote里去处理并返回结果，需要使用表单提交数据，在之前的detail.html里写上如下代码：\n```js\n#polls/templates/polls/detail.html\n\n<h1>{{ question.question_text }}</h1>\n{% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}\n<form action=\"{% url 'polls:vote' question.id %}\" method=\"post\">\n{% csrf_token %}\n{% for choice in question.choice_set.all %}\n    <input type=\"radio\" name=\"choice\" id=\"choice{{ forloop.counter }}\" value=\"{{ choice.id }}\" />\n    <label for=\"choice{{ forloop.counter }}\">{{ choice.choice_text }}</label><br />\n{% endfor %}\n<input type=\"submit\" value=\"Vote\" />\n</form>\n```\n<!--more-->\n2. 为了能找到vote的路径，需要在urls.py中设置路径：\n```py\n#polls/urls.py\nurl(r'^(?P<question_id>[0-9]+)/vote/$', views.vote, name='vote'),\n```\n3. 然后在views.py的vote函数中编写代码处理数据，实现一个问题的某一选项的票数增加并存储：\n```py\n#polls/views.py\n\nfrom django.shortcuts import get_object_or_404, render\nfrom django.http import HttpResponseRedirect, HttpResponse\nfrom django.core.urlresolvers import reverse\nfrom .models import Choice, Question\n# ...\n\ndef vote(request, question_id):\n    p = get_object_or_404(Question, pk=question_id)\n    try:\n        selected_choice = p.choice_set.get(pk=request.POST['choice'])\n    except (KeyError, Choice.DoesNotExist):\n        return render(request, 'polls/detail.html', {\n            'question': p,\n            'error_message': \"You didn't select a choice.\",\n        })\n    else:\n        selected_choice.votes += 1\n        selected_choice.save()\n        return HttpResponseRedirect(reverse('polls:results', args=(p.id,)))\n```\n4. 点击投票按钮后需要跳转到投票结果页面results.html，显示某个问题的得票情况，也就是显示票数，并提示是否需要继续投票，以下代码修改view.py中的results函数，处理点击投票按钮后的数据，指定返回results.html的页面：\n```py\n#polls/views.py\n\nfrom django.shortcuts import get_object_or_404, render\n\ndef results(request, question_id):\n    question = get_object_or_404(Question, pk=question_id)\n    return render(request, 'polls/results.html', {'question': question})\n```\n    在polls的template中创建results.html，在results.html中编写如下代码：\n    ```js\n    #polls/templates/polls/results.html\n\n    <h1>{{ question.question_text }}</h1>\n    <ul>\n    {% for choice in question.choice_set.all %}\n        <li>{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}</li>\n    {% endfor %}\n    </ul>\n    <a href=\"{% url 'polls:detail' question.id %}\">Vote again?</a>\n    ```\n \n## 二、精简代码，使用generic views\n\n接下来，我们使用如下步骤，来转变我们之前的代码：\n1. 改变URL配置\n2. 删除一些不需要的，旧的view\n3. 引进新的，基于Django的 generic views\n\n***第一步，修改URL配置：***\n\n首先，打开polls/urls.py，作如下修改：\n```py\n#polls/urls.py\n\nfrom django.conf.urls import url\nfrom . import views\n\nurlpatterns = [\n    url(r'^$', views.IndexView.as_view(), name='index'),\n    url(r'^(?P<pk>[0-9]+)/$', views.DetailView.as_view(), name='detail'),\n    url(r'^(?P<pk>[0-9]+)/results/$', views.ResultsView.as_view(), name='results'),\n    url(r'^(?P<question_id>[0-9]+)/vote/$', views.vote, name='vote'),\n]\n```\n\n***第二步，修改view，引进新的generic views：***\n删除之前的函数，新建类引进generic view，实现之前函数实现的功能：\n```py\n#polls/views.py\n\nfrom django.shortcuts import get_object_or_404, render\nfrom django.http import HttpResponseRedirect\nfrom django.core.urlresolvers import reverse\nfrom django.views import generic\nfrom .models import Choice, Question\n\nclass IndexView(generic.ListView):\n    template_name = 'polls/index.html'\n    context_object_name = 'latest_question_list'\n    def get_queryset(self):\n        \"\"\"Return the last five published questions.\"\"\"\n        return Question.objects.order_by('-pub_date')[:5]\n\nclass DetailView(generic.DetailView):\n    model = Question\n    template_name = 'polls/detail.html'\n\nclass ResultsView(generic.DetailView):\n    model = Question\n    template_name = 'polls/results.html'\ndef vote(request, question_id):\n\n    ... # same as above\n```\n-----","source":"_posts/Django搭建简单网页（Form）.md","raw":"---\ntitle: Django搭建简单网页（Form）\ntags:\n  - Python\n  - Django\ncategories:\n  - 原创\n  - Python\ncopyright: true\nabbrlink: 3633b975\ndate: 2015-10-11 15:58:00\n---\n## 一、使用表单处理数据\n\n1. 为了实现投票功能，当点击某一选项时，能提交数据到vote里去处理并返回结果，需要使用表单提交数据，在之前的detail.html里写上如下代码：\n```js\n#polls/templates/polls/detail.html\n\n<h1>{{ question.question_text }}</h1>\n{% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}\n<form action=\"{% url 'polls:vote' question.id %}\" method=\"post\">\n{% csrf_token %}\n{% for choice in question.choice_set.all %}\n    <input type=\"radio\" name=\"choice\" id=\"choice{{ forloop.counter }}\" value=\"{{ choice.id }}\" />\n    <label for=\"choice{{ forloop.counter }}\">{{ choice.choice_text }}</label><br />\n{% endfor %}\n<input type=\"submit\" value=\"Vote\" />\n</form>\n```\n<!--more-->\n2. 为了能找到vote的路径，需要在urls.py中设置路径：\n```py\n#polls/urls.py\nurl(r'^(?P<question_id>[0-9]+)/vote/$', views.vote, name='vote'),\n```\n3. 然后在views.py的vote函数中编写代码处理数据，实现一个问题的某一选项的票数增加并存储：\n```py\n#polls/views.py\n\nfrom django.shortcuts import get_object_or_404, render\nfrom django.http import HttpResponseRedirect, HttpResponse\nfrom django.core.urlresolvers import reverse\nfrom .models import Choice, Question\n# ...\n\ndef vote(request, question_id):\n    p = get_object_or_404(Question, pk=question_id)\n    try:\n        selected_choice = p.choice_set.get(pk=request.POST['choice'])\n    except (KeyError, Choice.DoesNotExist):\n        return render(request, 'polls/detail.html', {\n            'question': p,\n            'error_message': \"You didn't select a choice.\",\n        })\n    else:\n        selected_choice.votes += 1\n        selected_choice.save()\n        return HttpResponseRedirect(reverse('polls:results', args=(p.id,)))\n```\n4. 点击投票按钮后需要跳转到投票结果页面results.html，显示某个问题的得票情况，也就是显示票数，并提示是否需要继续投票，以下代码修改view.py中的results函数，处理点击投票按钮后的数据，指定返回results.html的页面：\n```py\n#polls/views.py\n\nfrom django.shortcuts import get_object_or_404, render\n\ndef results(request, question_id):\n    question = get_object_or_404(Question, pk=question_id)\n    return render(request, 'polls/results.html', {'question': question})\n```\n    在polls的template中创建results.html，在results.html中编写如下代码：\n    ```js\n    #polls/templates/polls/results.html\n\n    <h1>{{ question.question_text }}</h1>\n    <ul>\n    {% for choice in question.choice_set.all %}\n        <li>{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}</li>\n    {% endfor %}\n    </ul>\n    <a href=\"{% url 'polls:detail' question.id %}\">Vote again?</a>\n    ```\n \n## 二、精简代码，使用generic views\n\n接下来，我们使用如下步骤，来转变我们之前的代码：\n1. 改变URL配置\n2. 删除一些不需要的，旧的view\n3. 引进新的，基于Django的 generic views\n\n***第一步，修改URL配置：***\n\n首先，打开polls/urls.py，作如下修改：\n```py\n#polls/urls.py\n\nfrom django.conf.urls import url\nfrom . import views\n\nurlpatterns = [\n    url(r'^$', views.IndexView.as_view(), name='index'),\n    url(r'^(?P<pk>[0-9]+)/$', views.DetailView.as_view(), name='detail'),\n    url(r'^(?P<pk>[0-9]+)/results/$', views.ResultsView.as_view(), name='results'),\n    url(r'^(?P<question_id>[0-9]+)/vote/$', views.vote, name='vote'),\n]\n```\n\n***第二步，修改view，引进新的generic views：***\n删除之前的函数，新建类引进generic view，实现之前函数实现的功能：\n```py\n#polls/views.py\n\nfrom django.shortcuts import get_object_or_404, render\nfrom django.http import HttpResponseRedirect\nfrom django.core.urlresolvers import reverse\nfrom django.views import generic\nfrom .models import Choice, Question\n\nclass IndexView(generic.ListView):\n    template_name = 'polls/index.html'\n    context_object_name = 'latest_question_list'\n    def get_queryset(self):\n        \"\"\"Return the last five published questions.\"\"\"\n        return Question.objects.order_by('-pub_date')[:5]\n\nclass DetailView(generic.DetailView):\n    model = Question\n    template_name = 'polls/detail.html'\n\nclass ResultsView(generic.DetailView):\n    model = Question\n    template_name = 'polls/results.html'\ndef vote(request, question_id):\n\n    ... # same as above\n```\n-----","slug":"Django搭建简单网页（Form）","published":1,"updated":"2019-03-03T06:41:51.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtojsgsm0001kaq4q2yc3ti2","content":"<h2 id=\"一、使用表单处理数据\"><a href=\"#一、使用表单处理数据\" class=\"headerlink\" title=\"一、使用表单处理数据\"></a>一、使用表单处理数据</h2><ol>\n<li>为了实现投票功能，当点击某一选项时，能提交数据到vote里去处理并返回结果，需要使用表单提交数据，在之前的detail.html里写上如下代码：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#polls/templates/polls/detail.html</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h1&gt;&#123;&#123; question.question_text &#125;&#125;&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&#123;% if error_message %&#125;&lt;p&gt;&lt;strong&gt;&#123;&#123; error_message &#125;&#125;&lt;/</span>strong&gt;&lt;/p&gt;&#123;% endif %&#125;</span><br><span class=\"line\">&lt;form action=<span class=\"string\">\"&#123;% url 'polls:vote' question.id %&#125;\"</span> method=<span class=\"string\">\"post\"</span>&gt;</span><br><span class=\"line\">&#123;% csrf_token %&#125;</span><br><span class=\"line\">&#123;% <span class=\"keyword\">for</span> choice <span class=\"keyword\">in</span> question.choice_set.all %&#125;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"choice\"</span> id=<span class=\"string\">\"choice&#123;&#123; forloop.counter &#125;&#125;\"</span> value=<span class=\"string\">\"&#123;&#123; choice.id &#125;&#125;\"</span> /&gt;</span><br><span class=\"line\">    &lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"choice&#123;&#123; forloop.counter &#125;&#125;\"</span>&gt;&#123;&#123; choice.choice_text &#125;&#125;&lt;<span class=\"regexp\">/label&gt;&lt;br /</span>&gt;</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"submit\"</span> value=<span class=\"string\">\"Vote\"</span> /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/form&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"2\">\n<li><p>为了能找到vote的路径，需要在urls.py中设置路径：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/urls.py</span></span><br><span class=\"line\">url(<span class=\"string\">r'^(?P&lt;question_id&gt;[0-9]+)/vote/$'</span>, views.vote, name=<span class=\"string\">'vote'</span>),</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后在views.py的vote函数中编写代码处理数据，实现一个问题的某一选项的票数增加并存储：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/views.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> get_object_or_404, render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponseRedirect, HttpResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.core.urlresolvers <span class=\"keyword\">import</span> reverse</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Choice, Question</span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">vote</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">    p = get_object_or_404(Question, pk=question_id)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        selected_choice = p.choice_set.get(pk=request.POST[<span class=\"string\">'choice'</span>])</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyError, Choice.DoesNotExist):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/detail.html'</span>, &#123;</span><br><span class=\"line\">            <span class=\"string\">'question'</span>: p,</span><br><span class=\"line\">            <span class=\"string\">'error_message'</span>: <span class=\"string\">\"You didn't select a choice.\"</span>,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        selected_choice.votes += <span class=\"number\">1</span></span><br><span class=\"line\">        selected_choice.save()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponseRedirect(reverse(<span class=\"string\">'polls:results'</span>, args=(p.id,)))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>点击投票按钮后需要跳转到投票结果页面results.html，显示某个问题的得票情况，也就是显示票数，并提示是否需要继续投票，以下代码修改view.py中的results函数，处理点击投票按钮后的数据，指定返回results.html的页面：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/views.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> get_object_or_404, render</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">results</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">    question = get_object_or_404(Question, pk=question_id)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/results.html'</span>, &#123;<span class=\"string\">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure>\n<p> 在polls的template中创建results.html，在results.html中编写如下代码：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#polls/templates/polls/results.html</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h1&gt;&#123;&#123; question.question_text &#125;&#125;&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&#123;% for choice in question.choice_set.all %&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;li&gt;&#123;&#123; choice.choice_text &#125;&#125; -- &#123;&#123; choice.votes &#125;&#125; vote&#123;&#123; choice.votes|pluralize &#125;&#125;&lt;/</span>li&gt;</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;a href=\"&#123;% url 'polls:detail' question.id %&#125;\"&gt;Vote again?&lt;/</span>a&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"二、精简代码，使用generic-views\"><a href=\"#二、精简代码，使用generic-views\" class=\"headerlink\" title=\"二、精简代码，使用generic views\"></a>二、精简代码，使用generic views</h2><p>接下来，我们使用如下步骤，来转变我们之前的代码：</p>\n<ol>\n<li>改变URL配置</li>\n<li>删除一些不需要的，旧的view</li>\n<li>引进新的，基于Django的 generic views</li>\n</ol>\n<p><strong><em>第一步，修改URL配置：</em></strong></p>\n<p>首先，打开polls/urls.py，作如下修改：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/urls.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^$'</span>, views.IndexView.as_view(), name=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">    url(<span class=\"string\">r'^(?P&lt;pk&gt;[0-9]+)/$'</span>, views.DetailView.as_view(), name=<span class=\"string\">'detail'</span>),</span><br><span class=\"line\">    url(<span class=\"string\">r'^(?P&lt;pk&gt;[0-9]+)/results/$'</span>, views.ResultsView.as_view(), name=<span class=\"string\">'results'</span>),</span><br><span class=\"line\">    url(<span class=\"string\">r'^(?P&lt;question_id&gt;[0-9]+)/vote/$'</span>, views.vote, name=<span class=\"string\">'vote'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>第二步，修改view，引进新的generic views：</em></strong><br>删除之前的函数，新建类引进generic view，实现之前函数实现的功能：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/views.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> get_object_or_404, render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponseRedirect</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.core.urlresolvers <span class=\"keyword\">import</span> reverse</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.views <span class=\"keyword\">import</span> generic</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Choice, Question</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexView</span><span class=\"params\">(generic.ListView)</span>:</span></span><br><span class=\"line\">    template_name = <span class=\"string\">'polls/index.html'</span></span><br><span class=\"line\">    context_object_name = <span class=\"string\">'latest_question_list'</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Return the last five published questions.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailView</span><span class=\"params\">(generic.DetailView)</span>:</span></span><br><span class=\"line\">    model = Question</span><br><span class=\"line\">    template_name = <span class=\"string\">'polls/detail.html'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultsView</span><span class=\"params\">(generic.DetailView)</span>:</span></span><br><span class=\"line\">    model = Question</span><br><span class=\"line\">    template_name = <span class=\"string\">'polls/results.html'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">vote</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ... <span class=\"comment\"># same as above</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、使用表单处理数据\"><a href=\"#一、使用表单处理数据\" class=\"headerlink\" title=\"一、使用表单处理数据\"></a>一、使用表单处理数据</h2><ol>\n<li>为了实现投票功能，当点击某一选项时，能提交数据到vote里去处理并返回结果，需要使用表单提交数据，在之前的detail.html里写上如下代码：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#polls/templates/polls/detail.html</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h1&gt;&#123;&#123; question.question_text &#125;&#125;&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&#123;% if error_message %&#125;&lt;p&gt;&lt;strong&gt;&#123;&#123; error_message &#125;&#125;&lt;/</span>strong&gt;&lt;/p&gt;&#123;% endif %&#125;</span><br><span class=\"line\">&lt;form action=<span class=\"string\">\"&#123;% url 'polls:vote' question.id %&#125;\"</span> method=<span class=\"string\">\"post\"</span>&gt;</span><br><span class=\"line\">&#123;% csrf_token %&#125;</span><br><span class=\"line\">&#123;% <span class=\"keyword\">for</span> choice <span class=\"keyword\">in</span> question.choice_set.all %&#125;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"choice\"</span> id=<span class=\"string\">\"choice&#123;&#123; forloop.counter &#125;&#125;\"</span> value=<span class=\"string\">\"&#123;&#123; choice.id &#125;&#125;\"</span> /&gt;</span><br><span class=\"line\">    &lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"choice&#123;&#123; forloop.counter &#125;&#125;\"</span>&gt;&#123;&#123; choice.choice_text &#125;&#125;&lt;<span class=\"regexp\">/label&gt;&lt;br /</span>&gt;</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"submit\"</span> value=<span class=\"string\">\"Vote\"</span> /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/form&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol start=\"2\">\n<li><p>为了能找到vote的路径，需要在urls.py中设置路径：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/urls.py</span></span><br><span class=\"line\">url(<span class=\"string\">r'^(?P&lt;question_id&gt;[0-9]+)/vote/$'</span>, views.vote, name=<span class=\"string\">'vote'</span>),</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后在views.py的vote函数中编写代码处理数据，实现一个问题的某一选项的票数增加并存储：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/views.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> get_object_or_404, render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponseRedirect, HttpResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.core.urlresolvers <span class=\"keyword\">import</span> reverse</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Choice, Question</span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">vote</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">    p = get_object_or_404(Question, pk=question_id)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        selected_choice = p.choice_set.get(pk=request.POST[<span class=\"string\">'choice'</span>])</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyError, Choice.DoesNotExist):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/detail.html'</span>, &#123;</span><br><span class=\"line\">            <span class=\"string\">'question'</span>: p,</span><br><span class=\"line\">            <span class=\"string\">'error_message'</span>: <span class=\"string\">\"You didn't select a choice.\"</span>,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        selected_choice.votes += <span class=\"number\">1</span></span><br><span class=\"line\">        selected_choice.save()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponseRedirect(reverse(<span class=\"string\">'polls:results'</span>, args=(p.id,)))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>点击投票按钮后需要跳转到投票结果页面results.html，显示某个问题的得票情况，也就是显示票数，并提示是否需要继续投票，以下代码修改view.py中的results函数，处理点击投票按钮后的数据，指定返回results.html的页面：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/views.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> get_object_or_404, render</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">results</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">    question = get_object_or_404(Question, pk=question_id)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/results.html'</span>, &#123;<span class=\"string\">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure>\n<p> 在polls的template中创建results.html，在results.html中编写如下代码：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#polls/templates/polls/results.html</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h1&gt;&#123;&#123; question.question_text &#125;&#125;&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&#123;% for choice in question.choice_set.all %&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;li&gt;&#123;&#123; choice.choice_text &#125;&#125; -- &#123;&#123; choice.votes &#125;&#125; vote&#123;&#123; choice.votes|pluralize &#125;&#125;&lt;/</span>li&gt;</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;a href=\"&#123;% url 'polls:detail' question.id %&#125;\"&gt;Vote again?&lt;/</span>a&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"二、精简代码，使用generic-views\"><a href=\"#二、精简代码，使用generic-views\" class=\"headerlink\" title=\"二、精简代码，使用generic views\"></a>二、精简代码，使用generic views</h2><p>接下来，我们使用如下步骤，来转变我们之前的代码：</p>\n<ol>\n<li>改变URL配置</li>\n<li>删除一些不需要的，旧的view</li>\n<li>引进新的，基于Django的 generic views</li>\n</ol>\n<p><strong><em>第一步，修改URL配置：</em></strong></p>\n<p>首先，打开polls/urls.py，作如下修改：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/urls.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^$'</span>, views.IndexView.as_view(), name=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">    url(<span class=\"string\">r'^(?P&lt;pk&gt;[0-9]+)/$'</span>, views.DetailView.as_view(), name=<span class=\"string\">'detail'</span>),</span><br><span class=\"line\">    url(<span class=\"string\">r'^(?P&lt;pk&gt;[0-9]+)/results/$'</span>, views.ResultsView.as_view(), name=<span class=\"string\">'results'</span>),</span><br><span class=\"line\">    url(<span class=\"string\">r'^(?P&lt;question_id&gt;[0-9]+)/vote/$'</span>, views.vote, name=<span class=\"string\">'vote'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>第二步，修改view，引进新的generic views：</em></strong><br>删除之前的函数，新建类引进generic view，实现之前函数实现的功能：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/views.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> get_object_or_404, render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponseRedirect</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.core.urlresolvers <span class=\"keyword\">import</span> reverse</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.views <span class=\"keyword\">import</span> generic</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Choice, Question</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexView</span><span class=\"params\">(generic.ListView)</span>:</span></span><br><span class=\"line\">    template_name = <span class=\"string\">'polls/index.html'</span></span><br><span class=\"line\">    context_object_name = <span class=\"string\">'latest_question_list'</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Return the last five published questions.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailView</span><span class=\"params\">(generic.DetailView)</span>:</span></span><br><span class=\"line\">    model = Question</span><br><span class=\"line\">    template_name = <span class=\"string\">'polls/detail.html'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultsView</span><span class=\"params\">(generic.DetailView)</span>:</span></span><br><span class=\"line\">    model = Question</span><br><span class=\"line\">    template_name = <span class=\"string\">'polls/results.html'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">vote</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ... <span class=\"comment\"># same as above</span></span><br></pre></td></tr></table></figure></p>\n<hr>"},{"title":"Django搭建简单网页（View）","copyright":true,"abbrlink":"6ad03acf","date":"2015-09-22T03:46:00.000Z","_content":"## 一、编写前台界面views：\n1. 编写前台界面需要显示的内容，打开polls/views.py，编写如下代码：\n``` python\n#polls/views.py\nfrom django.http importHttpResponse\ndef index(request):\n   return HttpResponse(\"Hello, world. You're atthe polls index.\")\n```\n<!--more-->\n2. 编写自己应用的urls文件，在应用polls下创建urls.py，添加如下代码：\n```python\n#polls/urls.py\nfrom django.conf.urls import url\nfrom . import views\n\nurlpatterns = [\n    url(r'^$', views.index, name='index'),\n]\n```\n3. 在项目的urls文件里指定自己应用的urls文件，打开项目的urls.py，添加如下代码：\n```py\n#mysite/urls.py\n\nfrom django.conf.urls import include, url\nfrom django.contrib import admin\n\nurlpatterns = [\n   url(r'^polls/', include('polls.urls')),\n   url(r'^admin/', include(admin.site.urls)),\n]\n```\n4. 在浏览器中打开http://127.0.0.1:8000/polls, 就可以看到刚刚写的view，即显示“Hello,world. You're at the polls index.” \n\n## 二、编写若干个views界面\n同上面的原理是一样的，先写界面内容，再去自己应用的urls里面使用正则表达式指定路径。\n\n1. 在polls/views.py中添加如下代码：\n```python\n#polls/views.py\n\ndef detail(request, question_id):\n   return HttpResponse(\"You're looking at question %s.\" %question_id)\n\ndef results(request, question_id):\n   response = \"You're looking at the results of question %s.\"\n   return HttpResponse(response % question_id)\n\ndef vote(request, question_id):\n   return HttpResponse(\"You're voting on question %s.\" %question_id)\n```\n2. 在polls/urls.py中指定路径：\n```python\n#polls/urls.py\n\nfrom django.conf.urls import url\nfrom . import views\n\nurlpatterns = [\n    #ex: /polls/\n   url(r'^$', views.index, name='index'),\n    #ex: /polls/5/\n   url(r'^(?P<question_id>[0-9]+)/$', views.detail, name='detail'),\n    #ex: /polls/5/results/\n   url(r'^(?P<question_id>[0-9]+)/results/$', views.results, name='results'),\n    #ex: /polls/5/vote/\n   url(r'^(?P<question_id>[0-9]+)/vote/$', views.vote, name='vote'),\n]\n```\n3. 然后就可以在浏览器里输入各种路径，如：\n    http://127.0.0.1:8000/polls/3: 显示“You're looking at question 3.”\n    http://127.0.0.1:8000/polls/3/results: 显示“You're looking at the results ofquestion 3.”\n    http://127.0.0.1:8000/polls/3/vote: 显示“You're voting on question 3.”\n\n## 三、编写用于显示后台数据的前台界面：\n上面的界面内容只是静态的显示一些字符串，接下来是实现从后台读取数据显示在前台界面\n\n修改polls/views.py文件，其他的操作是一样的：\n```python\n#polls/views.py\n\nfrom django.http import HttpResponse\nfrom .models import Question\n\ndef index(request):\n    latest_question_list =Question.objects.order_by('-pub_date')[:5]\n    output = ', '.join([p.question_text for pin latest_question_list])\n   return HttpResponse(output)\n```\n这里导入了models里的Question，然后读取出Question里的内容，病按日期排序。\n\n## 四、从views.py中分离出template进行界面编写\n1. 在应用polls里创建templates文件夹，再在里面创建polls文件夹，在新建的polls里创建index.html文件，打开并编写如下代码：\n```js\n{% if latest_question_list %}\n   <ul>\n   {% for question in latest_question_list %}\n       <li><a href=\"/polls/{{ question.id }}/\">{{question.question_text }}</a></li>\n   {% endfor %}\n   </ul>\n{% else %}\n   <p>No polls are available.</p>\n{% endif %}\n```\n    上面代码是从views.py里分离出来的用来显示最近问题列表的功能，这里分条显示。\n\n2. 然后在polls的views里修改代码如下：\n```python\n#polls/views.py\n\nfrom django.http import HttpResponse\nfrom django.template import RequestContext,loader\nfrom .models import Question\n\ndef index(request):\n    latest_question_list =Question.objects.order_by('-pub_date')[:5]\n    template =loader.get_template('polls/index.html')\n    context = RequestContext(request, {\n        'latest_question_list': latest_question_list,\n    })\n    returnHttpResponse(template.render(context))\n```\n    这里用loader装载template：polls/index.html，然后再传递上下文给template进行render。\n\n## 五、用render( )代替HttpResponse，简化代码\n代码修改如下：\n```python\n#polls/views.py\n\nfrom django.shortcuts import render\nfrom .models import Question\n\ndef index(request):\n   latest_question_list = Question.objects.order_by('-pub_date')[:5]\n   context = {'latest_question_list': latest_question_list}\n   return render(request, 'polls/index.html', context)\n```\n这样就不用导入loader,RequestContext和HttpResponse了， render本身就是返回一个HttpResponse对象，所以直接返回。\n也可以这样修改更简洁：\n```python\ndef index(request):\n   latest_question_list = Question.objects.order_by('-pub_date')[:5]\n   return render(request, 'polls/index.html', {'latest_question_list':latest_question_list})\n```\n\n----","source":"_posts/Django搭建简单网页（View）.md","raw":"---\ntitle: Django搭建简单网页（View）\ntags:\n  - Python\n  - Django\ncategories:\n  - 原创\n  - Python\ncopyright: true\nabbrlink: 6ad03acf\ndate: 2015-09-22 11:46:00\n---\n## 一、编写前台界面views：\n1. 编写前台界面需要显示的内容，打开polls/views.py，编写如下代码：\n``` python\n#polls/views.py\nfrom django.http importHttpResponse\ndef index(request):\n   return HttpResponse(\"Hello, world. You're atthe polls index.\")\n```\n<!--more-->\n2. 编写自己应用的urls文件，在应用polls下创建urls.py，添加如下代码：\n```python\n#polls/urls.py\nfrom django.conf.urls import url\nfrom . import views\n\nurlpatterns = [\n    url(r'^$', views.index, name='index'),\n]\n```\n3. 在项目的urls文件里指定自己应用的urls文件，打开项目的urls.py，添加如下代码：\n```py\n#mysite/urls.py\n\nfrom django.conf.urls import include, url\nfrom django.contrib import admin\n\nurlpatterns = [\n   url(r'^polls/', include('polls.urls')),\n   url(r'^admin/', include(admin.site.urls)),\n]\n```\n4. 在浏览器中打开http://127.0.0.1:8000/polls, 就可以看到刚刚写的view，即显示“Hello,world. You're at the polls index.” \n\n## 二、编写若干个views界面\n同上面的原理是一样的，先写界面内容，再去自己应用的urls里面使用正则表达式指定路径。\n\n1. 在polls/views.py中添加如下代码：\n```python\n#polls/views.py\n\ndef detail(request, question_id):\n   return HttpResponse(\"You're looking at question %s.\" %question_id)\n\ndef results(request, question_id):\n   response = \"You're looking at the results of question %s.\"\n   return HttpResponse(response % question_id)\n\ndef vote(request, question_id):\n   return HttpResponse(\"You're voting on question %s.\" %question_id)\n```\n2. 在polls/urls.py中指定路径：\n```python\n#polls/urls.py\n\nfrom django.conf.urls import url\nfrom . import views\n\nurlpatterns = [\n    #ex: /polls/\n   url(r'^$', views.index, name='index'),\n    #ex: /polls/5/\n   url(r'^(?P<question_id>[0-9]+)/$', views.detail, name='detail'),\n    #ex: /polls/5/results/\n   url(r'^(?P<question_id>[0-9]+)/results/$', views.results, name='results'),\n    #ex: /polls/5/vote/\n   url(r'^(?P<question_id>[0-9]+)/vote/$', views.vote, name='vote'),\n]\n```\n3. 然后就可以在浏览器里输入各种路径，如：\n    http://127.0.0.1:8000/polls/3: 显示“You're looking at question 3.”\n    http://127.0.0.1:8000/polls/3/results: 显示“You're looking at the results ofquestion 3.”\n    http://127.0.0.1:8000/polls/3/vote: 显示“You're voting on question 3.”\n\n## 三、编写用于显示后台数据的前台界面：\n上面的界面内容只是静态的显示一些字符串，接下来是实现从后台读取数据显示在前台界面\n\n修改polls/views.py文件，其他的操作是一样的：\n```python\n#polls/views.py\n\nfrom django.http import HttpResponse\nfrom .models import Question\n\ndef index(request):\n    latest_question_list =Question.objects.order_by('-pub_date')[:5]\n    output = ', '.join([p.question_text for pin latest_question_list])\n   return HttpResponse(output)\n```\n这里导入了models里的Question，然后读取出Question里的内容，病按日期排序。\n\n## 四、从views.py中分离出template进行界面编写\n1. 在应用polls里创建templates文件夹，再在里面创建polls文件夹，在新建的polls里创建index.html文件，打开并编写如下代码：\n```js\n{% if latest_question_list %}\n   <ul>\n   {% for question in latest_question_list %}\n       <li><a href=\"/polls/{{ question.id }}/\">{{question.question_text }}</a></li>\n   {% endfor %}\n   </ul>\n{% else %}\n   <p>No polls are available.</p>\n{% endif %}\n```\n    上面代码是从views.py里分离出来的用来显示最近问题列表的功能，这里分条显示。\n\n2. 然后在polls的views里修改代码如下：\n```python\n#polls/views.py\n\nfrom django.http import HttpResponse\nfrom django.template import RequestContext,loader\nfrom .models import Question\n\ndef index(request):\n    latest_question_list =Question.objects.order_by('-pub_date')[:5]\n    template =loader.get_template('polls/index.html')\n    context = RequestContext(request, {\n        'latest_question_list': latest_question_list,\n    })\n    returnHttpResponse(template.render(context))\n```\n    这里用loader装载template：polls/index.html，然后再传递上下文给template进行render。\n\n## 五、用render( )代替HttpResponse，简化代码\n代码修改如下：\n```python\n#polls/views.py\n\nfrom django.shortcuts import render\nfrom .models import Question\n\ndef index(request):\n   latest_question_list = Question.objects.order_by('-pub_date')[:5]\n   context = {'latest_question_list': latest_question_list}\n   return render(request, 'polls/index.html', context)\n```\n这样就不用导入loader,RequestContext和HttpResponse了， render本身就是返回一个HttpResponse对象，所以直接返回。\n也可以这样修改更简洁：\n```python\ndef index(request):\n   latest_question_list = Question.objects.order_by('-pub_date')[:5]\n   return render(request, 'polls/index.html', {'latest_question_list':latest_question_list})\n```\n\n----","slug":"Django搭建简单网页（View）","published":1,"updated":"2019-03-03T06:41:28.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtojsgss0003kaq4t7hubi9o","content":"<h2 id=\"一、编写前台界面views：\"><a href=\"#一、编写前台界面views：\" class=\"headerlink\" title=\"一、编写前台界面views：\"></a>一、编写前台界面views：</h2><ol>\n<li>编写前台界面需要显示的内容，打开polls/views.py，编写如下代码：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/views.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http importHttpResponse</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">\"Hello, world. You're atthe polls index.\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"2\">\n<li><p>编写自己应用的urls文件，在应用polls下创建urls.py，添加如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/urls.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^$'</span>, views.index, name=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在项目的urls文件里指定自己应用的urls文件，打开项目的urls.py，添加如下代码：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#mysite/urls.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> include, url</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">   url(<span class=\"string\">r'^polls/'</span>, include(<span class=\"string\">'polls.urls'</span>)),</span><br><span class=\"line\">   url(<span class=\"string\">r'^admin/'</span>, include(admin.site.urls)),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在浏览器中打开<a href=\"http://127.0.0.1:8000/polls\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/polls</a>, 就可以看到刚刚写的view，即显示“Hello,world. You’re at the polls index.” </p>\n</li>\n</ol>\n<h2 id=\"二、编写若干个views界面\"><a href=\"#二、编写若干个views界面\" class=\"headerlink\" title=\"二、编写若干个views界面\"></a>二、编写若干个views界面</h2><p>同上面的原理是一样的，先写界面内容，再去自己应用的urls里面使用正则表达式指定路径。</p>\n<ol>\n<li><p>在polls/views.py中添加如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/views.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detail</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">\"You're looking at question %s.\"</span> %question_id)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">results</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">   response = <span class=\"string\">\"You're looking at the results of question %s.\"</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> HttpResponse(response % question_id)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">vote</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">\"You're voting on question %s.\"</span> %question_id)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在polls/urls.py中指定路径：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/urls.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    <span class=\"comment\">#ex: /polls/</span></span><br><span class=\"line\">   url(<span class=\"string\">r'^$'</span>, views.index, name=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">    <span class=\"comment\">#ex: /polls/5/</span></span><br><span class=\"line\">   url(<span class=\"string\">r'^(?P&lt;question_id&gt;[0-9]+)/$'</span>, views.detail, name=<span class=\"string\">'detail'</span>),</span><br><span class=\"line\">    <span class=\"comment\">#ex: /polls/5/results/</span></span><br><span class=\"line\">   url(<span class=\"string\">r'^(?P&lt;question_id&gt;[0-9]+)/results/$'</span>, views.results, name=<span class=\"string\">'results'</span>),</span><br><span class=\"line\">    <span class=\"comment\">#ex: /polls/5/vote/</span></span><br><span class=\"line\">   url(<span class=\"string\">r'^(?P&lt;question_id&gt;[0-9]+)/vote/$'</span>, views.vote, name=<span class=\"string\">'vote'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后就可以在浏览器里输入各种路径，如：<br> <a href=\"http://127.0.0.1:8000/polls/3\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/polls/3</a>: 显示“You’re looking at question 3.”<br> <a href=\"http://127.0.0.1:8000/polls/3/results\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/polls/3/results</a>: 显示“You’re looking at the results ofquestion 3.”<br> <a href=\"http://127.0.0.1:8000/polls/3/vote\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/polls/3/vote</a>: 显示“You’re voting on question 3.”</p>\n</li>\n</ol>\n<h2 id=\"三、编写用于显示后台数据的前台界面：\"><a href=\"#三、编写用于显示后台数据的前台界面：\" class=\"headerlink\" title=\"三、编写用于显示后台数据的前台界面：\"></a>三、编写用于显示后台数据的前台界面：</h2><p>上面的界面内容只是静态的显示一些字符串，接下来是实现从后台读取数据显示在前台界面</p>\n<p>修改polls/views.py文件，其他的操作是一样的：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/views.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    latest_question_list =Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</span><br><span class=\"line\">    output = <span class=\"string\">', '</span>.join([p.question_text <span class=\"keyword\">for</span> pin latest_question_list])</span><br><span class=\"line\">   <span class=\"keyword\">return</span> HttpResponse(output)</span><br></pre></td></tr></table></figure></p>\n<p>这里导入了models里的Question，然后读取出Question里的内容，病按日期排序。</p>\n<h2 id=\"四、从views-py中分离出template进行界面编写\"><a href=\"#四、从views-py中分离出template进行界面编写\" class=\"headerlink\" title=\"四、从views.py中分离出template进行界面编写\"></a>四、从views.py中分离出template进行界面编写</h2><ol>\n<li><p>在应用polls里创建templates文件夹，再在里面创建polls文件夹，在新建的polls里创建index.html文件，打开并编写如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> latest_question_list %&#125;</span><br><span class=\"line\">   &lt;ul&gt;</span><br><span class=\"line\">   &#123;% <span class=\"keyword\">for</span> question <span class=\"keyword\">in</span> latest_question_list %&#125;</span><br><span class=\"line\">       &lt;li&gt;&lt;a href=\"/polls/&#123;&#123; question.id &#125;&#125;/\"&gt;&#123;&#123;question.question_text &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">   &#123;% endfor %&#125;</span><br><span class=\"line\">   &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&#123;% else %&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">   &lt;p&gt;No polls are available.&lt;/</span>p&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p> 上面代码是从views.py里分离出来的用来显示最近问题列表的功能，这里分条显示。</p>\n</li>\n<li><p>然后在polls的views里修改代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/views.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.template <span class=\"keyword\">import</span> RequestContext,loader</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    latest_question_list =Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</span><br><span class=\"line\">    template =loader.get_template(<span class=\"string\">'polls/index.html'</span>)</span><br><span class=\"line\">    context = RequestContext(request, &#123;</span><br><span class=\"line\">        <span class=\"string\">'latest_question_list'</span>: latest_question_list,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    returnHttpResponse(template.render(context))</span><br></pre></td></tr></table></figure>\n<p> 这里用loader装载template：polls/index.html，然后再传递上下文给template进行render。</p>\n</li>\n</ol>\n<h2 id=\"五、用render-代替HttpResponse，简化代码\"><a href=\"#五、用render-代替HttpResponse，简化代码\" class=\"headerlink\" title=\"五、用render( )代替HttpResponse，简化代码\"></a>五、用render( )代替HttpResponse，简化代码</h2><p>代码修改如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/views.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">   latest_question_list = Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</span><br><span class=\"line\">   context = &#123;<span class=\"string\">'latest_question_list'</span>: latest_question_list&#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/index.html'</span>, context)</span><br></pre></td></tr></table></figure></p>\n<p>这样就不用导入loader,RequestContext和HttpResponse了， render本身就是返回一个HttpResponse对象，所以直接返回。<br>也可以这样修改更简洁：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">   latest_question_list = Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</span><br><span class=\"line\">   <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/index.html'</span>, &#123;<span class=\"string\">'latest_question_list'</span>:latest_question_list&#125;)</span><br></pre></td></tr></table></figure></p>\n<hr>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、编写前台界面views：\"><a href=\"#一、编写前台界面views：\" class=\"headerlink\" title=\"一、编写前台界面views：\"></a>一、编写前台界面views：</h2><ol>\n<li>编写前台界面需要显示的内容，打开polls/views.py，编写如下代码：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/views.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http importHttpResponse</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">\"Hello, world. You're atthe polls index.\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol start=\"2\">\n<li><p>编写自己应用的urls文件，在应用polls下创建urls.py，添加如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/urls.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^$'</span>, views.index, name=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在项目的urls文件里指定自己应用的urls文件，打开项目的urls.py，添加如下代码：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#mysite/urls.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> include, url</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">   url(<span class=\"string\">r'^polls/'</span>, include(<span class=\"string\">'polls.urls'</span>)),</span><br><span class=\"line\">   url(<span class=\"string\">r'^admin/'</span>, include(admin.site.urls)),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在浏览器中打开<a href=\"http://127.0.0.1:8000/polls\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/polls</a>, 就可以看到刚刚写的view，即显示“Hello,world. You’re at the polls index.” </p>\n</li>\n</ol>\n<h2 id=\"二、编写若干个views界面\"><a href=\"#二、编写若干个views界面\" class=\"headerlink\" title=\"二、编写若干个views界面\"></a>二、编写若干个views界面</h2><p>同上面的原理是一样的，先写界面内容，再去自己应用的urls里面使用正则表达式指定路径。</p>\n<ol>\n<li><p>在polls/views.py中添加如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/views.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detail</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">\"You're looking at question %s.\"</span> %question_id)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">results</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">   response = <span class=\"string\">\"You're looking at the results of question %s.\"</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> HttpResponse(response % question_id)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">vote</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">\"You're voting on question %s.\"</span> %question_id)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在polls/urls.py中指定路径：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/urls.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    <span class=\"comment\">#ex: /polls/</span></span><br><span class=\"line\">   url(<span class=\"string\">r'^$'</span>, views.index, name=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">    <span class=\"comment\">#ex: /polls/5/</span></span><br><span class=\"line\">   url(<span class=\"string\">r'^(?P&lt;question_id&gt;[0-9]+)/$'</span>, views.detail, name=<span class=\"string\">'detail'</span>),</span><br><span class=\"line\">    <span class=\"comment\">#ex: /polls/5/results/</span></span><br><span class=\"line\">   url(<span class=\"string\">r'^(?P&lt;question_id&gt;[0-9]+)/results/$'</span>, views.results, name=<span class=\"string\">'results'</span>),</span><br><span class=\"line\">    <span class=\"comment\">#ex: /polls/5/vote/</span></span><br><span class=\"line\">   url(<span class=\"string\">r'^(?P&lt;question_id&gt;[0-9]+)/vote/$'</span>, views.vote, name=<span class=\"string\">'vote'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后就可以在浏览器里输入各种路径，如：<br> <a href=\"http://127.0.0.1:8000/polls/3\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/polls/3</a>: 显示“You’re looking at question 3.”<br> <a href=\"http://127.0.0.1:8000/polls/3/results\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/polls/3/results</a>: 显示“You’re looking at the results ofquestion 3.”<br> <a href=\"http://127.0.0.1:8000/polls/3/vote\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/polls/3/vote</a>: 显示“You’re voting on question 3.”</p>\n</li>\n</ol>\n<h2 id=\"三、编写用于显示后台数据的前台界面：\"><a href=\"#三、编写用于显示后台数据的前台界面：\" class=\"headerlink\" title=\"三、编写用于显示后台数据的前台界面：\"></a>三、编写用于显示后台数据的前台界面：</h2><p>上面的界面内容只是静态的显示一些字符串，接下来是实现从后台读取数据显示在前台界面</p>\n<p>修改polls/views.py文件，其他的操作是一样的：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/views.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    latest_question_list =Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</span><br><span class=\"line\">    output = <span class=\"string\">', '</span>.join([p.question_text <span class=\"keyword\">for</span> pin latest_question_list])</span><br><span class=\"line\">   <span class=\"keyword\">return</span> HttpResponse(output)</span><br></pre></td></tr></table></figure></p>\n<p>这里导入了models里的Question，然后读取出Question里的内容，病按日期排序。</p>\n<h2 id=\"四、从views-py中分离出template进行界面编写\"><a href=\"#四、从views-py中分离出template进行界面编写\" class=\"headerlink\" title=\"四、从views.py中分离出template进行界面编写\"></a>四、从views.py中分离出template进行界面编写</h2><ol>\n<li><p>在应用polls里创建templates文件夹，再在里面创建polls文件夹，在新建的polls里创建index.html文件，打开并编写如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> latest_question_list %&#125;</span><br><span class=\"line\">   &lt;ul&gt;</span><br><span class=\"line\">   &#123;% <span class=\"keyword\">for</span> question <span class=\"keyword\">in</span> latest_question_list %&#125;</span><br><span class=\"line\">       &lt;li&gt;&lt;a href=\"/polls/&#123;&#123; question.id &#125;&#125;/\"&gt;&#123;&#123;question.question_text &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">   &#123;% endfor %&#125;</span><br><span class=\"line\">   &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&#123;% else %&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">   &lt;p&gt;No polls are available.&lt;/</span>p&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p> 上面代码是从views.py里分离出来的用来显示最近问题列表的功能，这里分条显示。</p>\n</li>\n<li><p>然后在polls的views里修改代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/views.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.template <span class=\"keyword\">import</span> RequestContext,loader</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    latest_question_list =Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</span><br><span class=\"line\">    template =loader.get_template(<span class=\"string\">'polls/index.html'</span>)</span><br><span class=\"line\">    context = RequestContext(request, &#123;</span><br><span class=\"line\">        <span class=\"string\">'latest_question_list'</span>: latest_question_list,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    returnHttpResponse(template.render(context))</span><br></pre></td></tr></table></figure>\n<p> 这里用loader装载template：polls/index.html，然后再传递上下文给template进行render。</p>\n</li>\n</ol>\n<h2 id=\"五、用render-代替HttpResponse，简化代码\"><a href=\"#五、用render-代替HttpResponse，简化代码\" class=\"headerlink\" title=\"五、用render( )代替HttpResponse，简化代码\"></a>五、用render( )代替HttpResponse，简化代码</h2><p>代码修改如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#polls/views.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">   latest_question_list = Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</span><br><span class=\"line\">   context = &#123;<span class=\"string\">'latest_question_list'</span>: latest_question_list&#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/index.html'</span>, context)</span><br></pre></td></tr></table></figure></p>\n<p>这样就不用导入loader,RequestContext和HttpResponse了， render本身就是返回一个HttpResponse对象，所以直接返回。<br>也可以这样修改更简洁：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">   latest_question_list = Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</span><br><span class=\"line\">   <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/index.html'</span>, &#123;<span class=\"string\">'latest_question_list'</span>:latest_question_list&#125;)</span><br></pre></td></tr></table></figure></p>\n<hr>"},{"title":"Django搭建简单网页（admin）","copyright":true,"abbrlink":"9a5c839","date":"2015-09-22T14:01:55.000Z","toc":true,"_content":"## 一、运行后台管理\n\n1. 创建超级用户以便于登录到后台管理\n```python\n    python manage.py createsuperuser\n```\n    接着输入用户名，邮箱，密码完成创建\n\n2. 运行服务程序：\n```\npython manage.py runserver\n```\n    然后在浏览器里输入：http://127.0.0.1:8000/admin/, 在登录界面完成登录就可以进入管理界面了。\n<!--more-->\n3. 为了在后台管理界面中显示我们编写的应用polls，需要在polls/admin.py中添加如下代码：\n``` python\nfrom django.contrib import admin\nfrom .models import Question\nadmin.site.register(Question)  #在管理网页中注册需要显示的Question\n```\n    这时后台会自动为Question生成一些管理表单。\n    为了在后台管理界面中显示我们编写的应用polls，需要在polls/admin.py中添加如下代码：\n    ```\n    from django.contrib import admin\n    from .models import Question\n    admin.site.register(Question)  #在管理网页中注册需要显示的Question\n    ```\n    这时后台会自动为Question生成一些管理表单。\n\n## 二、自定义管理表单\n\n上面只是简单的注册了Question，然后让django自动生成表单。接下来要自定义表单显示的方式。\n1. 把publication date放在Question text的前面显示，还是在polls/admin.py中，只是用以下代码替代admin.site.register(Question) ：\n``` python\nclass QuestionAdmin(admin.ModelAdmin):\n   fields = ['pub_date', 'question_text']\nadmin.site.register(Question,QuestionAdmin)\n```\n    同样，以后也可以自定义其他的管理对象，然后作为register()函数的第二个参数。\n\n2. 当Question字段太多的时候，需要把它们分开显示，这时就可以用下面的代码代替上面的代码：\n``` python\nclass QuestionAdmin(admin.ModelAdmin):\n   fieldsets = [\n       (None,               {'fields':['question_text']}),\n       ('Date information', {'fields': ['pub_date']}),\n    ]\nadmin.site.register(Question,QuestionAdmin)\n```\n \n3. 一个Question对应多个Choice,所以需要将多个Choice显示在一个Question下，在polls/admin.py中用如下代码实现：\n```\nfrom django.contrib import admin\nfrom .models import Choice, Question\nclass ChoiceInline(admin.StackedInline):\n   model = Choice\n   extra = 3\nclass QuestionAdmin(admin.ModelAdmin):\n   fieldsets = [\n       (None,               {'fields':['question_text']}),\n       ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),#日期信息这一栏设置了可隐藏\n    ]\n   inlines = [ChoiceInline]\nadmin.site.register(Question,QuestionAdmin)\n```\n \n4. 当一个问题的投票选项太多的时候，上面那样的Choice每条都比较占空间，不够简洁，如下修改ChoiceInline继承的类为TabularInline：\n```\n   class ChoiceInline(admin.TabularInline):\n       #...\n```\n    这样每个Question下面每个Choice就分两列罗列出来，简洁明了。\n\n    关于表单的自定义，如各种元素的显示方式，都可以参考官方文档的ModelAdmin ：https://docs.djangoproject.com/en/1.8/ref/contrib/admin/#django.contrib.admin.ModelAdmin\n\n## 三、自定义自己项目的template\n之前是django自动生成的template，从而定义的后台管理界面的风格和显示内容，现在要自己自定义自己项目的template，这样就可以在自己项目的template里修改代码，定制界面风格。根据以下步骤可以完成这个任务：\n\n1. 在项目目录下（即与manage.py同层次的目录）创建一个template文件夹，然后在mysite/settings.py中的DIRS选项中添加如下代码：\n```\n'DIRS':[os.path.join(BASE_DIR, 'templates')],\n```\n\n2. 在刚创建的template文件夹下再创建admin文件夹，然后在Django的安装目录django\\contrib\\admin\\templates\\admin文件夹下，把相关的html文件复制到刚刚创建的admin下，如把admin/base_site.html复制到刚创建的admin中。\n\n3. 然后打开base_site.html编辑代码如下：\n```\n{%block branding %}\n<h1 id=\"site-name\"><ahref=\"{% url 'admin:index' %}\">PollsAdministration</a></h1>\n{% endblock %}\n```\n    这样标题就会变为PollsAdministration.\n\n4. 同理可以自定义其他的内容格式，一样的从django/admin目录里复制html文件到自己创建的admin中，修改其中的代码。\n\n---","source":"_posts/Django搭建简单网页（admin）.md","raw":"---\ntitle: Django搭建简单网页（admin）\ntags:\n  - Python\n  - Django\ncategories:\n  - 原创\n  - Python\ncopyright: true\nabbrlink: 9a5c839\ndate: 2015-09-22 22:01:55\ntoc: true\n---\n## 一、运行后台管理\n\n1. 创建超级用户以便于登录到后台管理\n```python\n    python manage.py createsuperuser\n```\n    接着输入用户名，邮箱，密码完成创建\n\n2. 运行服务程序：\n```\npython manage.py runserver\n```\n    然后在浏览器里输入：http://127.0.0.1:8000/admin/, 在登录界面完成登录就可以进入管理界面了。\n<!--more-->\n3. 为了在后台管理界面中显示我们编写的应用polls，需要在polls/admin.py中添加如下代码：\n``` python\nfrom django.contrib import admin\nfrom .models import Question\nadmin.site.register(Question)  #在管理网页中注册需要显示的Question\n```\n    这时后台会自动为Question生成一些管理表单。\n    为了在后台管理界面中显示我们编写的应用polls，需要在polls/admin.py中添加如下代码：\n    ```\n    from django.contrib import admin\n    from .models import Question\n    admin.site.register(Question)  #在管理网页中注册需要显示的Question\n    ```\n    这时后台会自动为Question生成一些管理表单。\n\n## 二、自定义管理表单\n\n上面只是简单的注册了Question，然后让django自动生成表单。接下来要自定义表单显示的方式。\n1. 把publication date放在Question text的前面显示，还是在polls/admin.py中，只是用以下代码替代admin.site.register(Question) ：\n``` python\nclass QuestionAdmin(admin.ModelAdmin):\n   fields = ['pub_date', 'question_text']\nadmin.site.register(Question,QuestionAdmin)\n```\n    同样，以后也可以自定义其他的管理对象，然后作为register()函数的第二个参数。\n\n2. 当Question字段太多的时候，需要把它们分开显示，这时就可以用下面的代码代替上面的代码：\n``` python\nclass QuestionAdmin(admin.ModelAdmin):\n   fieldsets = [\n       (None,               {'fields':['question_text']}),\n       ('Date information', {'fields': ['pub_date']}),\n    ]\nadmin.site.register(Question,QuestionAdmin)\n```\n \n3. 一个Question对应多个Choice,所以需要将多个Choice显示在一个Question下，在polls/admin.py中用如下代码实现：\n```\nfrom django.contrib import admin\nfrom .models import Choice, Question\nclass ChoiceInline(admin.StackedInline):\n   model = Choice\n   extra = 3\nclass QuestionAdmin(admin.ModelAdmin):\n   fieldsets = [\n       (None,               {'fields':['question_text']}),\n       ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),#日期信息这一栏设置了可隐藏\n    ]\n   inlines = [ChoiceInline]\nadmin.site.register(Question,QuestionAdmin)\n```\n \n4. 当一个问题的投票选项太多的时候，上面那样的Choice每条都比较占空间，不够简洁，如下修改ChoiceInline继承的类为TabularInline：\n```\n   class ChoiceInline(admin.TabularInline):\n       #...\n```\n    这样每个Question下面每个Choice就分两列罗列出来，简洁明了。\n\n    关于表单的自定义，如各种元素的显示方式，都可以参考官方文档的ModelAdmin ：https://docs.djangoproject.com/en/1.8/ref/contrib/admin/#django.contrib.admin.ModelAdmin\n\n## 三、自定义自己项目的template\n之前是django自动生成的template，从而定义的后台管理界面的风格和显示内容，现在要自己自定义自己项目的template，这样就可以在自己项目的template里修改代码，定制界面风格。根据以下步骤可以完成这个任务：\n\n1. 在项目目录下（即与manage.py同层次的目录）创建一个template文件夹，然后在mysite/settings.py中的DIRS选项中添加如下代码：\n```\n'DIRS':[os.path.join(BASE_DIR, 'templates')],\n```\n\n2. 在刚创建的template文件夹下再创建admin文件夹，然后在Django的安装目录django\\contrib\\admin\\templates\\admin文件夹下，把相关的html文件复制到刚刚创建的admin下，如把admin/base_site.html复制到刚创建的admin中。\n\n3. 然后打开base_site.html编辑代码如下：\n```\n{%block branding %}\n<h1 id=\"site-name\"><ahref=\"{% url 'admin:index' %}\">PollsAdministration</a></h1>\n{% endblock %}\n```\n    这样标题就会变为PollsAdministration.\n\n4. 同理可以自定义其他的内容格式，一样的从django/admin目录里复制html文件到自己创建的admin中，修改其中的代码。\n\n---","slug":"Django搭建简单网页（admin）","published":1,"updated":"2019-03-03T06:42:00.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtojsgsy0007kaq4atiq1rae","content":"<h2 id=\"一、运行后台管理\"><a href=\"#一、运行后台管理\" class=\"headerlink\" title=\"一、运行后台管理\"></a>一、运行后台管理</h2><ol>\n<li><p>创建超级用户以便于登录到后台管理</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    python manage.py createsuperuser</span><br></pre></td></tr></table></figure>\n<p> 接着输入用户名，邮箱，密码完成创建</p>\n</li>\n<li><p>运行服务程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py runserver</span><br></pre></td></tr></table></figure>\n<p> 然后在浏览器里输入：<a href=\"http://127.0.0.1:8000/admin/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/admin/</a>, 在登录界面完成登录就可以进入管理界面了。</p>\n<a id=\"more\"></a></li>\n<li><p>为了在后台管理界面中显示我们编写的应用polls，需要在polls/admin.py中添加如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question</span><br><span class=\"line\">admin.site.register(Question)  <span class=\"comment\">#在管理网页中注册需要显示的Question</span></span><br></pre></td></tr></table></figure>\n<p> 这时后台会自动为Question生成一些管理表单。<br> 为了在后台管理界面中显示我们编写的应用polls，需要在polls/admin.py中添加如下代码：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from .models import Question</span><br><span class=\"line\">admin.site.register(Question)  #在管理网页中注册需要显示的Question</span><br></pre></td></tr></table></figure>\n<p> 这时后台会自动为Question生成一些管理表单。</p>\n</li>\n</ol>\n<h2 id=\"二、自定义管理表单\"><a href=\"#二、自定义管理表单\" class=\"headerlink\" title=\"二、自定义管理表单\"></a>二、自定义管理表单</h2><p>上面只是简单的注册了Question，然后让django自动生成表单。接下来要自定义表单显示的方式。</p>\n<ol>\n<li><p>把publication date放在Question text的前面显示，还是在polls/admin.py中，只是用以下代码替代admin.site.register(Question) ：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuestionAdmin</span><span class=\"params\">(admin.ModelAdmin)</span>:</span></span><br><span class=\"line\">   fields = [<span class=\"string\">'pub_date'</span>, <span class=\"string\">'question_text'</span>]</span><br><span class=\"line\">admin.site.register(Question,QuestionAdmin)</span><br></pre></td></tr></table></figure>\n<p> 同样，以后也可以自定义其他的管理对象，然后作为register()函数的第二个参数。</p>\n</li>\n<li><p>当Question字段太多的时候，需要把它们分开显示，这时就可以用下面的代码代替上面的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuestionAdmin</span><span class=\"params\">(admin.ModelAdmin)</span>:</span></span><br><span class=\"line\">   fieldsets = [</span><br><span class=\"line\">       (<span class=\"keyword\">None</span>,               &#123;<span class=\"string\">'fields'</span>:[<span class=\"string\">'question_text'</span>]&#125;),</span><br><span class=\"line\">       (<span class=\"string\">'Date information'</span>, &#123;<span class=\"string\">'fields'</span>: [<span class=\"string\">'pub_date'</span>]&#125;),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">admin.site.register(Question,QuestionAdmin)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"3\">\n<li>一个Question对应多个Choice,所以需要将多个Choice显示在一个Question下，在polls/admin.py中用如下代码实现：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from .models import Choice, Question</span><br><span class=\"line\">class ChoiceInline(admin.StackedInline):</span><br><span class=\"line\">   model = Choice</span><br><span class=\"line\">   extra = 3</span><br><span class=\"line\">class QuestionAdmin(admin.ModelAdmin):</span><br><span class=\"line\">   fieldsets = [</span><br><span class=\"line\">       (None,               &#123;&apos;fields&apos;:[&apos;question_text&apos;]&#125;),</span><br><span class=\"line\">       (&apos;Date information&apos;, &#123;&apos;fields&apos;: [&apos;pub_date&apos;], &apos;classes&apos;: [&apos;collapse&apos;]&#125;),#日期信息这一栏设置了可隐藏</span><br><span class=\"line\">    ]</span><br><span class=\"line\">   inlines = [ChoiceInline]</span><br><span class=\"line\">admin.site.register(Question,QuestionAdmin)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>当一个问题的投票选项太多的时候，上面那样的Choice每条都比较占空间，不够简洁，如下修改ChoiceInline继承的类为TabularInline：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   class ChoiceInline(admin.TabularInline):</span><br><span class=\"line\">       #...</span><br></pre></td></tr></table></figure>\n<p> 这样每个Question下面每个Choice就分两列罗列出来，简洁明了。</p>\n<p> 关于表单的自定义，如各种元素的显示方式，都可以参考官方文档的ModelAdmin ：<a href=\"https://docs.djangoproject.com/en/1.8/ref/contrib/admin/#django.contrib.admin.ModelAdmin\" target=\"_blank\" rel=\"noopener\">https://docs.djangoproject.com/en/1.8/ref/contrib/admin/#django.contrib.admin.ModelAdmin</a></p>\n</li>\n</ol>\n<h2 id=\"三、自定义自己项目的template\"><a href=\"#三、自定义自己项目的template\" class=\"headerlink\" title=\"三、自定义自己项目的template\"></a>三、自定义自己项目的template</h2><p>之前是django自动生成的template，从而定义的后台管理界面的风格和显示内容，现在要自己自定义自己项目的template，这样就可以在自己项目的template里修改代码，定制界面风格。根据以下步骤可以完成这个任务：</p>\n<ol>\n<li><p>在项目目录下（即与manage.py同层次的目录）创建一个template文件夹，然后在mysite/settings.py中的DIRS选项中添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;DIRS&apos;:[os.path.join(BASE_DIR, &apos;templates&apos;)],</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在刚创建的template文件夹下再创建admin文件夹，然后在Django的安装目录django\\contrib\\admin\\templates\\admin文件夹下，把相关的html文件复制到刚刚创建的admin下，如把admin/base_site.html复制到刚创建的admin中。</p>\n</li>\n<li><p>然后打开base_site.html编辑代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%block branding %&#125;</span><br><span class=\"line\">&lt;h1 id=&quot;site-name&quot;&gt;&lt;ahref=&quot;&#123;% url &apos;admin:index&apos; %&#125;&quot;&gt;PollsAdministration&lt;/a&gt;&lt;/h1&gt;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n<p> 这样标题就会变为PollsAdministration.</p>\n</li>\n<li><p>同理可以自定义其他的内容格式，一样的从django/admin目录里复制html文件到自己创建的admin中，修改其中的代码。</p>\n</li>\n</ol>\n<hr>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、运行后台管理\"><a href=\"#一、运行后台管理\" class=\"headerlink\" title=\"一、运行后台管理\"></a>一、运行后台管理</h2><ol>\n<li><p>创建超级用户以便于登录到后台管理</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    python manage.py createsuperuser</span><br></pre></td></tr></table></figure>\n<p> 接着输入用户名，邮箱，密码完成创建</p>\n</li>\n<li><p>运行服务程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py runserver</span><br></pre></td></tr></table></figure>\n<p> 然后在浏览器里输入：<a href=\"http://127.0.0.1:8000/admin/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/admin/</a>, 在登录界面完成登录就可以进入管理界面了。</p>","more":"</li>\n<li><p>为了在后台管理界面中显示我们编写的应用polls，需要在polls/admin.py中添加如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question</span><br><span class=\"line\">admin.site.register(Question)  <span class=\"comment\">#在管理网页中注册需要显示的Question</span></span><br></pre></td></tr></table></figure>\n<p> 这时后台会自动为Question生成一些管理表单。<br> 为了在后台管理界面中显示我们编写的应用polls，需要在polls/admin.py中添加如下代码：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from .models import Question</span><br><span class=\"line\">admin.site.register(Question)  #在管理网页中注册需要显示的Question</span><br></pre></td></tr></table></figure>\n<p> 这时后台会自动为Question生成一些管理表单。</p>\n</li>\n</ol>\n<h2 id=\"二、自定义管理表单\"><a href=\"#二、自定义管理表单\" class=\"headerlink\" title=\"二、自定义管理表单\"></a>二、自定义管理表单</h2><p>上面只是简单的注册了Question，然后让django自动生成表单。接下来要自定义表单显示的方式。</p>\n<ol>\n<li><p>把publication date放在Question text的前面显示，还是在polls/admin.py中，只是用以下代码替代admin.site.register(Question) ：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuestionAdmin</span><span class=\"params\">(admin.ModelAdmin)</span>:</span></span><br><span class=\"line\">   fields = [<span class=\"string\">'pub_date'</span>, <span class=\"string\">'question_text'</span>]</span><br><span class=\"line\">admin.site.register(Question,QuestionAdmin)</span><br></pre></td></tr></table></figure>\n<p> 同样，以后也可以自定义其他的管理对象，然后作为register()函数的第二个参数。</p>\n</li>\n<li><p>当Question字段太多的时候，需要把它们分开显示，这时就可以用下面的代码代替上面的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuestionAdmin</span><span class=\"params\">(admin.ModelAdmin)</span>:</span></span><br><span class=\"line\">   fieldsets = [</span><br><span class=\"line\">       (<span class=\"keyword\">None</span>,               &#123;<span class=\"string\">'fields'</span>:[<span class=\"string\">'question_text'</span>]&#125;),</span><br><span class=\"line\">       (<span class=\"string\">'Date information'</span>, &#123;<span class=\"string\">'fields'</span>: [<span class=\"string\">'pub_date'</span>]&#125;),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">admin.site.register(Question,QuestionAdmin)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"3\">\n<li>一个Question对应多个Choice,所以需要将多个Choice显示在一个Question下，在polls/admin.py中用如下代码实现：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from .models import Choice, Question</span><br><span class=\"line\">class ChoiceInline(admin.StackedInline):</span><br><span class=\"line\">   model = Choice</span><br><span class=\"line\">   extra = 3</span><br><span class=\"line\">class QuestionAdmin(admin.ModelAdmin):</span><br><span class=\"line\">   fieldsets = [</span><br><span class=\"line\">       (None,               &#123;&apos;fields&apos;:[&apos;question_text&apos;]&#125;),</span><br><span class=\"line\">       (&apos;Date information&apos;, &#123;&apos;fields&apos;: [&apos;pub_date&apos;], &apos;classes&apos;: [&apos;collapse&apos;]&#125;),#日期信息这一栏设置了可隐藏</span><br><span class=\"line\">    ]</span><br><span class=\"line\">   inlines = [ChoiceInline]</span><br><span class=\"line\">admin.site.register(Question,QuestionAdmin)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>当一个问题的投票选项太多的时候，上面那样的Choice每条都比较占空间，不够简洁，如下修改ChoiceInline继承的类为TabularInline：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   class ChoiceInline(admin.TabularInline):</span><br><span class=\"line\">       #...</span><br></pre></td></tr></table></figure>\n<p> 这样每个Question下面每个Choice就分两列罗列出来，简洁明了。</p>\n<p> 关于表单的自定义，如各种元素的显示方式，都可以参考官方文档的ModelAdmin ：<a href=\"https://docs.djangoproject.com/en/1.8/ref/contrib/admin/#django.contrib.admin.ModelAdmin\" target=\"_blank\" rel=\"noopener\">https://docs.djangoproject.com/en/1.8/ref/contrib/admin/#django.contrib.admin.ModelAdmin</a></p>\n</li>\n</ol>\n<h2 id=\"三、自定义自己项目的template\"><a href=\"#三、自定义自己项目的template\" class=\"headerlink\" title=\"三、自定义自己项目的template\"></a>三、自定义自己项目的template</h2><p>之前是django自动生成的template，从而定义的后台管理界面的风格和显示内容，现在要自己自定义自己项目的template，这样就可以在自己项目的template里修改代码，定制界面风格。根据以下步骤可以完成这个任务：</p>\n<ol>\n<li><p>在项目目录下（即与manage.py同层次的目录）创建一个template文件夹，然后在mysite/settings.py中的DIRS选项中添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;DIRS&apos;:[os.path.join(BASE_DIR, &apos;templates&apos;)],</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在刚创建的template文件夹下再创建admin文件夹，然后在Django的安装目录django\\contrib\\admin\\templates\\admin文件夹下，把相关的html文件复制到刚刚创建的admin下，如把admin/base_site.html复制到刚创建的admin中。</p>\n</li>\n<li><p>然后打开base_site.html编辑代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%block branding %&#125;</span><br><span class=\"line\">&lt;h1 id=&quot;site-name&quot;&gt;&lt;ahref=&quot;&#123;% url &apos;admin:index&apos; %&#125;&quot;&gt;PollsAdministration&lt;/a&gt;&lt;/h1&gt;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n<p> 这样标题就会变为PollsAdministration.</p>\n</li>\n<li><p>同理可以自定义其他的内容格式，一样的从django/admin目录里复制html文件到自己创建的admin中，修改其中的代码。</p>\n</li>\n</ol>\n<hr>"},{"title":"Django搭建简单网页（models）","copyright":true,"abbrlink":"1f3cc00","date":"2015-09-22T03:25:41.000Z","_content":"## 一、创建一个django工程\n\n1. 选择一个工作目录，然后用下面命令行创建一个project\n```\ndjango-admin startproject mysite\n```\n    创建后的目录如下所示：\n    ```\n    mysite/\n       manage.py\n       mysite/\n           __init__.py\n           settings.py\n           urls.py\n           wsgi.py\n    ```\n<!--more-->\n2. 可以去mysite/settings.py中设置数据库，默认为sqlite3\n3. 使用数据库之前，得先在数据库中创建表。用如下命令：\n```\npython manage.py migrate\n```\n4. 启动django服务程序： \n```\npython manage.py runserver\n```\n5. 在浏览器中输入地址http://127.0.0.1:8000/ 就可以访问初始界面。\n\n## 二、创建models\n1. 在项目目录下创建自己的app应用程序，app名为polls，使用如下命令：\n```\npython manage.py startapp polls\n```\n    则app的目录结构如下：\n    ```\n    polls/\n        __init__.py\n       admin.py\n       migrations/\n           __init__.py\n       models.py\n       tests.py\n       views.py\n    ```\n2. 在polls的models.py文件里编写代码如下：\n```\nfrom django.dbimport models\n\nclassQuestion(models.Model):\n\n    question_text =models.CharField(max_length=200)\n\n    pub_date = models.DateTimeField('datepublished')\n\nclassChoice(models.Model):\n\n    question = models.ForeignKey(Question)\n\n    choice_text =models.CharField(max_length=200)\n\n    votes = models.IntegerField(default=0)\n```\n    每个类对应数据库里的一个表，类中的成员变量对应表中的字段，即列项。\n3. 激活models，在mysite/settings.py中添加应用的名字polls，如下：\n```\nINSTALLED_APPS = (\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'polls',\n)\n```\n4. Django 知道包含了我们自己的应用polls，再用以下命令行告诉django你对models做了改变，一开始是添加了model，以后每次改变了models都要使用这条命令：\n```\nPython manage.py makemigrations polls\n```\n5. 再次使用 python manage.py migrate为所有的models在数据库中创建表\n6. 以后每次改变models的时候，更新数据库直接使用如下步骤：\n   （1）在models.py改变models\n   （2）运行命令： python manage.py makemigrations 为改变创建migration\n   （3）运行命令：python manage.py migrate 在数据库中改变表\n\n7. 使用django数据库的api，打开python的shell：\n```    \npython manage.py shell\n```\n    在shell中可以使用django的database api对models进行操作。\n    比如：\n    ```\n    >>> from polls.models import Question, Choice  \n\n    >>> Question.objects.all()\n\n    []\n\n    >>> from django.utils import timezone\n\n    >>> q = Question(question_text=\"What's new?\",pub_date=timezone.now())\n\n    # Save the objectinto the database. You have to call save() explicitly.\n\n    >>> q.save()\n\n    >>> q.id\n\n    1\n\n    # Access modelfield values via Python attributes.\n\n    >>> q.question_text\n\n    \"What'snew?\"\n\n    >>> q.pub_date\n\n    datetime.datetime(2012,2, 26, 13, 0, 0, 775217, tzinfo=<UTC>)\n\n    # Change values bychanging the attributes, then calling save().\n\n    >>> q.question_text = \"What's up?\"\n\n    >>> q.save()\n\n    # objects.all()displays all the questions in the database.\n\n    >>> Question.objects.all()\n\n    [<Question:Question object>]\n    ```\n\n---","source":"_posts/Django搭建简单网页（models）.md","raw":"---\ntitle: Django搭建简单网页（models）\ntags:\n  - Python\n  - Django\ncategories:\n  - 原创\n  - Python\ncopyright: true\nabbrlink: 1f3cc00\ndate: 2015-09-22 11:25:41\n---\n## 一、创建一个django工程\n\n1. 选择一个工作目录，然后用下面命令行创建一个project\n```\ndjango-admin startproject mysite\n```\n    创建后的目录如下所示：\n    ```\n    mysite/\n       manage.py\n       mysite/\n           __init__.py\n           settings.py\n           urls.py\n           wsgi.py\n    ```\n<!--more-->\n2. 可以去mysite/settings.py中设置数据库，默认为sqlite3\n3. 使用数据库之前，得先在数据库中创建表。用如下命令：\n```\npython manage.py migrate\n```\n4. 启动django服务程序： \n```\npython manage.py runserver\n```\n5. 在浏览器中输入地址http://127.0.0.1:8000/ 就可以访问初始界面。\n\n## 二、创建models\n1. 在项目目录下创建自己的app应用程序，app名为polls，使用如下命令：\n```\npython manage.py startapp polls\n```\n    则app的目录结构如下：\n    ```\n    polls/\n        __init__.py\n       admin.py\n       migrations/\n           __init__.py\n       models.py\n       tests.py\n       views.py\n    ```\n2. 在polls的models.py文件里编写代码如下：\n```\nfrom django.dbimport models\n\nclassQuestion(models.Model):\n\n    question_text =models.CharField(max_length=200)\n\n    pub_date = models.DateTimeField('datepublished')\n\nclassChoice(models.Model):\n\n    question = models.ForeignKey(Question)\n\n    choice_text =models.CharField(max_length=200)\n\n    votes = models.IntegerField(default=0)\n```\n    每个类对应数据库里的一个表，类中的成员变量对应表中的字段，即列项。\n3. 激活models，在mysite/settings.py中添加应用的名字polls，如下：\n```\nINSTALLED_APPS = (\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'polls',\n)\n```\n4. Django 知道包含了我们自己的应用polls，再用以下命令行告诉django你对models做了改变，一开始是添加了model，以后每次改变了models都要使用这条命令：\n```\nPython manage.py makemigrations polls\n```\n5. 再次使用 python manage.py migrate为所有的models在数据库中创建表\n6. 以后每次改变models的时候，更新数据库直接使用如下步骤：\n   （1）在models.py改变models\n   （2）运行命令： python manage.py makemigrations 为改变创建migration\n   （3）运行命令：python manage.py migrate 在数据库中改变表\n\n7. 使用django数据库的api，打开python的shell：\n```    \npython manage.py shell\n```\n    在shell中可以使用django的database api对models进行操作。\n    比如：\n    ```\n    >>> from polls.models import Question, Choice  \n\n    >>> Question.objects.all()\n\n    []\n\n    >>> from django.utils import timezone\n\n    >>> q = Question(question_text=\"What's new?\",pub_date=timezone.now())\n\n    # Save the objectinto the database. You have to call save() explicitly.\n\n    >>> q.save()\n\n    >>> q.id\n\n    1\n\n    # Access modelfield values via Python attributes.\n\n    >>> q.question_text\n\n    \"What'snew?\"\n\n    >>> q.pub_date\n\n    datetime.datetime(2012,2, 26, 13, 0, 0, 775217, tzinfo=<UTC>)\n\n    # Change values bychanging the attributes, then calling save().\n\n    >>> q.question_text = \"What's up?\"\n\n    >>> q.save()\n\n    # objects.all()displays all the questions in the database.\n\n    >>> Question.objects.all()\n\n    [<Question:Question object>]\n    ```\n\n---","slug":"Django搭建简单网页（models）","published":1,"updated":"2019-03-03T06:41:37.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtojsgt00009kaq4e2hgg8w0","content":"<h2 id=\"一、创建一个django工程\"><a href=\"#一、创建一个django工程\" class=\"headerlink\" title=\"一、创建一个django工程\"></a>一、创建一个django工程</h2><ol>\n<li><p>选择一个工作目录，然后用下面命令行创建一个project</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django-admin startproject mysite</span><br></pre></td></tr></table></figure>\n<p> 创建后的目录如下所示：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysite/</span><br><span class=\"line\">   manage.py</span><br><span class=\"line\">   mysite/</span><br><span class=\"line\">       __init__.py</span><br><span class=\"line\">       settings.py</span><br><span class=\"line\">       urls.py</span><br><span class=\"line\">       wsgi.py</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"2\">\n<li>可以去mysite/settings.py中设置数据库，默认为sqlite3</li>\n<li><p>使用数据库之前，得先在数据库中创建表。用如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py migrate</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动django服务程序： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py runserver</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在浏览器中输入地址<a href=\"http://127.0.0.1:8000/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/</a> 就可以访问初始界面。</p>\n</li>\n</ol>\n<h2 id=\"二、创建models\"><a href=\"#二、创建models\" class=\"headerlink\" title=\"二、创建models\"></a>二、创建models</h2><ol>\n<li><p>在项目目录下创建自己的app应用程序，app名为polls，使用如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py startapp polls</span><br></pre></td></tr></table></figure>\n<p> 则app的目录结构如下：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">polls/</span><br><span class=\"line\">    __init__.py</span><br><span class=\"line\">   admin.py</span><br><span class=\"line\">   migrations/</span><br><span class=\"line\">       __init__.py</span><br><span class=\"line\">   models.py</span><br><span class=\"line\">   tests.py</span><br><span class=\"line\">   views.py</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在polls的models.py文件里编写代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.dbimport models</span><br><span class=\"line\"></span><br><span class=\"line\">classQuestion(models.Model):</span><br><span class=\"line\"></span><br><span class=\"line\">    question_text =models.CharField(max_length=200)</span><br><span class=\"line\"></span><br><span class=\"line\">    pub_date = models.DateTimeField(&apos;datepublished&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">classChoice(models.Model):</span><br><span class=\"line\"></span><br><span class=\"line\">    question = models.ForeignKey(Question)</span><br><span class=\"line\"></span><br><span class=\"line\">    choice_text =models.CharField(max_length=200)</span><br><span class=\"line\"></span><br><span class=\"line\">    votes = models.IntegerField(default=0)</span><br></pre></td></tr></table></figure>\n<p> 每个类对应数据库里的一个表，类中的成员变量对应表中的字段，即列项。</p>\n</li>\n<li><p>激活models，在mysite/settings.py中添加应用的名字polls，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = (</span><br><span class=\"line\">    &apos;django.contrib.admin&apos;,</span><br><span class=\"line\">    &apos;django.contrib.auth&apos;,</span><br><span class=\"line\">    &apos;django.contrib.contenttypes&apos;,</span><br><span class=\"line\">    &apos;django.contrib.sessions&apos;,</span><br><span class=\"line\">    &apos;django.contrib.messages&apos;,</span><br><span class=\"line\">    &apos;django.contrib.staticfiles&apos;,</span><br><span class=\"line\">    &apos;polls&apos;,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Django 知道包含了我们自己的应用polls，再用以下命令行告诉django你对models做了改变，一开始是添加了model，以后每次改变了models都要使用这条命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python manage.py makemigrations polls</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再次使用 python manage.py migrate为所有的models在数据库中创建表</p>\n</li>\n<li><p>以后每次改变models的时候，更新数据库直接使用如下步骤：<br>（1）在models.py改变models<br>（2）运行命令： python manage.py makemigrations 为改变创建migration<br>（3）运行命令：python manage.py migrate 在数据库中改变表</p>\n</li>\n<li><p>使用django数据库的api，打开python的shell：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py shell</span><br></pre></td></tr></table></figure>\n<p> 在shell中可以使用django的database api对models进行操作。<br> 比如：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from polls.models import Question, Choice  </span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; Question.objects.all()</span><br><span class=\"line\"></span><br><span class=\"line\">[]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; from django.utils import timezone</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; q = Question(question_text=&quot;What&apos;s new?&quot;,pub_date=timezone.now())</span><br><span class=\"line\"></span><br><span class=\"line\"># Save the objectinto the database. You have to call save() explicitly.</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; q.save()</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; q.id</span><br><span class=\"line\"></span><br><span class=\"line\">1</span><br><span class=\"line\"></span><br><span class=\"line\"># Access modelfield values via Python attributes.</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; q.question_text</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;What&apos;snew?&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; q.pub_date</span><br><span class=\"line\"></span><br><span class=\"line\">datetime.datetime(2012,2, 26, 13, 0, 0, 775217, tzinfo=&lt;UTC&gt;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Change values bychanging the attributes, then calling save().</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; q.question_text = &quot;What&apos;s up?&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; q.save()</span><br><span class=\"line\"></span><br><span class=\"line\"># objects.all()displays all the questions in the database.</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; Question.objects.all()</span><br><span class=\"line\"></span><br><span class=\"line\">[&lt;Question:Question object&gt;]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、创建一个django工程\"><a href=\"#一、创建一个django工程\" class=\"headerlink\" title=\"一、创建一个django工程\"></a>一、创建一个django工程</h2><ol>\n<li><p>选择一个工作目录，然后用下面命令行创建一个project</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django-admin startproject mysite</span><br></pre></td></tr></table></figure>\n<p> 创建后的目录如下所示：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysite/</span><br><span class=\"line\">   manage.py</span><br><span class=\"line\">   mysite/</span><br><span class=\"line\">       __init__.py</span><br><span class=\"line\">       settings.py</span><br><span class=\"line\">       urls.py</span><br><span class=\"line\">       wsgi.py</span><br></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol start=\"2\">\n<li>可以去mysite/settings.py中设置数据库，默认为sqlite3</li>\n<li><p>使用数据库之前，得先在数据库中创建表。用如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py migrate</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动django服务程序： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py runserver</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在浏览器中输入地址<a href=\"http://127.0.0.1:8000/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/</a> 就可以访问初始界面。</p>\n</li>\n</ol>\n<h2 id=\"二、创建models\"><a href=\"#二、创建models\" class=\"headerlink\" title=\"二、创建models\"></a>二、创建models</h2><ol>\n<li><p>在项目目录下创建自己的app应用程序，app名为polls，使用如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py startapp polls</span><br></pre></td></tr></table></figure>\n<p> 则app的目录结构如下：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">polls/</span><br><span class=\"line\">    __init__.py</span><br><span class=\"line\">   admin.py</span><br><span class=\"line\">   migrations/</span><br><span class=\"line\">       __init__.py</span><br><span class=\"line\">   models.py</span><br><span class=\"line\">   tests.py</span><br><span class=\"line\">   views.py</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在polls的models.py文件里编写代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.dbimport models</span><br><span class=\"line\"></span><br><span class=\"line\">classQuestion(models.Model):</span><br><span class=\"line\"></span><br><span class=\"line\">    question_text =models.CharField(max_length=200)</span><br><span class=\"line\"></span><br><span class=\"line\">    pub_date = models.DateTimeField(&apos;datepublished&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">classChoice(models.Model):</span><br><span class=\"line\"></span><br><span class=\"line\">    question = models.ForeignKey(Question)</span><br><span class=\"line\"></span><br><span class=\"line\">    choice_text =models.CharField(max_length=200)</span><br><span class=\"line\"></span><br><span class=\"line\">    votes = models.IntegerField(default=0)</span><br></pre></td></tr></table></figure>\n<p> 每个类对应数据库里的一个表，类中的成员变量对应表中的字段，即列项。</p>\n</li>\n<li><p>激活models，在mysite/settings.py中添加应用的名字polls，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = (</span><br><span class=\"line\">    &apos;django.contrib.admin&apos;,</span><br><span class=\"line\">    &apos;django.contrib.auth&apos;,</span><br><span class=\"line\">    &apos;django.contrib.contenttypes&apos;,</span><br><span class=\"line\">    &apos;django.contrib.sessions&apos;,</span><br><span class=\"line\">    &apos;django.contrib.messages&apos;,</span><br><span class=\"line\">    &apos;django.contrib.staticfiles&apos;,</span><br><span class=\"line\">    &apos;polls&apos;,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Django 知道包含了我们自己的应用polls，再用以下命令行告诉django你对models做了改变，一开始是添加了model，以后每次改变了models都要使用这条命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python manage.py makemigrations polls</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再次使用 python manage.py migrate为所有的models在数据库中创建表</p>\n</li>\n<li><p>以后每次改变models的时候，更新数据库直接使用如下步骤：<br>（1）在models.py改变models<br>（2）运行命令： python manage.py makemigrations 为改变创建migration<br>（3）运行命令：python manage.py migrate 在数据库中改变表</p>\n</li>\n<li><p>使用django数据库的api，打开python的shell：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py shell</span><br></pre></td></tr></table></figure>\n<p> 在shell中可以使用django的database api对models进行操作。<br> 比如：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from polls.models import Question, Choice  </span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; Question.objects.all()</span><br><span class=\"line\"></span><br><span class=\"line\">[]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; from django.utils import timezone</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; q = Question(question_text=&quot;What&apos;s new?&quot;,pub_date=timezone.now())</span><br><span class=\"line\"></span><br><span class=\"line\"># Save the objectinto the database. You have to call save() explicitly.</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; q.save()</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; q.id</span><br><span class=\"line\"></span><br><span class=\"line\">1</span><br><span class=\"line\"></span><br><span class=\"line\"># Access modelfield values via Python attributes.</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; q.question_text</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;What&apos;snew?&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; q.pub_date</span><br><span class=\"line\"></span><br><span class=\"line\">datetime.datetime(2012,2, 26, 13, 0, 0, 775217, tzinfo=&lt;UTC&gt;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Change values bychanging the attributes, then calling save().</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; q.question_text = &quot;What&apos;s up?&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; q.save()</span><br><span class=\"line\"></span><br><span class=\"line\"># objects.all()displays all the questions in the database.</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; Question.objects.all()</span><br><span class=\"line\"></span><br><span class=\"line\">[&lt;Question:Question object&gt;]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>"},{"title":"Floodligh Web UI显示的host比实际多且不会被清除的原因和解决方法","copyright":true,"abbrlink":"7d75af24","date":"2016-01-09T14:24:24.000Z","_content":"每次启动完floodlight控制器，在http://127.0.0.1:8080/ui/index.html 中打开floodlight的Web UI界面后，发现host总是会比我定义的多，打开拓扑图界面也很混乱。网上查了下，说是因为OVS的一个local port会去发现外部网络的拓扑，只要禁用OVS的这个端口就可以了，有兴趣的可以试试那个方法。下面是我的实验过程及解决方法。\n\n**命令：**\n```\nsudo mn --controller=remote,ip=127.0.0.1,port=6653 --topo=tree,2\n```\n<!--more-->\n**如下图：**\n<center>![图1](7d75af24/1.png)</center>\n<center>![图2](7d75af24/2.png)</center>\n这样都分不清哪个host是我定义的，交换机倒还好，都很清晰。\n\n所以我在用mininet创建网络拓扑的时候使用了如下命令：\n```\nsudo mn --controller=remote,ip=127.0.0.1,port=6653 --mac --topo=tree,2\n```\n多加了个mac参数，表示自动设置host的mac，会使我们的host的mac很有规律，如下图：\n<center>![图3](7d75af24/3.png)</center>\n虽然这样还没解决主机多出来几个的问题，但至少我们能很快分清哪几个使我们的host，这时的host的mac地址，会从00:00:00:00:00:01开始分配。\n\n**1. 方法一：**   \n最后我解决host多于实际的方法是先启动mininet，再启动floodlight，因为交换机启动时，链路需要协商，如果先启动floodlight，就会把这些数据包也记录下来。所以先启动mininet，等OVS稳定下来，再启动floodlight控制器，这样就不会把OVS协商链路时发现的一些主机也记录进去。\n<center>![图4](7d75af24/4.png)</center>\n<center>![图5](7d75af24/5.png)</center>\n虽然一开始，启动mininet时，不能连接上控制器，但在启动控制器后，mininet会主动与控制器连接。\n\n还有一个问题就是，当退出mininet后，UI上的交换机会立马没了，而主机还在。\n<center>![图6](7d75af24/6.png)</center>\n然后再用mininet创建网络，UI上的原来的host不变，host在这基础上又会增加几个，每次退出再创建都会多几个host。\n<center>![图7](7d75af24/7.png)</center>\n上面是我重复三次这样的过程后生成的host，本来只会生成四个host，如今已越来越多。这样很烦，解决的方法是，退出mininet后，就刷新一遍网页，注意不是直接按F5刷新，这样会出错，是再输一次：http://127.0.0.1:8080/ui/index.html 按回车。这时host才会从网页中清除：\n<center>![图8](7d75af24/8.png)</center>\n后面再创建拓扑的时候就重复上面的过程，先启动mininet，再启动floodlight，每次退出mininet，就刷新一遍网页。\n\n**2. 方法二：**\nGoogle查了下发现了其他的几种方法，试了下面的方法，感觉比之前的好了，但还是有点小问题，可能只是我机子的问题。仅作参考。\n在floodlight的日志输出里有很多IPv6的信息。所以这个解决方法是禁用IPv6。\n用命令：`sudo vim /etc/sysctl.conf` ，然后在最后添加下面三行：\n```\n    net.ipv6.conf.all.disable_ipv6 = 1\n    net.ipv6.conf.default.disable_ipv6 = 1\n    net.ipv6.conf.lo.disable_ipv6 = 1\n```\n保存后重启电脑或者运行：`sudo sysctl –p`\n上面那种禁用IPv6的方法不一定都适用，使用其他禁用方法也可以。\n\n**3. 方法三：**\n上面的方法二有时候不怎么好，后面我又找到了另外一种更彻底的方法：\n我的OVS版本是 2.0.1：\n<center>![图9](7d75af24/9.png)</center>\nUbuntu版本是3.13:\n<center>![图10](7d75af24/10.png)</center>\nGoogle上说是OVS版本和Ubuntu的问题，OVS 2.0.1版本支持Ubuntu 2.6.32 到 3.10，所以我的问题出在OVS版本太低，或者Ubuntu版本过高。解决方法是升级OVS或者降低Ubuntu版本。\n\n运行如下命令：\n```\nsudoapt-get install openvswitch-controller openvswitch-switchopenvswitch-datapath-source\n```\n把OVS更新到2.0.2：\n<center>![图11](7d75af24/11.png)</center>\n然后问题就解决了，至少目前是解决了，彻不彻底后面再看。\n\n----","source":"_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法.md","raw":"---\ntitle: Floodligh Web UI显示的host比实际多且不会被清除的原因和解决方法\ntags:\n  - SDN\n  - Floodlight\ncategories:\n  - 原创\n  - SDN\ncopyright: true\nabbrlink: 7d75af24\ndate: 2016-01-09 22:24:24\n---\n每次启动完floodlight控制器，在http://127.0.0.1:8080/ui/index.html 中打开floodlight的Web UI界面后，发现host总是会比我定义的多，打开拓扑图界面也很混乱。网上查了下，说是因为OVS的一个local port会去发现外部网络的拓扑，只要禁用OVS的这个端口就可以了，有兴趣的可以试试那个方法。下面是我的实验过程及解决方法。\n\n**命令：**\n```\nsudo mn --controller=remote,ip=127.0.0.1,port=6653 --topo=tree,2\n```\n<!--more-->\n**如下图：**\n<center>![图1](7d75af24/1.png)</center>\n<center>![图2](7d75af24/2.png)</center>\n这样都分不清哪个host是我定义的，交换机倒还好，都很清晰。\n\n所以我在用mininet创建网络拓扑的时候使用了如下命令：\n```\nsudo mn --controller=remote,ip=127.0.0.1,port=6653 --mac --topo=tree,2\n```\n多加了个mac参数，表示自动设置host的mac，会使我们的host的mac很有规律，如下图：\n<center>![图3](7d75af24/3.png)</center>\n虽然这样还没解决主机多出来几个的问题，但至少我们能很快分清哪几个使我们的host，这时的host的mac地址，会从00:00:00:00:00:01开始分配。\n\n**1. 方法一：**   \n最后我解决host多于实际的方法是先启动mininet，再启动floodlight，因为交换机启动时，链路需要协商，如果先启动floodlight，就会把这些数据包也记录下来。所以先启动mininet，等OVS稳定下来，再启动floodlight控制器，这样就不会把OVS协商链路时发现的一些主机也记录进去。\n<center>![图4](7d75af24/4.png)</center>\n<center>![图5](7d75af24/5.png)</center>\n虽然一开始，启动mininet时，不能连接上控制器，但在启动控制器后，mininet会主动与控制器连接。\n\n还有一个问题就是，当退出mininet后，UI上的交换机会立马没了，而主机还在。\n<center>![图6](7d75af24/6.png)</center>\n然后再用mininet创建网络，UI上的原来的host不变，host在这基础上又会增加几个，每次退出再创建都会多几个host。\n<center>![图7](7d75af24/7.png)</center>\n上面是我重复三次这样的过程后生成的host，本来只会生成四个host，如今已越来越多。这样很烦，解决的方法是，退出mininet后，就刷新一遍网页，注意不是直接按F5刷新，这样会出错，是再输一次：http://127.0.0.1:8080/ui/index.html 按回车。这时host才会从网页中清除：\n<center>![图8](7d75af24/8.png)</center>\n后面再创建拓扑的时候就重复上面的过程，先启动mininet，再启动floodlight，每次退出mininet，就刷新一遍网页。\n\n**2. 方法二：**\nGoogle查了下发现了其他的几种方法，试了下面的方法，感觉比之前的好了，但还是有点小问题，可能只是我机子的问题。仅作参考。\n在floodlight的日志输出里有很多IPv6的信息。所以这个解决方法是禁用IPv6。\n用命令：`sudo vim /etc/sysctl.conf` ，然后在最后添加下面三行：\n```\n    net.ipv6.conf.all.disable_ipv6 = 1\n    net.ipv6.conf.default.disable_ipv6 = 1\n    net.ipv6.conf.lo.disable_ipv6 = 1\n```\n保存后重启电脑或者运行：`sudo sysctl –p`\n上面那种禁用IPv6的方法不一定都适用，使用其他禁用方法也可以。\n\n**3. 方法三：**\n上面的方法二有时候不怎么好，后面我又找到了另外一种更彻底的方法：\n我的OVS版本是 2.0.1：\n<center>![图9](7d75af24/9.png)</center>\nUbuntu版本是3.13:\n<center>![图10](7d75af24/10.png)</center>\nGoogle上说是OVS版本和Ubuntu的问题，OVS 2.0.1版本支持Ubuntu 2.6.32 到 3.10，所以我的问题出在OVS版本太低，或者Ubuntu版本过高。解决方法是升级OVS或者降低Ubuntu版本。\n\n运行如下命令：\n```\nsudoapt-get install openvswitch-controller openvswitch-switchopenvswitch-datapath-source\n```\n把OVS更新到2.0.2：\n<center>![图11](7d75af24/11.png)</center>\n然后问题就解决了，至少目前是解决了，彻不彻底后面再看。\n\n----","slug":"Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法","published":1,"updated":"2019-03-03T06:41:20.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtojsgt3000bkaq4gym4005p","content":"<p>每次启动完floodlight控制器，在<a href=\"http://127.0.0.1:8080/ui/index.html\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/ui/index.html</a> 中打开floodlight的Web UI界面后，发现host总是会比我定义的多，打开拓扑图界面也很混乱。网上查了下，说是因为OVS的一个local port会去发现外部网络的拓扑，只要禁用OVS的这个端口就可以了，有兴趣的可以试试那个方法。下面是我的实验过程及解决方法。</p>\n<p><strong>命令：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mn --controller=remote,ip=127.0.0.1,port=6653 --topo=tree,2</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p><strong>如下图：</strong></p>\n<p><center><img src=\"7d75af24/1.png\" alt=\"图1\"></center></p>\n<p><center><img src=\"7d75af24/2.png\" alt=\"图2\"></center><br>这样都分不清哪个host是我定义的，交换机倒还好，都很清晰。</p>\n<p>所以我在用mininet创建网络拓扑的时候使用了如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mn --controller=remote,ip=127.0.0.1,port=6653 --mac --topo=tree,2</span><br></pre></td></tr></table></figure></p>\n<p>多加了个mac参数，表示自动设置host的mac，会使我们的host的mac很有规律，如下图：</p>\n<p><center><img src=\"7d75af24/3.png\" alt=\"图3\"></center><br>虽然这样还没解决主机多出来几个的问题，但至少我们能很快分清哪几个使我们的host，这时的host的mac地址，会从00:00:00:00:00:01开始分配。</p>\n<p><strong>1. 方法一：</strong><br>最后我解决host多于实际的方法是先启动mininet，再启动floodlight，因为交换机启动时，链路需要协商，如果先启动floodlight，就会把这些数据包也记录下来。所以先启动mininet，等OVS稳定下来，再启动floodlight控制器，这样就不会把OVS协商链路时发现的一些主机也记录进去。</p>\n<p><center><img src=\"7d75af24/4.png\" alt=\"图4\"></center></p>\n<p><center><img src=\"7d75af24/5.png\" alt=\"图5\"></center><br>虽然一开始，启动mininet时，不能连接上控制器，但在启动控制器后，mininet会主动与控制器连接。</p>\n<p>还有一个问题就是，当退出mininet后，UI上的交换机会立马没了，而主机还在。</p>\n<p><center><img src=\"7d75af24/6.png\" alt=\"图6\"></center><br>然后再用mininet创建网络，UI上的原来的host不变，host在这基础上又会增加几个，每次退出再创建都会多几个host。</p>\n<p><center><img src=\"7d75af24/7.png\" alt=\"图7\"></center><br>上面是我重复三次这样的过程后生成的host，本来只会生成四个host，如今已越来越多。这样很烦，解决的方法是，退出mininet后，就刷新一遍网页，注意不是直接按F5刷新，这样会出错，是再输一次：<a href=\"http://127.0.0.1:8080/ui/index.html\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/ui/index.html</a> 按回车。这时host才会从网页中清除：</p>\n<p><center><img src=\"7d75af24/8.png\" alt=\"图8\"></center><br>后面再创建拓扑的时候就重复上面的过程，先启动mininet，再启动floodlight，每次退出mininet，就刷新一遍网页。</p>\n<p><strong>2. 方法二：</strong><br>Google查了下发现了其他的几种方法，试了下面的方法，感觉比之前的好了，但还是有点小问题，可能只是我机子的问题。仅作参考。<br>在floodlight的日志输出里有很多IPv6的信息。所以这个解决方法是禁用IPv6。<br>用命令：<code>sudo vim /etc/sysctl.conf</code> ，然后在最后添加下面三行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    net.ipv6.conf.all.disable_ipv6 = 1</span><br><span class=\"line\">    net.ipv6.conf.default.disable_ipv6 = 1</span><br><span class=\"line\">    net.ipv6.conf.lo.disable_ipv6 = 1</span><br></pre></td></tr></table></figure></p>\n<p>保存后重启电脑或者运行：<code>sudo sysctl –p</code><br>上面那种禁用IPv6的方法不一定都适用，使用其他禁用方法也可以。</p>\n<p><strong>3. 方法三：</strong><br>上面的方法二有时候不怎么好，后面我又找到了另外一种更彻底的方法：<br>我的OVS版本是 2.0.1：</p>\n<p><center><img src=\"7d75af24/9.png\" alt=\"图9\"></center><br>Ubuntu版本是3.13:</p>\n<p><center><img src=\"7d75af24/10.png\" alt=\"图10\"></center><br>Google上说是OVS版本和Ubuntu的问题，OVS 2.0.1版本支持Ubuntu 2.6.32 到 3.10，所以我的问题出在OVS版本太低，或者Ubuntu版本过高。解决方法是升级OVS或者降低Ubuntu版本。</p>\n<p>运行如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudoapt-get install openvswitch-controller openvswitch-switchopenvswitch-datapath-source</span><br></pre></td></tr></table></figure></p>\n<p>把OVS更新到2.0.2：</p>\n<p><center><img src=\"7d75af24/11.png\" alt=\"图11\"></center><br>然后问题就解决了，至少目前是解决了，彻不彻底后面再看。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<p>每次启动完floodlight控制器，在<a href=\"http://127.0.0.1:8080/ui/index.html\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/ui/index.html</a> 中打开floodlight的Web UI界面后，发现host总是会比我定义的多，打开拓扑图界面也很混乱。网上查了下，说是因为OVS的一个local port会去发现外部网络的拓扑，只要禁用OVS的这个端口就可以了，有兴趣的可以试试那个方法。下面是我的实验过程及解决方法。</p>\n<p><strong>命令：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mn --controller=remote,ip=127.0.0.1,port=6653 --topo=tree,2</span><br></pre></td></tr></table></figure></p>","more":"<p><strong>如下图：</strong></p>\n<p><center><img src=\"7d75af24/1.png\" alt=\"图1\"></center></p>\n<p><center><img src=\"7d75af24/2.png\" alt=\"图2\"></center><br>这样都分不清哪个host是我定义的，交换机倒还好，都很清晰。</p>\n<p>所以我在用mininet创建网络拓扑的时候使用了如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mn --controller=remote,ip=127.0.0.1,port=6653 --mac --topo=tree,2</span><br></pre></td></tr></table></figure></p>\n<p>多加了个mac参数，表示自动设置host的mac，会使我们的host的mac很有规律，如下图：</p>\n<p><center><img src=\"7d75af24/3.png\" alt=\"图3\"></center><br>虽然这样还没解决主机多出来几个的问题，但至少我们能很快分清哪几个使我们的host，这时的host的mac地址，会从00:00:00:00:00:01开始分配。</p>\n<p><strong>1. 方法一：</strong><br>最后我解决host多于实际的方法是先启动mininet，再启动floodlight，因为交换机启动时，链路需要协商，如果先启动floodlight，就会把这些数据包也记录下来。所以先启动mininet，等OVS稳定下来，再启动floodlight控制器，这样就不会把OVS协商链路时发现的一些主机也记录进去。</p>\n<p><center><img src=\"7d75af24/4.png\" alt=\"图4\"></center></p>\n<p><center><img src=\"7d75af24/5.png\" alt=\"图5\"></center><br>虽然一开始，启动mininet时，不能连接上控制器，但在启动控制器后，mininet会主动与控制器连接。</p>\n<p>还有一个问题就是，当退出mininet后，UI上的交换机会立马没了，而主机还在。</p>\n<p><center><img src=\"7d75af24/6.png\" alt=\"图6\"></center><br>然后再用mininet创建网络，UI上的原来的host不变，host在这基础上又会增加几个，每次退出再创建都会多几个host。</p>\n<p><center><img src=\"7d75af24/7.png\" alt=\"图7\"></center><br>上面是我重复三次这样的过程后生成的host，本来只会生成四个host，如今已越来越多。这样很烦，解决的方法是，退出mininet后，就刷新一遍网页，注意不是直接按F5刷新，这样会出错，是再输一次：<a href=\"http://127.0.0.1:8080/ui/index.html\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/ui/index.html</a> 按回车。这时host才会从网页中清除：</p>\n<p><center><img src=\"7d75af24/8.png\" alt=\"图8\"></center><br>后面再创建拓扑的时候就重复上面的过程，先启动mininet，再启动floodlight，每次退出mininet，就刷新一遍网页。</p>\n<p><strong>2. 方法二：</strong><br>Google查了下发现了其他的几种方法，试了下面的方法，感觉比之前的好了，但还是有点小问题，可能只是我机子的问题。仅作参考。<br>在floodlight的日志输出里有很多IPv6的信息。所以这个解决方法是禁用IPv6。<br>用命令：<code>sudo vim /etc/sysctl.conf</code> ，然后在最后添加下面三行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    net.ipv6.conf.all.disable_ipv6 = 1</span><br><span class=\"line\">    net.ipv6.conf.default.disable_ipv6 = 1</span><br><span class=\"line\">    net.ipv6.conf.lo.disable_ipv6 = 1</span><br></pre></td></tr></table></figure></p>\n<p>保存后重启电脑或者运行：<code>sudo sysctl –p</code><br>上面那种禁用IPv6的方法不一定都适用，使用其他禁用方法也可以。</p>\n<p><strong>3. 方法三：</strong><br>上面的方法二有时候不怎么好，后面我又找到了另外一种更彻底的方法：<br>我的OVS版本是 2.0.1：</p>\n<p><center><img src=\"7d75af24/9.png\" alt=\"图9\"></center><br>Ubuntu版本是3.13:</p>\n<p><center><img src=\"7d75af24/10.png\" alt=\"图10\"></center><br>Google上说是OVS版本和Ubuntu的问题，OVS 2.0.1版本支持Ubuntu 2.6.32 到 3.10，所以我的问题出在OVS版本太低，或者Ubuntu版本过高。解决方法是升级OVS或者降低Ubuntu版本。</p>\n<p>运行如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudoapt-get install openvswitch-controller openvswitch-switchopenvswitch-datapath-source</span><br></pre></td></tr></table></figure></p>\n<p>把OVS更新到2.0.2：</p>\n<p><center><img src=\"7d75af24/11.png\" alt=\"图11\"></center><br>然后问题就解决了，至少目前是解决了，彻不彻底后面再看。</p>\n<hr>"},{"title":"Floodlight控制器创建一个模块的简单过程","copyright":true,"abbrlink":"2335eb7f","date":"2015-12-24T09:07:18.000Z","_content":"假设floodlight和eclipse的安装以及配置已经完成，如果还没有，请参考：\nhttps://floodlight.atlassian.net/wiki/display/floodlightcontroller/Installation+Guide\n\n很简单的过程，大神就不用看了，主要是记下来方便自己以后用，也给需要的人参考，以下过程全部在eclipse中操作完成\n1. 在floodlight项目的src/main/java包上右键新建Java类，填上包路径和Java类名以及继承的类（继承的类一般都包括\"IOFMessageListener\" 和 \"IFloodlightModule\"），然后就会自动生成一些需要重写的函数。\n<!--more-->\n2. 为了使我们新建的这个类监听到OpenFlow消息，需要在FloodlightProvider （一个IFloodlightProviderService类）注册我们的类。\n\n3. 我们需要修改getModuleDependencies()函数，用来告诉模块装载器我们依赖它。getModuleDependencies()函数是第一步添加父类后自动生成的函数。\n\n4. 接着编写init方法，init方法在控制器启动的时候就会调用，用来加载依赖模块和初始化数据结构。\n\n5. 然后实现基本的监听器，在startUP方法中注册PACKET_IN消息\n\n6. 为OFMessage监听器加上一个ID，这步在getName()中实现\n\n7. 关键的一步，定义接收到PACKET_IN消息后的行为，在receive()中实现，返回Command.CONTINUE以允许这个消息继续被其他的消息处理模块接收到。\n\n8. 我们还需要为之前我们创建的模块注册，这样floodlight启动的时候就可以加载我们的模块，在这一步，首先我们得告诉加载器我们的模块的存在，这可以在src/main/resources/META-INF/services/net.floodlightcontroller.core.module.IFloodlightModule文件里添加我们的模块的类\n\n9. 最后，我们还必须在floodlight模块配置文件中添加我们创建的模块，这个是在src/main/resources/floodlightdefault.properties文件里的floodlight.modules里添加我们的包和类的全路径。\n-----","source":"_posts/Floodlight控制器创建一个模块的简单过程.md","raw":"---\ntitle: Floodlight控制器创建一个模块的简单过程\ntags:\n  - SDN\n  - Floodlight\ncategories:\n  - 原创\n  - SDN\ncopyright: true\nabbrlink: 2335eb7f\ndate: 2015-12-24 17:07:18\n---\n假设floodlight和eclipse的安装以及配置已经完成，如果还没有，请参考：\nhttps://floodlight.atlassian.net/wiki/display/floodlightcontroller/Installation+Guide\n\n很简单的过程，大神就不用看了，主要是记下来方便自己以后用，也给需要的人参考，以下过程全部在eclipse中操作完成\n1. 在floodlight项目的src/main/java包上右键新建Java类，填上包路径和Java类名以及继承的类（继承的类一般都包括\"IOFMessageListener\" 和 \"IFloodlightModule\"），然后就会自动生成一些需要重写的函数。\n<!--more-->\n2. 为了使我们新建的这个类监听到OpenFlow消息，需要在FloodlightProvider （一个IFloodlightProviderService类）注册我们的类。\n\n3. 我们需要修改getModuleDependencies()函数，用来告诉模块装载器我们依赖它。getModuleDependencies()函数是第一步添加父类后自动生成的函数。\n\n4. 接着编写init方法，init方法在控制器启动的时候就会调用，用来加载依赖模块和初始化数据结构。\n\n5. 然后实现基本的监听器，在startUP方法中注册PACKET_IN消息\n\n6. 为OFMessage监听器加上一个ID，这步在getName()中实现\n\n7. 关键的一步，定义接收到PACKET_IN消息后的行为，在receive()中实现，返回Command.CONTINUE以允许这个消息继续被其他的消息处理模块接收到。\n\n8. 我们还需要为之前我们创建的模块注册，这样floodlight启动的时候就可以加载我们的模块，在这一步，首先我们得告诉加载器我们的模块的存在，这可以在src/main/resources/META-INF/services/net.floodlightcontroller.core.module.IFloodlightModule文件里添加我们的模块的类\n\n9. 最后，我们还必须在floodlight模块配置文件中添加我们创建的模块，这个是在src/main/resources/floodlightdefault.properties文件里的floodlight.modules里添加我们的包和类的全路径。\n-----","slug":"Floodlight控制器创建一个模块的简单过程","published":1,"updated":"2019-03-03T06:41:13.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtojsgt8000fkaq46jqmudor","content":"<p>假设floodlight和eclipse的安装以及配置已经完成，如果还没有，请参考：<br><a href=\"https://floodlight.atlassian.net/wiki/display/floodlightcontroller/Installation+Guide\" target=\"_blank\" rel=\"noopener\">https://floodlight.atlassian.net/wiki/display/floodlightcontroller/Installation+Guide</a></p>\n<p>很简单的过程，大神就不用看了，主要是记下来方便自己以后用，也给需要的人参考，以下过程全部在eclipse中操作完成</p>\n<ol>\n<li>在floodlight项目的src/main/java包上右键新建Java类，填上包路径和Java类名以及继承的类（继承的类一般都包括”IOFMessageListener” 和 “IFloodlightModule”），然后就会自动生成一些需要重写的函数。<a id=\"more\"></a></li>\n<li><p>为了使我们新建的这个类监听到OpenFlow消息，需要在FloodlightProvider （一个IFloodlightProviderService类）注册我们的类。</p>\n</li>\n<li><p>我们需要修改getModuleDependencies()函数，用来告诉模块装载器我们依赖它。getModuleDependencies()函数是第一步添加父类后自动生成的函数。</p>\n</li>\n<li><p>接着编写init方法，init方法在控制器启动的时候就会调用，用来加载依赖模块和初始化数据结构。</p>\n</li>\n<li><p>然后实现基本的监听器，在startUP方法中注册PACKET_IN消息</p>\n</li>\n<li><p>为OFMessage监听器加上一个ID，这步在getName()中实现</p>\n</li>\n<li><p>关键的一步，定义接收到PACKET_IN消息后的行为，在receive()中实现，返回Command.CONTINUE以允许这个消息继续被其他的消息处理模块接收到。</p>\n</li>\n<li><p>我们还需要为之前我们创建的模块注册，这样floodlight启动的时候就可以加载我们的模块，在这一步，首先我们得告诉加载器我们的模块的存在，这可以在src/main/resources/META-INF/services/net.floodlightcontroller.core.module.IFloodlightModule文件里添加我们的模块的类</p>\n</li>\n<li><p>最后，我们还必须在floodlight模块配置文件中添加我们创建的模块，这个是在src/main/resources/floodlightdefault.properties文件里的floodlight.modules里添加我们的包和类的全路径。</p>\n</li>\n</ol>\n<hr>\n","site":{"data":{}},"excerpt":"<p>假设floodlight和eclipse的安装以及配置已经完成，如果还没有，请参考：<br><a href=\"https://floodlight.atlassian.net/wiki/display/floodlightcontroller/Installation+Guide\" target=\"_blank\" rel=\"noopener\">https://floodlight.atlassian.net/wiki/display/floodlightcontroller/Installation+Guide</a></p>\n<p>很简单的过程，大神就不用看了，主要是记下来方便自己以后用，也给需要的人参考，以下过程全部在eclipse中操作完成</p>\n<ol>\n<li>在floodlight项目的src/main/java包上右键新建Java类，填上包路径和Java类名以及继承的类（继承的类一般都包括”IOFMessageListener” 和 “IFloodlightModule”），然后就会自动生成一些需要重写的函数。","more":"</li>\n<li><p>为了使我们新建的这个类监听到OpenFlow消息，需要在FloodlightProvider （一个IFloodlightProviderService类）注册我们的类。</p>\n</li>\n<li><p>我们需要修改getModuleDependencies()函数，用来告诉模块装载器我们依赖它。getModuleDependencies()函数是第一步添加父类后自动生成的函数。</p>\n</li>\n<li><p>接着编写init方法，init方法在控制器启动的时候就会调用，用来加载依赖模块和初始化数据结构。</p>\n</li>\n<li><p>然后实现基本的监听器，在startUP方法中注册PACKET_IN消息</p>\n</li>\n<li><p>为OFMessage监听器加上一个ID，这步在getName()中实现</p>\n</li>\n<li><p>关键的一步，定义接收到PACKET_IN消息后的行为，在receive()中实现，返回Command.CONTINUE以允许这个消息继续被其他的消息处理模块接收到。</p>\n</li>\n<li><p>我们还需要为之前我们创建的模块注册，这样floodlight启动的时候就可以加载我们的模块，在这一步，首先我们得告诉加载器我们的模块的存在，这可以在src/main/resources/META-INF/services/net.floodlightcontroller.core.module.IFloodlightModule文件里添加我们的模块的类</p>\n</li>\n<li><p>最后，我们还必须在floodlight模块配置文件中添加我们创建的模块，这个是在src/main/resources/floodlightdefault.properties文件里的floodlight.modules里添加我们的包和类的全路径。</p>\n</li>\n</ol>\n<hr>"},{"title":"Floodlight控制器的安装以及SDN环境的配置","copyright":true,"abbrlink":"96090f8a","date":"2015-12-25T14:28:51.000Z","_content":"虽然网上有好多这种配置教材，但是在配置的过程中还是都会出各种问题，所以我想基于我自己的过程，记录下我的配置过程便于以后少走弯路，也给别人参考参考一下，下面的配置是我每步成功过后就记下来的，可能以后环境不是一模一样的还是会出各种小问题，这也难免。\n\n首先在win7的VMware上安装Ubuntu14.04，并且在Ubuntu里安装一些常用到的软件\n```\n$sudo apt-get install vim,git\n```\n然后进入正式安装floodlight的环节：\n<!--more-->\n### 安装java环境以及eclipse\n```\n$sudo apt-get install build-essentialdefault-jdk ant python-dev eclipse\n```\n### 下载floodlight源代码以及编译\n```\n$ git clone git://github.com/floodlight/floodlight.git \n$ cd floodlight \n$ ant; \n$ sudo mkdir /var/lib/floodlight   //同步数据的目录，编译完了floodlight会在这里自动生成一个SyncDB/文件夹，这行不是必需的\n$ sudo chmod  /var/lib/floodlight  777\n```\n### 安装mininet\n```\n$sudo apt-get install mininet\n```\n然后可以简单测试下：\n```\n$sudo mn\n```\n可以进入mininet的命令行就表示安装成功。\n### 运行floodlight：\n```\n$ cd floodlight\n$ java –jar target/floodlight.jar //控制台就打印出debug信息\n```\n### 运行mininet：\n```\n$sudo mn --controller=remote,ip=127.0.0.1,port=6653\n```\n这一步是把在mininet中建立的虚拟网络连接到floodlight控制器上。\n### 查看floodlight提供的UI界面\n在浏览器中输入：http://127.0.0.1:8080/ui/index.html就可以看到floodlight提供的Web UI界面。在webUI中可以查看交换机，主机，流表以及网络拓扑等信息。\n### 配置eclipse\n上面已经完成了基本的配置工作，但是为了方便后续的开发，我们还需要配置好eclipse，把floodlight的源代码导入到其中。方便以后给控制器添加应用模块以及查看控制器的各个模块的源代码。\n首先需要在floodlight的目录下执行下面这个命令：\n```\n$ant\n```\n然后打开eclipse，导入已存在的项目到工作空间，选择根目录为floodlight文件夹。\n\n然后配置eclipse，在eclipse中右键floodlight目录，run as里面的run configurations,新建一个Java Application，name用FloodlightLaunch，project填Floodlight，main填net.floodlightcontroller.core.Main，点应用就OK了。\n\n上面配置好了，就可以运行floodlight控制器了，点工具栏里的三角形按钮或者右键run as a JavaApplication,然后控制台就一直输出调试信息。后面就可以在eclipse中进行模块以及服务的开发。\n\n***","source":"_posts/Floodlight控制器的安装以及SDN环境的配置.md","raw":"---\ntitle: Floodlight控制器的安装以及SDN环境的配置\ntags:\n  - SDN\n  - Floodlight\ncategories:\n  - 原创\n  - SDN\ncopyright: true\nabbrlink: 96090f8a\ndate: 2015-12-25 22:28:51\n---\n虽然网上有好多这种配置教材，但是在配置的过程中还是都会出各种问题，所以我想基于我自己的过程，记录下我的配置过程便于以后少走弯路，也给别人参考参考一下，下面的配置是我每步成功过后就记下来的，可能以后环境不是一模一样的还是会出各种小问题，这也难免。\n\n首先在win7的VMware上安装Ubuntu14.04，并且在Ubuntu里安装一些常用到的软件\n```\n$sudo apt-get install vim,git\n```\n然后进入正式安装floodlight的环节：\n<!--more-->\n### 安装java环境以及eclipse\n```\n$sudo apt-get install build-essentialdefault-jdk ant python-dev eclipse\n```\n### 下载floodlight源代码以及编译\n```\n$ git clone git://github.com/floodlight/floodlight.git \n$ cd floodlight \n$ ant; \n$ sudo mkdir /var/lib/floodlight   //同步数据的目录，编译完了floodlight会在这里自动生成一个SyncDB/文件夹，这行不是必需的\n$ sudo chmod  /var/lib/floodlight  777\n```\n### 安装mininet\n```\n$sudo apt-get install mininet\n```\n然后可以简单测试下：\n```\n$sudo mn\n```\n可以进入mininet的命令行就表示安装成功。\n### 运行floodlight：\n```\n$ cd floodlight\n$ java –jar target/floodlight.jar //控制台就打印出debug信息\n```\n### 运行mininet：\n```\n$sudo mn --controller=remote,ip=127.0.0.1,port=6653\n```\n这一步是把在mininet中建立的虚拟网络连接到floodlight控制器上。\n### 查看floodlight提供的UI界面\n在浏览器中输入：http://127.0.0.1:8080/ui/index.html就可以看到floodlight提供的Web UI界面。在webUI中可以查看交换机，主机，流表以及网络拓扑等信息。\n### 配置eclipse\n上面已经完成了基本的配置工作，但是为了方便后续的开发，我们还需要配置好eclipse，把floodlight的源代码导入到其中。方便以后给控制器添加应用模块以及查看控制器的各个模块的源代码。\n首先需要在floodlight的目录下执行下面这个命令：\n```\n$ant\n```\n然后打开eclipse，导入已存在的项目到工作空间，选择根目录为floodlight文件夹。\n\n然后配置eclipse，在eclipse中右键floodlight目录，run as里面的run configurations,新建一个Java Application，name用FloodlightLaunch，project填Floodlight，main填net.floodlightcontroller.core.Main，点应用就OK了。\n\n上面配置好了，就可以运行floodlight控制器了，点工具栏里的三角形按钮或者右键run as a JavaApplication,然后控制台就一直输出调试信息。后面就可以在eclipse中进行模块以及服务的开发。\n\n***","slug":"Floodlight控制器的安装以及SDN环境的配置","published":1,"updated":"2019-03-03T06:41:01.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtojsgt9000gkaq4www7wqin","content":"<p>虽然网上有好多这种配置教材，但是在配置的过程中还是都会出各种问题，所以我想基于我自己的过程，记录下我的配置过程便于以后少走弯路，也给别人参考参考一下，下面的配置是我每步成功过后就记下来的，可能以后环境不是一模一样的还是会出各种小问题，这也难免。</p>\n<p>首先在win7的VMware上安装Ubuntu14.04，并且在Ubuntu里安装一些常用到的软件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo apt-get install vim,git</span><br></pre></td></tr></table></figure></p>\n<p>然后进入正式安装floodlight的环节：<br><a id=\"more\"></a></p>\n<h3 id=\"安装java环境以及eclipse\"><a href=\"#安装java环境以及eclipse\" class=\"headerlink\" title=\"安装java环境以及eclipse\"></a>安装java环境以及eclipse</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo apt-get install build-essentialdefault-jdk ant python-dev eclipse</span><br></pre></td></tr></table></figure>\n<h3 id=\"下载floodlight源代码以及编译\"><a href=\"#下载floodlight源代码以及编译\" class=\"headerlink\" title=\"下载floodlight源代码以及编译\"></a>下载floodlight源代码以及编译</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone git://github.com/floodlight/floodlight.git </span><br><span class=\"line\">$ cd floodlight </span><br><span class=\"line\">$ ant; </span><br><span class=\"line\">$ sudo mkdir /var/lib/floodlight   //同步数据的目录，编译完了floodlight会在这里自动生成一个SyncDB/文件夹，这行不是必需的</span><br><span class=\"line\">$ sudo chmod  /var/lib/floodlight  777</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装mininet\"><a href=\"#安装mininet\" class=\"headerlink\" title=\"安装mininet\"></a>安装mininet</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo apt-get install mininet</span><br></pre></td></tr></table></figure>\n<p>然后可以简单测试下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo mn</span><br></pre></td></tr></table></figure></p>\n<p>可以进入mininet的命令行就表示安装成功。</p>\n<h3 id=\"运行floodlight：\"><a href=\"#运行floodlight：\" class=\"headerlink\" title=\"运行floodlight：\"></a>运行floodlight：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd floodlight</span><br><span class=\"line\">$ java –jar target/floodlight.jar //控制台就打印出debug信息</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行mininet：\"><a href=\"#运行mininet：\" class=\"headerlink\" title=\"运行mininet：\"></a>运行mininet：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo mn --controller=remote,ip=127.0.0.1,port=6653</span><br></pre></td></tr></table></figure>\n<p>这一步是把在mininet中建立的虚拟网络连接到floodlight控制器上。</p>\n<h3 id=\"查看floodlight提供的UI界面\"><a href=\"#查看floodlight提供的UI界面\" class=\"headerlink\" title=\"查看floodlight提供的UI界面\"></a>查看floodlight提供的UI界面</h3><p>在浏览器中输入：<a href=\"http://127.0.0.1:8080/ui/index.html就可以看到floodlight提供的Web\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/ui/index.html就可以看到floodlight提供的Web</a> UI界面。在webUI中可以查看交换机，主机，流表以及网络拓扑等信息。</p>\n<h3 id=\"配置eclipse\"><a href=\"#配置eclipse\" class=\"headerlink\" title=\"配置eclipse\"></a>配置eclipse</h3><p>上面已经完成了基本的配置工作，但是为了方便后续的开发，我们还需要配置好eclipse，把floodlight的源代码导入到其中。方便以后给控制器添加应用模块以及查看控制器的各个模块的源代码。<br>首先需要在floodlight的目录下执行下面这个命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ant</span><br></pre></td></tr></table></figure></p>\n<p>然后打开eclipse，导入已存在的项目到工作空间，选择根目录为floodlight文件夹。</p>\n<p>然后配置eclipse，在eclipse中右键floodlight目录，run as里面的run configurations,新建一个Java Application，name用FloodlightLaunch，project填Floodlight，main填net.floodlightcontroller.core.Main，点应用就OK了。</p>\n<p>上面配置好了，就可以运行floodlight控制器了，点工具栏里的三角形按钮或者右键run as a JavaApplication,然后控制台就一直输出调试信息。后面就可以在eclipse中进行模块以及服务的开发。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<p>虽然网上有好多这种配置教材，但是在配置的过程中还是都会出各种问题，所以我想基于我自己的过程，记录下我的配置过程便于以后少走弯路，也给别人参考参考一下，下面的配置是我每步成功过后就记下来的，可能以后环境不是一模一样的还是会出各种小问题，这也难免。</p>\n<p>首先在win7的VMware上安装Ubuntu14.04，并且在Ubuntu里安装一些常用到的软件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo apt-get install vim,git</span><br></pre></td></tr></table></figure></p>\n<p>然后进入正式安装floodlight的环节：<br>","more":"</p>\n<h3 id=\"安装java环境以及eclipse\"><a href=\"#安装java环境以及eclipse\" class=\"headerlink\" title=\"安装java环境以及eclipse\"></a>安装java环境以及eclipse</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo apt-get install build-essentialdefault-jdk ant python-dev eclipse</span><br></pre></td></tr></table></figure>\n<h3 id=\"下载floodlight源代码以及编译\"><a href=\"#下载floodlight源代码以及编译\" class=\"headerlink\" title=\"下载floodlight源代码以及编译\"></a>下载floodlight源代码以及编译</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone git://github.com/floodlight/floodlight.git </span><br><span class=\"line\">$ cd floodlight </span><br><span class=\"line\">$ ant; </span><br><span class=\"line\">$ sudo mkdir /var/lib/floodlight   //同步数据的目录，编译完了floodlight会在这里自动生成一个SyncDB/文件夹，这行不是必需的</span><br><span class=\"line\">$ sudo chmod  /var/lib/floodlight  777</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装mininet\"><a href=\"#安装mininet\" class=\"headerlink\" title=\"安装mininet\"></a>安装mininet</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo apt-get install mininet</span><br></pre></td></tr></table></figure>\n<p>然后可以简单测试下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo mn</span><br></pre></td></tr></table></figure></p>\n<p>可以进入mininet的命令行就表示安装成功。</p>\n<h3 id=\"运行floodlight：\"><a href=\"#运行floodlight：\" class=\"headerlink\" title=\"运行floodlight：\"></a>运行floodlight：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd floodlight</span><br><span class=\"line\">$ java –jar target/floodlight.jar //控制台就打印出debug信息</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行mininet：\"><a href=\"#运行mininet：\" class=\"headerlink\" title=\"运行mininet：\"></a>运行mininet：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo mn --controller=remote,ip=127.0.0.1,port=6653</span><br></pre></td></tr></table></figure>\n<p>这一步是把在mininet中建立的虚拟网络连接到floodlight控制器上。</p>\n<h3 id=\"查看floodlight提供的UI界面\"><a href=\"#查看floodlight提供的UI界面\" class=\"headerlink\" title=\"查看floodlight提供的UI界面\"></a>查看floodlight提供的UI界面</h3><p>在浏览器中输入：<a href=\"http://127.0.0.1:8080/ui/index.html就可以看到floodlight提供的Web\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/ui/index.html就可以看到floodlight提供的Web</a> UI界面。在webUI中可以查看交换机，主机，流表以及网络拓扑等信息。</p>\n<h3 id=\"配置eclipse\"><a href=\"#配置eclipse\" class=\"headerlink\" title=\"配置eclipse\"></a>配置eclipse</h3><p>上面已经完成了基本的配置工作，但是为了方便后续的开发，我们还需要配置好eclipse，把floodlight的源代码导入到其中。方便以后给控制器添加应用模块以及查看控制器的各个模块的源代码。<br>首先需要在floodlight的目录下执行下面这个命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ant</span><br></pre></td></tr></table></figure></p>\n<p>然后打开eclipse，导入已存在的项目到工作空间，选择根目录为floodlight文件夹。</p>\n<p>然后配置eclipse，在eclipse中右键floodlight目录，run as里面的run configurations,新建一个Java Application，name用FloodlightLaunch，project填Floodlight，main填net.floodlightcontroller.core.Main，点应用就OK了。</p>\n<p>上面配置好了，就可以运行floodlight控制器了，点工具栏里的三角形按钮或者右键run as a JavaApplication,然后控制台就一直输出调试信息。后面就可以在eclipse中进行模块以及服务的开发。</p>\n<hr>"},{"title":"Vmware+Ubuntu14.04+mininet中的host如何访问外网","copyright":true,"abbrlink":"5bd388e3","date":"2016-01-17T09:32:21.000Z","_content":"最近需要mininet虚拟出的网络拓扑中的host访问外网，搞了几天，总是出些小问题，今天终于可以不出问题的搞定了。在这里总结一下，以防以后再出问题。\n\n    环境：Win7，Vmware workstation 10.0 ，Ubuntu 14.04，mininet 2.2.0\n\n<!--more-->\n首先把宿主机win7中的VMnet8设置为自动获取IP地址，然后配置Vmware的Ubuntu，配置两块网卡，都是NAT模式。如下图：\n<center>![图1](5bd388e3/1.png)</center>\n点击确定后，点击虚拟网络编辑器，配置VMnet8的子网和掩码以及网关：\n<center>![图2](5bd388e3/2.png)</center>\n我这里设置子网为10.0.0.0，子网掩码为255.255.255.0，当然也可以设置为其他的，因为是NAT模式，所以不影响其连外网。这里主要是方便后面设置主机的IP。\n<center>![图3](5bd388e3/3.png)</center>\n网关设置为10.0.0.254。\n<center>![图4](5bd388e3/4.png)</center>\n这里的DHCP地址范围设置随便取一个合适的范围。\n \nOK，上面的配置已经为Ubuntu配置好了网络，可以启动Ubuntu了，查看网卡信息：\n<center>![图5](5bd388e3/5.png)</center>\n这个时候，ping一下，则可以ping通，而且只有通过eth0来ping通，eth1 ping不通。\n\n分别用：`ping -I eth0 baidu.com` 和 `ping –I eth1 baidu.com`测试。\n\n为了后面的需要，我们把eth1的IP设置为：0.0.0.0，这样这个闲置的网卡资源就可以被用来桥接到mininet网络中的交换机上，这个后面会介绍怎样桥接。\n\n利用命令：`sudo ifconfig eth1 0.0.0.0`，查看IP地址时eth1已经看不到IP地址了。\n<center>![图6](5bd388e3/6.png)</center>\n好了，后面开始重点部分了，先在本地运行floodlight控制器，ip为127.0.0.1，端口为6653。然后编写python脚本创建mininet网络，如下：\n``` python\n#!/usr/bin/python\nimport re\nimport sys\nfrom mininet.cli import CLI\nfrom mininet.log import setLogLevel, info, error\nfrom mininet.net import Mininet\nfrom mininet.link import Intf\nfrom mininet.topolib import TreeTopo\nfrom mininet.util import quietRun\nfrom mininet.node import OVSSwitch, OVSController, Controller, RemoteController\nfrom mininet.topo import Topo\n \nclass MyTopo( Topo ):\n#    \"this topo is used for Scheme_1\"\n    \n    def __init__( self ):\n        \"Create custom topo.\"\n \n        # Initialize topology\n        Topo.__init__( self )\n \n        # Add hosts \n        h1 = self.addHost( 'h1' , ip=\"10.0.0.1/24\", mac=\"00:00:00:00:00:01\", defaultRoute=\"via 10.0.0.254\")\n        h2 = self.addHost( 'h2' , ip=\"10.0.0.2/24\", mac=\"00:00:00:00:00:02\", defaultRoute=\"via 10.0.0.254\")\n        h3 = self.addHost( 'h3' , ip=\"10.0.0.3/24\", mac=\"00:00:00:00:00:03\", defaultRoute=\"via 10.0.0.254\")\n        h4 = self.addHost( 'h4' , ip=\"10.0.0.4/24\", mac=\"00:00:00:00:00:04\", defaultRoute=\"via 10.0.0.254\")\n        \n        # Add switches\n        s1 = self.addSwitch( 's1' )\n        s2 = self.addSwitch( 's2' )\n        s3 = self.addSwitch( 's3' )\n \n        # Add links\n        self.addLink( s1, s2 )\n        self.addLink( s1, s3 )\n        self.addLink( s2, h1 )\n        self.addLink( s2, h2 )\n        self.addLink( s3, h3 )\n        self.addLink( s3, h4 )\n//检查eth1或者其他指定的网卡资源是不是已经被占用\ndef checkIntf( intf ):\n    \"Make sure intf exists and is not configured.\"\n    if ( ' %s:' % intf ) not in quietRun( 'ip link show' ):\n        error( 'Error:', intf, 'does not exist!\\n' )\n        exit( 1 )\n    ips = re.findall( r'\\d+\\.\\d+\\.\\d+\\.\\d+', quietRun( 'ifconfig ' + intf ) )\n    if ips:\n        error( 'Error:', intf, 'has an IP address,'\n               'and is probably in use!\\n' )\n        exit( 1 )\n \nif __name__ == '__main__':\n    setLogLevel( 'info' )\n \n    # try to get hw intf from the command line; by default, use eth1\n    intfName = sys.argv[ 1 ] if len( sys.argv ) > 1 else 'eth1'\n    info( '*** Connecting to hw intf: %s' % intfName )\n \n    info( '*** Checking', intfName, '\\n' )\n    checkIntf( intfName )\n \n    info( '*** Creating network\\n' )\n    net = Mininet( topo=MyTopo(),controller=None) //关键函数，创建mininet网络，指定拓扑和控制器。这里的控制器在后面添加进去\n    switch = net.switches[ 0 ] //取第一个交换机与eth1桥接\n    info( '*** Adding hardware interface', intfName, 'to switch', switch.name, '\\n' )\n    _intf = Intf( intfName, node=switch ) //最关键的函数，用作把一个网卡与一个交换机桥接\n \n    info( '*** Note: you may need to reconfigure the interfaces for '\n          'the Mininet hosts:\\n', net.hosts, '\\n' )\n    c0 = RemoteController( 'c0', ip='127.0.0.1', port=6653 )\n    net.addController(c0)\n    net.start()\n    CLI( net )\n    net.stop()\n```\n上面的脚本运行后，在floodlight web UI中可以看到创建了如下拓扑：\n<center>![图7](5bd388e3/7.png)</center>\n用上面的脚本设置了虚拟网络中的host的IP地址，MAC地址以及默认网关，然后把 Ubuntu的eth1网卡桥接到s1上，这里实现这个桥接功能主要是由Intf函数起作用，可以参看https://github.com/mininet/mininet/blob/master/examples/hwintf.py：\n\n使用 ```sudo python mytopo.py``` 运行脚本，出现mininet命令行。在命令行中使用xterm h1打开h1的独立窗口，再ping一下baidu.com。\n<center>![图8](5bd388e3/8.png)</center>\n到这里就完成了host访问外网的任务了，而且在Ubuntu和win7中也都可以和host通信（ping通）。\n最后我根据自己的理解画了个总体的图，仅作为参考，不对的地方请留言指出，谢谢。。。\n<center>![图9](5bd388e3/9.png)</center>\n\n----\n参考链接：\n1. http://techandtrains.com/2013/11/24/mininet-host-talking-to-internet/\n2. http://www.muzixing.com/pages/2013/12/06/yuan-chuang-mininetda-jian-zi-ding-yi-wang-luo-tuo-bu-by-muzi.html","source":"_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网.md","raw":"---\ntitle: Vmware+Ubuntu14.04+mininet中的host如何访问外网\ntags:\n  - SDN\n  - Mininet\n  - Linux\ncategories:\n  - 原创\n  - SDN\ncopyright: true\nabbrlink: 5bd388e3\ndate: 2016-01-17 17:32:21\n---\n最近需要mininet虚拟出的网络拓扑中的host访问外网，搞了几天，总是出些小问题，今天终于可以不出问题的搞定了。在这里总结一下，以防以后再出问题。\n\n    环境：Win7，Vmware workstation 10.0 ，Ubuntu 14.04，mininet 2.2.0\n\n<!--more-->\n首先把宿主机win7中的VMnet8设置为自动获取IP地址，然后配置Vmware的Ubuntu，配置两块网卡，都是NAT模式。如下图：\n<center>![图1](5bd388e3/1.png)</center>\n点击确定后，点击虚拟网络编辑器，配置VMnet8的子网和掩码以及网关：\n<center>![图2](5bd388e3/2.png)</center>\n我这里设置子网为10.0.0.0，子网掩码为255.255.255.0，当然也可以设置为其他的，因为是NAT模式，所以不影响其连外网。这里主要是方便后面设置主机的IP。\n<center>![图3](5bd388e3/3.png)</center>\n网关设置为10.0.0.254。\n<center>![图4](5bd388e3/4.png)</center>\n这里的DHCP地址范围设置随便取一个合适的范围。\n \nOK，上面的配置已经为Ubuntu配置好了网络，可以启动Ubuntu了，查看网卡信息：\n<center>![图5](5bd388e3/5.png)</center>\n这个时候，ping一下，则可以ping通，而且只有通过eth0来ping通，eth1 ping不通。\n\n分别用：`ping -I eth0 baidu.com` 和 `ping –I eth1 baidu.com`测试。\n\n为了后面的需要，我们把eth1的IP设置为：0.0.0.0，这样这个闲置的网卡资源就可以被用来桥接到mininet网络中的交换机上，这个后面会介绍怎样桥接。\n\n利用命令：`sudo ifconfig eth1 0.0.0.0`，查看IP地址时eth1已经看不到IP地址了。\n<center>![图6](5bd388e3/6.png)</center>\n好了，后面开始重点部分了，先在本地运行floodlight控制器，ip为127.0.0.1，端口为6653。然后编写python脚本创建mininet网络，如下：\n``` python\n#!/usr/bin/python\nimport re\nimport sys\nfrom mininet.cli import CLI\nfrom mininet.log import setLogLevel, info, error\nfrom mininet.net import Mininet\nfrom mininet.link import Intf\nfrom mininet.topolib import TreeTopo\nfrom mininet.util import quietRun\nfrom mininet.node import OVSSwitch, OVSController, Controller, RemoteController\nfrom mininet.topo import Topo\n \nclass MyTopo( Topo ):\n#    \"this topo is used for Scheme_1\"\n    \n    def __init__( self ):\n        \"Create custom topo.\"\n \n        # Initialize topology\n        Topo.__init__( self )\n \n        # Add hosts \n        h1 = self.addHost( 'h1' , ip=\"10.0.0.1/24\", mac=\"00:00:00:00:00:01\", defaultRoute=\"via 10.0.0.254\")\n        h2 = self.addHost( 'h2' , ip=\"10.0.0.2/24\", mac=\"00:00:00:00:00:02\", defaultRoute=\"via 10.0.0.254\")\n        h3 = self.addHost( 'h3' , ip=\"10.0.0.3/24\", mac=\"00:00:00:00:00:03\", defaultRoute=\"via 10.0.0.254\")\n        h4 = self.addHost( 'h4' , ip=\"10.0.0.4/24\", mac=\"00:00:00:00:00:04\", defaultRoute=\"via 10.0.0.254\")\n        \n        # Add switches\n        s1 = self.addSwitch( 's1' )\n        s2 = self.addSwitch( 's2' )\n        s3 = self.addSwitch( 's3' )\n \n        # Add links\n        self.addLink( s1, s2 )\n        self.addLink( s1, s3 )\n        self.addLink( s2, h1 )\n        self.addLink( s2, h2 )\n        self.addLink( s3, h3 )\n        self.addLink( s3, h4 )\n//检查eth1或者其他指定的网卡资源是不是已经被占用\ndef checkIntf( intf ):\n    \"Make sure intf exists and is not configured.\"\n    if ( ' %s:' % intf ) not in quietRun( 'ip link show' ):\n        error( 'Error:', intf, 'does not exist!\\n' )\n        exit( 1 )\n    ips = re.findall( r'\\d+\\.\\d+\\.\\d+\\.\\d+', quietRun( 'ifconfig ' + intf ) )\n    if ips:\n        error( 'Error:', intf, 'has an IP address,'\n               'and is probably in use!\\n' )\n        exit( 1 )\n \nif __name__ == '__main__':\n    setLogLevel( 'info' )\n \n    # try to get hw intf from the command line; by default, use eth1\n    intfName = sys.argv[ 1 ] if len( sys.argv ) > 1 else 'eth1'\n    info( '*** Connecting to hw intf: %s' % intfName )\n \n    info( '*** Checking', intfName, '\\n' )\n    checkIntf( intfName )\n \n    info( '*** Creating network\\n' )\n    net = Mininet( topo=MyTopo(),controller=None) //关键函数，创建mininet网络，指定拓扑和控制器。这里的控制器在后面添加进去\n    switch = net.switches[ 0 ] //取第一个交换机与eth1桥接\n    info( '*** Adding hardware interface', intfName, 'to switch', switch.name, '\\n' )\n    _intf = Intf( intfName, node=switch ) //最关键的函数，用作把一个网卡与一个交换机桥接\n \n    info( '*** Note: you may need to reconfigure the interfaces for '\n          'the Mininet hosts:\\n', net.hosts, '\\n' )\n    c0 = RemoteController( 'c0', ip='127.0.0.1', port=6653 )\n    net.addController(c0)\n    net.start()\n    CLI( net )\n    net.stop()\n```\n上面的脚本运行后，在floodlight web UI中可以看到创建了如下拓扑：\n<center>![图7](5bd388e3/7.png)</center>\n用上面的脚本设置了虚拟网络中的host的IP地址，MAC地址以及默认网关，然后把 Ubuntu的eth1网卡桥接到s1上，这里实现这个桥接功能主要是由Intf函数起作用，可以参看https://github.com/mininet/mininet/blob/master/examples/hwintf.py：\n\n使用 ```sudo python mytopo.py``` 运行脚本，出现mininet命令行。在命令行中使用xterm h1打开h1的独立窗口，再ping一下baidu.com。\n<center>![图8](5bd388e3/8.png)</center>\n到这里就完成了host访问外网的任务了，而且在Ubuntu和win7中也都可以和host通信（ping通）。\n最后我根据自己的理解画了个总体的图，仅作为参考，不对的地方请留言指出，谢谢。。。\n<center>![图9](5bd388e3/9.png)</center>\n\n----\n参考链接：\n1. http://techandtrains.com/2013/11/24/mininet-host-talking-to-internet/\n2. http://www.muzixing.com/pages/2013/12/06/yuan-chuang-mininetda-jian-zi-ding-yi-wang-luo-tuo-bu-by-muzi.html","slug":"Vmware-Ubuntu14-04-mininet中的host如何访问外网","published":1,"updated":"2019-03-25T11:11:40.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtojsgtc000jkaq4n31tp2nz","content":"<p>最近需要mininet虚拟出的网络拓扑中的host访问外网，搞了几天，总是出些小问题，今天终于可以不出问题的搞定了。在这里总结一下，以防以后再出问题。</p>\n<pre><code>环境：Win7，Vmware workstation 10.0 ，Ubuntu 14.04，mininet 2.2.0\n</code></pre><a id=\"more\"></a>\n<p>首先把宿主机win7中的VMnet8设置为自动获取IP地址，然后配置Vmware的Ubuntu，配置两块网卡，都是NAT模式。如下图：</p>\n<center><img src=\"5bd388e3/1.png\" alt=\"图1\"></center><br>点击确定后，点击虚拟网络编辑器，配置VMnet8的子网和掩码以及网关：<br><center><img src=\"5bd388e3/2.png\" alt=\"图2\"></center><br>我这里设置子网为10.0.0.0，子网掩码为255.255.255.0，当然也可以设置为其他的，因为是NAT模式，所以不影响其连外网。这里主要是方便后面设置主机的IP。<br><center><img src=\"5bd388e3/3.png\" alt=\"图3\"></center><br>网关设置为10.0.0.254。<br><center><img src=\"5bd388e3/4.png\" alt=\"图4\"></center><br>这里的DHCP地址范围设置随便取一个合适的范围。<br><br>OK，上面的配置已经为Ubuntu配置好了网络，可以启动Ubuntu了，查看网卡信息：<br><center><img src=\"5bd388e3/5.png\" alt=\"图5\"></center><br>这个时候，ping一下，则可以ping通，而且只有通过eth0来ping通，eth1 ping不通。<br><br>分别用：<code>ping -I eth0 baidu.com</code> 和 <code>ping –I eth1 baidu.com</code>测试。<br><br>为了后面的需要，我们把eth1的IP设置为：0.0.0.0，这样这个闲置的网卡资源就可以被用来桥接到mininet网络中的交换机上，这个后面会介绍怎样桥接。<br><br>利用命令：<code>sudo ifconfig eth1 0.0.0.0</code>，查看IP地址时eth1已经看不到IP地址了。<br><center><img src=\"5bd388e3/6.png\" alt=\"图6\"></center><br>好了，后面开始重点部分了，先在本地运行floodlight控制器，ip为127.0.0.1，端口为6653。然后编写python脚本创建mininet网络，如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> mininet.cli <span class=\"keyword\">import</span> CLI</span><br><span class=\"line\"><span class=\"keyword\">from</span> mininet.log <span class=\"keyword\">import</span> setLogLevel, info, error</span><br><span class=\"line\"><span class=\"keyword\">from</span> mininet.net <span class=\"keyword\">import</span> Mininet</span><br><span class=\"line\"><span class=\"keyword\">from</span> mininet.link <span class=\"keyword\">import</span> Intf</span><br><span class=\"line\"><span class=\"keyword\">from</span> mininet.topolib <span class=\"keyword\">import</span> TreeTopo</span><br><span class=\"line\"><span class=\"keyword\">from</span> mininet.util <span class=\"keyword\">import</span> quietRun</span><br><span class=\"line\"><span class=\"keyword\">from</span> mininet.node <span class=\"keyword\">import</span> OVSSwitch, OVSController, Controller, RemoteController</span><br><span class=\"line\"><span class=\"keyword\">from</span> mininet.topo <span class=\"keyword\">import</span> Topo</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTopo</span><span class=\"params\">( Topo )</span>:</span></span><br><span class=\"line\"><span class=\"comment\">#    \"this topo is used for Scheme_1\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">( self )</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"Create custom topo.\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># Initialize topology</span></span><br><span class=\"line\">        Topo.__init__( self )</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># Add hosts </span></span><br><span class=\"line\">        h1 = self.addHost( <span class=\"string\">'h1'</span> , ip=<span class=\"string\">\"10.0.0.1/24\"</span>, mac=<span class=\"string\">\"00:00:00:00:00:01\"</span>, defaultRoute=<span class=\"string\">\"via 10.0.0.254\"</span>)</span><br><span class=\"line\">        h2 = self.addHost( <span class=\"string\">'h2'</span> , ip=<span class=\"string\">\"10.0.0.2/24\"</span>, mac=<span class=\"string\">\"00:00:00:00:00:02\"</span>, defaultRoute=<span class=\"string\">\"via 10.0.0.254\"</span>)</span><br><span class=\"line\">        h3 = self.addHost( <span class=\"string\">'h3'</span> , ip=<span class=\"string\">\"10.0.0.3/24\"</span>, mac=<span class=\"string\">\"00:00:00:00:00:03\"</span>, defaultRoute=<span class=\"string\">\"via 10.0.0.254\"</span>)</span><br><span class=\"line\">        h4 = self.addHost( <span class=\"string\">'h4'</span> , ip=<span class=\"string\">\"10.0.0.4/24\"</span>, mac=<span class=\"string\">\"00:00:00:00:00:04\"</span>, defaultRoute=<span class=\"string\">\"via 10.0.0.254\"</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Add switches</span></span><br><span class=\"line\">        s1 = self.addSwitch( <span class=\"string\">'s1'</span> )</span><br><span class=\"line\">        s2 = self.addSwitch( <span class=\"string\">'s2'</span> )</span><br><span class=\"line\">        s3 = self.addSwitch( <span class=\"string\">'s3'</span> )</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># Add links</span></span><br><span class=\"line\">        self.addLink( s1, s2 )</span><br><span class=\"line\">        self.addLink( s1, s3 )</span><br><span class=\"line\">        self.addLink( s2, h1 )</span><br><span class=\"line\">        self.addLink( s2, h2 )</span><br><span class=\"line\">        self.addLink( s3, h3 )</span><br><span class=\"line\">        self.addLink( s3, h4 )</span><br><span class=\"line\">//检查eth1或者其他指定的网卡资源是不是已经被占用</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">checkIntf</span><span class=\"params\">( intf )</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"Make sure intf exists and is not configured.\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"string\">' %s:'</span> % intf ) <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> quietRun( <span class=\"string\">'ip link show'</span> ):</span><br><span class=\"line\">        error( <span class=\"string\">'Error:'</span>, intf, <span class=\"string\">'does not exist!\\n'</span> )</span><br><span class=\"line\">        exit( <span class=\"number\">1</span> )</span><br><span class=\"line\">    ips = re.findall( <span class=\"string\">r'\\d+\\.\\d+\\.\\d+\\.\\d+'</span>, quietRun( <span class=\"string\">'ifconfig '</span> + intf ) )</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ips:</span><br><span class=\"line\">        error( <span class=\"string\">'Error:'</span>, intf, <span class=\"string\">'has an IP address,'</span></span><br><span class=\"line\">               <span class=\"string\">'and is probably in use!\\n'</span> )</span><br><span class=\"line\">        exit( <span class=\"number\">1</span> )</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    setLogLevel( <span class=\"string\">'info'</span> )</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># try to get hw intf from the command line; by default, use eth1</span></span><br><span class=\"line\">    intfName = sys.argv[ <span class=\"number\">1</span> ] <span class=\"keyword\">if</span> len( sys.argv ) &gt; <span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"string\">'eth1'</span></span><br><span class=\"line\">    info( <span class=\"string\">'*** Connecting to hw intf: %s'</span> % intfName )</span><br><span class=\"line\"> </span><br><span class=\"line\">    info( <span class=\"string\">'*** Checking'</span>, intfName, <span class=\"string\">'\\n'</span> )</span><br><span class=\"line\">    checkIntf( intfName )</span><br><span class=\"line\"> </span><br><span class=\"line\">    info( <span class=\"string\">'*** Creating network\\n'</span> )</span><br><span class=\"line\">    net = Mininet( topo=MyTopo(),controller=<span class=\"keyword\">None</span>) //关键函数，创建mininet网络，指定拓扑和控制器。这里的控制器在后面添加进去</span><br><span class=\"line\">    switch = net.switches[ <span class=\"number\">0</span> ] //取第一个交换机与eth1桥接</span><br><span class=\"line\">    info( <span class=\"string\">'*** Adding hardware interface'</span>, intfName, <span class=\"string\">'to switch'</span>, switch.name, <span class=\"string\">'\\n'</span> )</span><br><span class=\"line\">    _intf = Intf( intfName, node=switch ) //最关键的函数，用作把一个网卡与一个交换机桥接</span><br><span class=\"line\"> </span><br><span class=\"line\">    info( <span class=\"string\">'*** Note: you may need to reconfigure the interfaces for '</span></span><br><span class=\"line\">          <span class=\"string\">'the Mininet hosts:\\n'</span>, net.hosts, <span class=\"string\">'\\n'</span> )</span><br><span class=\"line\">    c0 = RemoteController( <span class=\"string\">'c0'</span>, ip=<span class=\"string\">'127.0.0.1'</span>, port=<span class=\"number\">6653</span> )</span><br><span class=\"line\">    net.addController(c0)</span><br><span class=\"line\">    net.start()</span><br><span class=\"line\">    CLI( net )</span><br><span class=\"line\">    net.stop()</span><br></pre></td></tr></table></figure><br><br>上面的脚本运行后，在floodlight web UI中可以看到创建了如下拓扑：<br><center><img src=\"5bd388e3/7.png\" alt=\"图7\"></center><br>用上面的脚本设置了虚拟网络中的host的IP地址，MAC地址以及默认网关，然后把 Ubuntu的eth1网卡桥接到s1上，这里实现这个桥接功能主要是由Intf函数起作用，可以参看<a href=\"https://github.com/mininet/mininet/blob/master/examples/hwintf.py：\" target=\"_blank\" rel=\"noopener\">https://github.com/mininet/mininet/blob/master/examples/hwintf.py：</a><br><br>使用 <code>sudo python mytopo.py</code> 运行脚本，出现mininet命令行。在命令行中使用xterm h1打开h1的独立窗口，再ping一下baidu.com。<br><center><img src=\"5bd388e3/8.png\" alt=\"图8\"></center><br>到这里就完成了host访问外网的任务了，而且在Ubuntu和win7中也都可以和host通信（ping通）。<br>最后我根据自己的理解画了个总体的图，仅作为参考，不对的地方请留言指出，谢谢。。。<br><center><img src=\"5bd388e3/9.png\" alt=\"图9\"></center>\n\n<hr>\n<p>参考链接：</p>\n<ol>\n<li><a href=\"http://techandtrains.com/2013/11/24/mininet-host-talking-to-internet/\" target=\"_blank\" rel=\"noopener\">http://techandtrains.com/2013/11/24/mininet-host-talking-to-internet/</a></li>\n<li><a href=\"http://www.muzixing.com/pages/2013/12/06/yuan-chuang-mininetda-jian-zi-ding-yi-wang-luo-tuo-bu-by-muzi.html\" target=\"_blank\" rel=\"noopener\">http://www.muzixing.com/pages/2013/12/06/yuan-chuang-mininetda-jian-zi-ding-yi-wang-luo-tuo-bu-by-muzi.html</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>最近需要mininet虚拟出的网络拓扑中的host访问外网，搞了几天，总是出些小问题，今天终于可以不出问题的搞定了。在这里总结一下，以防以后再出问题。</p>\n<pre><code>环境：Win7，Vmware workstation 10.0 ，Ubuntu 14.04，mininet 2.2.0\n</code></pre>","more":"<p>首先把宿主机win7中的VMnet8设置为自动获取IP地址，然后配置Vmware的Ubuntu，配置两块网卡，都是NAT模式。如下图：</p>\n<center><img src=\"5bd388e3/1.png\" alt=\"图1\"></center><br>点击确定后，点击虚拟网络编辑器，配置VMnet8的子网和掩码以及网关：<br><center><img src=\"5bd388e3/2.png\" alt=\"图2\"></center><br>我这里设置子网为10.0.0.0，子网掩码为255.255.255.0，当然也可以设置为其他的，因为是NAT模式，所以不影响其连外网。这里主要是方便后面设置主机的IP。<br><center><img src=\"5bd388e3/3.png\" alt=\"图3\"></center><br>网关设置为10.0.0.254。<br><center><img src=\"5bd388e3/4.png\" alt=\"图4\"></center><br>这里的DHCP地址范围设置随便取一个合适的范围。<br><br>OK，上面的配置已经为Ubuntu配置好了网络，可以启动Ubuntu了，查看网卡信息：<br><center><img src=\"5bd388e3/5.png\" alt=\"图5\"></center><br>这个时候，ping一下，则可以ping通，而且只有通过eth0来ping通，eth1 ping不通。<br><br>分别用：<code>ping -I eth0 baidu.com</code> 和 <code>ping –I eth1 baidu.com</code>测试。<br><br>为了后面的需要，我们把eth1的IP设置为：0.0.0.0，这样这个闲置的网卡资源就可以被用来桥接到mininet网络中的交换机上，这个后面会介绍怎样桥接。<br><br>利用命令：<code>sudo ifconfig eth1 0.0.0.0</code>，查看IP地址时eth1已经看不到IP地址了。<br><center><img src=\"5bd388e3/6.png\" alt=\"图6\"></center><br>好了，后面开始重点部分了，先在本地运行floodlight控制器，ip为127.0.0.1，端口为6653。然后编写python脚本创建mininet网络，如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> mininet.cli <span class=\"keyword\">import</span> CLI</span><br><span class=\"line\"><span class=\"keyword\">from</span> mininet.log <span class=\"keyword\">import</span> setLogLevel, info, error</span><br><span class=\"line\"><span class=\"keyword\">from</span> mininet.net <span class=\"keyword\">import</span> Mininet</span><br><span class=\"line\"><span class=\"keyword\">from</span> mininet.link <span class=\"keyword\">import</span> Intf</span><br><span class=\"line\"><span class=\"keyword\">from</span> mininet.topolib <span class=\"keyword\">import</span> TreeTopo</span><br><span class=\"line\"><span class=\"keyword\">from</span> mininet.util <span class=\"keyword\">import</span> quietRun</span><br><span class=\"line\"><span class=\"keyword\">from</span> mininet.node <span class=\"keyword\">import</span> OVSSwitch, OVSController, Controller, RemoteController</span><br><span class=\"line\"><span class=\"keyword\">from</span> mininet.topo <span class=\"keyword\">import</span> Topo</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTopo</span><span class=\"params\">( Topo )</span>:</span></span><br><span class=\"line\"><span class=\"comment\">#    \"this topo is used for Scheme_1\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">( self )</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"Create custom topo.\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># Initialize topology</span></span><br><span class=\"line\">        Topo.__init__( self )</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># Add hosts </span></span><br><span class=\"line\">        h1 = self.addHost( <span class=\"string\">'h1'</span> , ip=<span class=\"string\">\"10.0.0.1/24\"</span>, mac=<span class=\"string\">\"00:00:00:00:00:01\"</span>, defaultRoute=<span class=\"string\">\"via 10.0.0.254\"</span>)</span><br><span class=\"line\">        h2 = self.addHost( <span class=\"string\">'h2'</span> , ip=<span class=\"string\">\"10.0.0.2/24\"</span>, mac=<span class=\"string\">\"00:00:00:00:00:02\"</span>, defaultRoute=<span class=\"string\">\"via 10.0.0.254\"</span>)</span><br><span class=\"line\">        h3 = self.addHost( <span class=\"string\">'h3'</span> , ip=<span class=\"string\">\"10.0.0.3/24\"</span>, mac=<span class=\"string\">\"00:00:00:00:00:03\"</span>, defaultRoute=<span class=\"string\">\"via 10.0.0.254\"</span>)</span><br><span class=\"line\">        h4 = self.addHost( <span class=\"string\">'h4'</span> , ip=<span class=\"string\">\"10.0.0.4/24\"</span>, mac=<span class=\"string\">\"00:00:00:00:00:04\"</span>, defaultRoute=<span class=\"string\">\"via 10.0.0.254\"</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Add switches</span></span><br><span class=\"line\">        s1 = self.addSwitch( <span class=\"string\">'s1'</span> )</span><br><span class=\"line\">        s2 = self.addSwitch( <span class=\"string\">'s2'</span> )</span><br><span class=\"line\">        s3 = self.addSwitch( <span class=\"string\">'s3'</span> )</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># Add links</span></span><br><span class=\"line\">        self.addLink( s1, s2 )</span><br><span class=\"line\">        self.addLink( s1, s3 )</span><br><span class=\"line\">        self.addLink( s2, h1 )</span><br><span class=\"line\">        self.addLink( s2, h2 )</span><br><span class=\"line\">        self.addLink( s3, h3 )</span><br><span class=\"line\">        self.addLink( s3, h4 )</span><br><span class=\"line\">//检查eth1或者其他指定的网卡资源是不是已经被占用</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">checkIntf</span><span class=\"params\">( intf )</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"Make sure intf exists and is not configured.\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"string\">' %s:'</span> % intf ) <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> quietRun( <span class=\"string\">'ip link show'</span> ):</span><br><span class=\"line\">        error( <span class=\"string\">'Error:'</span>, intf, <span class=\"string\">'does not exist!\\n'</span> )</span><br><span class=\"line\">        exit( <span class=\"number\">1</span> )</span><br><span class=\"line\">    ips = re.findall( <span class=\"string\">r'\\d+\\.\\d+\\.\\d+\\.\\d+'</span>, quietRun( <span class=\"string\">'ifconfig '</span> + intf ) )</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ips:</span><br><span class=\"line\">        error( <span class=\"string\">'Error:'</span>, intf, <span class=\"string\">'has an IP address,'</span></span><br><span class=\"line\">               <span class=\"string\">'and is probably in use!\\n'</span> )</span><br><span class=\"line\">        exit( <span class=\"number\">1</span> )</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    setLogLevel( <span class=\"string\">'info'</span> )</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># try to get hw intf from the command line; by default, use eth1</span></span><br><span class=\"line\">    intfName = sys.argv[ <span class=\"number\">1</span> ] <span class=\"keyword\">if</span> len( sys.argv ) &gt; <span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"string\">'eth1'</span></span><br><span class=\"line\">    info( <span class=\"string\">'*** Connecting to hw intf: %s'</span> % intfName )</span><br><span class=\"line\"> </span><br><span class=\"line\">    info( <span class=\"string\">'*** Checking'</span>, intfName, <span class=\"string\">'\\n'</span> )</span><br><span class=\"line\">    checkIntf( intfName )</span><br><span class=\"line\"> </span><br><span class=\"line\">    info( <span class=\"string\">'*** Creating network\\n'</span> )</span><br><span class=\"line\">    net = Mininet( topo=MyTopo(),controller=<span class=\"keyword\">None</span>) //关键函数，创建mininet网络，指定拓扑和控制器。这里的控制器在后面添加进去</span><br><span class=\"line\">    switch = net.switches[ <span class=\"number\">0</span> ] //取第一个交换机与eth1桥接</span><br><span class=\"line\">    info( <span class=\"string\">'*** Adding hardware interface'</span>, intfName, <span class=\"string\">'to switch'</span>, switch.name, <span class=\"string\">'\\n'</span> )</span><br><span class=\"line\">    _intf = Intf( intfName, node=switch ) //最关键的函数，用作把一个网卡与一个交换机桥接</span><br><span class=\"line\"> </span><br><span class=\"line\">    info( <span class=\"string\">'*** Note: you may need to reconfigure the interfaces for '</span></span><br><span class=\"line\">          <span class=\"string\">'the Mininet hosts:\\n'</span>, net.hosts, <span class=\"string\">'\\n'</span> )</span><br><span class=\"line\">    c0 = RemoteController( <span class=\"string\">'c0'</span>, ip=<span class=\"string\">'127.0.0.1'</span>, port=<span class=\"number\">6653</span> )</span><br><span class=\"line\">    net.addController(c0)</span><br><span class=\"line\">    net.start()</span><br><span class=\"line\">    CLI( net )</span><br><span class=\"line\">    net.stop()</span><br></pre></td></tr></table></figure><br><br>上面的脚本运行后，在floodlight web UI中可以看到创建了如下拓扑：<br><center><img src=\"5bd388e3/7.png\" alt=\"图7\"></center><br>用上面的脚本设置了虚拟网络中的host的IP地址，MAC地址以及默认网关，然后把 Ubuntu的eth1网卡桥接到s1上，这里实现这个桥接功能主要是由Intf函数起作用，可以参看<a href=\"https://github.com/mininet/mininet/blob/master/examples/hwintf.py：\" target=\"_blank\" rel=\"noopener\">https://github.com/mininet/mininet/blob/master/examples/hwintf.py：</a><br><br>使用 <code>sudo python mytopo.py</code> 运行脚本，出现mininet命令行。在命令行中使用xterm h1打开h1的独立窗口，再ping一下baidu.com。<br><center><img src=\"5bd388e3/8.png\" alt=\"图8\"></center><br>到这里就完成了host访问外网的任务了，而且在Ubuntu和win7中也都可以和host通信（ping通）。<br>最后我根据自己的理解画了个总体的图，仅作为参考，不对的地方请留言指出，谢谢。。。<br><center><img src=\"5bd388e3/9.png\" alt=\"图9\"></center>\n\n<hr>\n<p>参考链接：</p>\n<ol>\n<li><a href=\"http://techandtrains.com/2013/11/24/mininet-host-talking-to-internet/\" target=\"_blank\" rel=\"noopener\">http://techandtrains.com/2013/11/24/mininet-host-talking-to-internet/</a></li>\n<li><a href=\"http://www.muzixing.com/pages/2013/12/06/yuan-chuang-mininetda-jian-zi-ding-yi-wang-luo-tuo-bu-by-muzi.html\" target=\"_blank\" rel=\"noopener\">http://www.muzixing.com/pages/2013/12/06/yuan-chuang-mininetda-jian-zi-ding-yi-wang-luo-tuo-bu-by-muzi.html</a></li>\n</ol>"},{"title":"django 外键model的互相读取","copyright":true,"abbrlink":"d507d673","date":"2015-12-15T02:07:27.000Z","_content":"先设定一个关系模型如下:\n``` python\nfrom django.db import models\nclass Blog(models.Model):\n   name = models.CharField(max_length=100)\n   tagline = models.TextField()\n   def __str__(self):            \n       return self.name\n \nclass Author(models.Model):\n   name = models.CharField(max_length=50)\n   email = models.EmailField()\n   def __str__(self):           \n       return self.name\n \nclass Entry(models.Model):\n   blog = models.ForeignKey(Blog)\n   headline = models.CharField(max_length=255)\n   body_text = models.TextField()\n   authors = models.ManyToManyField(Author)\n   def __str__(self):            \n      return self.headline\n\n```\n<!--more-->\n上面的数据关系很明晰,Entry中有Blog和Author的外键,如果要在Entry中读取blog和author的数据很容易:\n``` python\nentry = Entry.objects.all()\nfor e in entry:\n    blog = e.blog\n    author = e.authors\n```\n要在Blog和Author中读取Entry也可以：\n``` python\nblog = Blog.objects.all()\nentry = blog.entry_set.all()\n \nauthor = Author.objects.all()\nentry = author.entry_set.all()\n```\n\n下面通过entry使blog和author互相读取，比如要知道一个blog的Author只需如下:\n``` python\nblogs = Blog.objects.all()\nfor blog in blogs:\n    if blog.name== “我们想要查询的博客的name”\n        author = blog. entry_set.authors\n```\n要查询一个author的所有blog如下：\n``` python\nauthors = Author.objects.all()\nblogs = []\n \nfor author in authors:\n    if author.name== “我们想要查询的Author的name”\n        for entry in author.entry_set.all():\n            blogs.append(entry. blog)\n```\n-----","source":"_posts/django-外键model的互相读取.md","raw":"---\ntitle: django 外键model的互相读取\ntags:\n  - Python\n  - Django\ncategories:\n  - 原创\n  - Python\ncopyright: true\nabbrlink: d507d673\ndate: 2015-12-15 10:07:27\n---\n先设定一个关系模型如下:\n``` python\nfrom django.db import models\nclass Blog(models.Model):\n   name = models.CharField(max_length=100)\n   tagline = models.TextField()\n   def __str__(self):            \n       return self.name\n \nclass Author(models.Model):\n   name = models.CharField(max_length=50)\n   email = models.EmailField()\n   def __str__(self):           \n       return self.name\n \nclass Entry(models.Model):\n   blog = models.ForeignKey(Blog)\n   headline = models.CharField(max_length=255)\n   body_text = models.TextField()\n   authors = models.ManyToManyField(Author)\n   def __str__(self):            \n      return self.headline\n\n```\n<!--more-->\n上面的数据关系很明晰,Entry中有Blog和Author的外键,如果要在Entry中读取blog和author的数据很容易:\n``` python\nentry = Entry.objects.all()\nfor e in entry:\n    blog = e.blog\n    author = e.authors\n```\n要在Blog和Author中读取Entry也可以：\n``` python\nblog = Blog.objects.all()\nentry = blog.entry_set.all()\n \nauthor = Author.objects.all()\nentry = author.entry_set.all()\n```\n\n下面通过entry使blog和author互相读取，比如要知道一个blog的Author只需如下:\n``` python\nblogs = Blog.objects.all()\nfor blog in blogs:\n    if blog.name== “我们想要查询的博客的name”\n        author = blog. entry_set.authors\n```\n要查询一个author的所有blog如下：\n``` python\nauthors = Author.objects.all()\nblogs = []\n \nfor author in authors:\n    if author.name== “我们想要查询的Author的name”\n        for entry in author.entry_set.all():\n            blogs.append(entry. blog)\n```\n-----","slug":"django-外键model的互相读取","published":1,"updated":"2019-03-03T06:42:20.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtojsgtd000lkaq417vokw77","content":"<p>先设定一个关系模型如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Blog</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">   name = models.CharField(max_length=<span class=\"number\">100</span>)</span><br><span class=\"line\">   tagline = models.TextField()</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span>            </span><br><span class=\"line\">       <span class=\"keyword\">return</span> self.name</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Author</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">   name = models.CharField(max_length=<span class=\"number\">50</span>)</span><br><span class=\"line\">   email = models.EmailField()</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span>           </span><br><span class=\"line\">       <span class=\"keyword\">return</span> self.name</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Entry</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">   blog = models.ForeignKey(Blog)</span><br><span class=\"line\">   headline = models.CharField(max_length=<span class=\"number\">255</span>)</span><br><span class=\"line\">   body_text = models.TextField()</span><br><span class=\"line\">   authors = models.ManyToManyField(Author)</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span>            </span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.headline</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>上面的数据关系很明晰,Entry中有Blog和Author的外键,如果要在Entry中读取blog和author的数据很容易:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry = Entry.objects.all()</span><br><span class=\"line\"><span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> entry:</span><br><span class=\"line\">    blog = e.blog</span><br><span class=\"line\">    author = e.authors</span><br></pre></td></tr></table></figure></p>\n<p>要在Blog和Author中读取Entry也可以：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blog = Blog.objects.all()</span><br><span class=\"line\">entry = blog.entry_set.all()</span><br><span class=\"line\"> </span><br><span class=\"line\">author = Author.objects.all()</span><br><span class=\"line\">entry = author.entry_set.all()</span><br></pre></td></tr></table></figure></p>\n<p>下面通过entry使blog和author互相读取，比如要知道一个blog的Author只需如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blogs = Blog.objects.all()</span><br><span class=\"line\"><span class=\"keyword\">for</span> blog <span class=\"keyword\">in</span> blogs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> blog.name== “我们想要查询的博客的name”</span><br><span class=\"line\">        author = blog. entry_set.authors</span><br></pre></td></tr></table></figure></p>\n<p>要查询一个author的所有blog如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">authors = Author.objects.all()</span><br><span class=\"line\">blogs = []</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> author <span class=\"keyword\">in</span> authors:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> author.name== “我们想要查询的Author的name”</span><br><span class=\"line\">        <span class=\"keyword\">for</span> entry <span class=\"keyword\">in</span> author.entry_set.all():</span><br><span class=\"line\">            blogs.append(entry. blog)</span><br></pre></td></tr></table></figure></p>\n<hr>\n","site":{"data":{}},"excerpt":"<p>先设定一个关系模型如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Blog</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">   name = models.CharField(max_length=<span class=\"number\">100</span>)</span><br><span class=\"line\">   tagline = models.TextField()</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span>            </span><br><span class=\"line\">       <span class=\"keyword\">return</span> self.name</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Author</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">   name = models.CharField(max_length=<span class=\"number\">50</span>)</span><br><span class=\"line\">   email = models.EmailField()</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span>           </span><br><span class=\"line\">       <span class=\"keyword\">return</span> self.name</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Entry</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">   blog = models.ForeignKey(Blog)</span><br><span class=\"line\">   headline = models.CharField(max_length=<span class=\"number\">255</span>)</span><br><span class=\"line\">   body_text = models.TextField()</span><br><span class=\"line\">   authors = models.ManyToManyField(Author)</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span>            </span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.headline</span><br></pre></td></tr></table></figure></p>","more":"<p>上面的数据关系很明晰,Entry中有Blog和Author的外键,如果要在Entry中读取blog和author的数据很容易:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry = Entry.objects.all()</span><br><span class=\"line\"><span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> entry:</span><br><span class=\"line\">    blog = e.blog</span><br><span class=\"line\">    author = e.authors</span><br></pre></td></tr></table></figure></p>\n<p>要在Blog和Author中读取Entry也可以：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blog = Blog.objects.all()</span><br><span class=\"line\">entry = blog.entry_set.all()</span><br><span class=\"line\"> </span><br><span class=\"line\">author = Author.objects.all()</span><br><span class=\"line\">entry = author.entry_set.all()</span><br></pre></td></tr></table></figure></p>\n<p>下面通过entry使blog和author互相读取，比如要知道一个blog的Author只需如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blogs = Blog.objects.all()</span><br><span class=\"line\"><span class=\"keyword\">for</span> blog <span class=\"keyword\">in</span> blogs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> blog.name== “我们想要查询的博客的name”</span><br><span class=\"line\">        author = blog. entry_set.authors</span><br></pre></td></tr></table></figure></p>\n<p>要查询一个author的所有blog如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">authors = Author.objects.all()</span><br><span class=\"line\">blogs = []</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> author <span class=\"keyword\">in</span> authors:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> author.name== “我们想要查询的Author的name”</span><br><span class=\"line\">        <span class=\"keyword\">for</span> entry <span class=\"keyword\">in</span> author.entry_set.all():</span><br><span class=\"line\">            blogs.append(entry. blog)</span><br></pre></td></tr></table></figure></p>\n<hr>"},{"title":"linux和windows的线程机制的区别","copyright":true,"abbrlink":"b3139f08","date":"2016-03-31T14:02:39.000Z","_content":"在Linux内核中，描述一个进程主要是task_struct，一个称为进程描述符的数据结构。这个数据结构很庞大，包含了内核管理一个进程所需的所有信息，描述了一个正在执行的进程，包括进程ID，它打开的文件，进程的地址空间，挂起的信号，进程的状态等等其他信息。\n<!--more-->\nLinux的线程机制和Windows等其他操作系统的很不一样，Linux中没有为线程设置专门的数据结构，也没有专门的线程调度算法，在Linux内核看来，线程就是一个进程，只是一个和其他进程共享资源的特殊进程而已。\n\n在Linux中，创建线程时，和创建普通的进程类似，每个线程都拥有自个的进程描述符task_struct，只是在调用clone()的时候需要传递一些参数标志来指明共享的资源。如图1所示。  \n\n![linux下的进程和线程](./b3139f08/1.jpg)\n\n而在windows等其他操作系统中，进程拥有一个进程描述符，描述一些地址空间和打开的文件等共享资源，进程中包含指向不同线程的指针，这些线程没有进程描述符，只描述一些少量的独有的资源，因此很轻量。同时这些线程共享进程的资源。如图2所示。  \n\n![其他操作系统的进程和线程](./b3139f08/2.jpg)\n\n----","source":"_posts/linux和windows的线程机制的区别.md","raw":"---\ntitle: linux和windows的线程机制的区别\ntags:\n  - linux\n  - windows\n  - 线程机制\ncategories:\n  - 原创\n  - 系统\ncopyright: true\nabbrlink: b3139f08\ndate: 2016-03-31 22:02:39\n---\n在Linux内核中，描述一个进程主要是task_struct，一个称为进程描述符的数据结构。这个数据结构很庞大，包含了内核管理一个进程所需的所有信息，描述了一个正在执行的进程，包括进程ID，它打开的文件，进程的地址空间，挂起的信号，进程的状态等等其他信息。\n<!--more-->\nLinux的线程机制和Windows等其他操作系统的很不一样，Linux中没有为线程设置专门的数据结构，也没有专门的线程调度算法，在Linux内核看来，线程就是一个进程，只是一个和其他进程共享资源的特殊进程而已。\n\n在Linux中，创建线程时，和创建普通的进程类似，每个线程都拥有自个的进程描述符task_struct，只是在调用clone()的时候需要传递一些参数标志来指明共享的资源。如图1所示。  \n\n![linux下的进程和线程](./b3139f08/1.jpg)\n\n而在windows等其他操作系统中，进程拥有一个进程描述符，描述一些地址空间和打开的文件等共享资源，进程中包含指向不同线程的指针，这些线程没有进程描述符，只描述一些少量的独有的资源，因此很轻量。同时这些线程共享进程的资源。如图2所示。  \n\n![其他操作系统的进程和线程](./b3139f08/2.jpg)\n\n----","slug":"linux和windows的线程机制的区别","published":1,"updated":"2019-03-03T06:40:51.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtojsgtf000pkaq4xi6orkmz","content":"<p>在Linux内核中，描述一个进程主要是task_struct，一个称为进程描述符的数据结构。这个数据结构很庞大，包含了内核管理一个进程所需的所有信息，描述了一个正在执行的进程，包括进程ID，它打开的文件，进程的地址空间，挂起的信号，进程的状态等等其他信息。<br><a id=\"more\"></a><br>Linux的线程机制和Windows等其他操作系统的很不一样，Linux中没有为线程设置专门的数据结构，也没有专门的线程调度算法，在Linux内核看来，线程就是一个进程，只是一个和其他进程共享资源的特殊进程而已。</p>\n<p>在Linux中，创建线程时，和创建普通的进程类似，每个线程都拥有自个的进程描述符task_struct，只是在调用clone()的时候需要传递一些参数标志来指明共享的资源。如图1所示。  </p>\n<p><img src=\"./b3139f08/1.jpg\" alt=\"linux下的进程和线程\"></p>\n<p>而在windows等其他操作系统中，进程拥有一个进程描述符，描述一些地址空间和打开的文件等共享资源，进程中包含指向不同线程的指针，这些线程没有进程描述符，只描述一些少量的独有的资源，因此很轻量。同时这些线程共享进程的资源。如图2所示。  </p>\n<p><img src=\"./b3139f08/2.jpg\" alt=\"其他操作系统的进程和线程\"></p>\n<hr>\n","site":{"data":{}},"excerpt":"<p>在Linux内核中，描述一个进程主要是task_struct，一个称为进程描述符的数据结构。这个数据结构很庞大，包含了内核管理一个进程所需的所有信息，描述了一个正在执行的进程，包括进程ID，它打开的文件，进程的地址空间，挂起的信号，进程的状态等等其他信息。<br>","more":"<br>Linux的线程机制和Windows等其他操作系统的很不一样，Linux中没有为线程设置专门的数据结构，也没有专门的线程调度算法，在Linux内核看来，线程就是一个进程，只是一个和其他进程共享资源的特殊进程而已。</p>\n<p>在Linux中，创建线程时，和创建普通的进程类似，每个线程都拥有自个的进程描述符task_struct，只是在调用clone()的时候需要传递一些参数标志来指明共享的资源。如图1所示。  </p>\n<p><img src=\"./b3139f08/1.jpg\" alt=\"linux下的进程和线程\"></p>\n<p>而在windows等其他操作系统中，进程拥有一个进程描述符，描述一些地址空间和打开的文件等共享资源，进程中包含指向不同线程的指针，这些线程没有进程描述符，只描述一些少量的独有的资源，因此很轻量。同时这些线程共享进程的资源。如图2所示。  </p>\n<p><img src=\"./b3139f08/2.jpg\" alt=\"其他操作系统的进程和线程\"></p>\n<hr>"},{"title":"如何编写Floodlight REST 应用","copyright":true,"abbrlink":"b9b7a1c4","date":"2015-12-28T08:41:37.000Z","_content":"可以用任何你喜欢的编程语言编写REST应用\n#### 参照步骤\n1、确定需求，也就是你编写的REST应用需要哪些网络服务和信息。\n2、检查REST API，看看是否有提供你所需的服务。  \n* 如果有，了解其RESTAPI的语法，输入的参数以及可得的选项，这样就可以直接拿来用。  \n* 如果没有，也可能是你所需的网络服务和资源信息没有提供REST API，但却可以在floodlight模块中可获得这些信息，只是没通过API暴露出来。这种情况，你可以自己实现REST API来提供你所需的服务。  \n* 如果既没有REST API，又在floodlight中找不到，那你可以自己开发floodlight Java模块，并且实现自定义的模块的REST API来提供所需的服务。\n<!--more-->\n3、用所有你需要的REST API方法，设计以及组成你的应用。\n4、测试你的应用并且反馈给floodlight。\n\n\n下面通过在floodlight/apps目录下的 python Circuit Pusher应用说明。  \nCurcuit Pusher例子给我们展示了如何创建一个在OpenFlow集群中的两个有IP的主机A和B之间的静态单路径线路。\n#### 设计方法 \n1、确定所需的网络服务和信息：  \n* 主机A和B的接触点，即用（交换机ID，端口）表示的数据实体，代表A和B的物理位置。\n* A和B之间接触点的路由，即从A经过哪个交换机和哪个端口到达B的路径\n* 在A和B路由上所有交换机安装流量线路的服务\n\n2、从RESTAPI中查到的可提供的信息：\n+ 从/wm/device/的GET参数获取设备的接触点信息，比如IP地址\n+ 从/wm/topology/route/<switchIdA>/<portA>/<switchIdB>/<portB>/json可以获取A和B接触点之间的路由信息\n+ 用/wm/staticflowentrypusher/json的POST方法给指定的交换机安装流表项\n\n3、应用设计：\n+ 语言使用Python\n+ 使用os.popen方法发送curl 命令来调用REST API的方法(应该还可以使用os.system)\n+ 熟悉 /wm/device语法特点，然后在命令返回的结果中解析出A和B接触点的交换机\n+ 熟悉 /wm/topology/route的语法，获取交换机和端口用来下发流表项\n+ 对于每个交换机和端口对，可以通过/wm/staticflowentrypusher/json下发流表\n\n----","source":"_posts/如何编写Floodlight-REST-应用.md","raw":"---\ntitle: 如何编写Floodlight REST 应用\ntags:\n  - SDN\n  - Floodlight\ncategories:\n  - 原创\n  - SDN\ncopyright: true\nabbrlink: b9b7a1c4\ndate: 2015-12-28 16:41:37\n---\n可以用任何你喜欢的编程语言编写REST应用\n#### 参照步骤\n1、确定需求，也就是你编写的REST应用需要哪些网络服务和信息。\n2、检查REST API，看看是否有提供你所需的服务。  \n* 如果有，了解其RESTAPI的语法，输入的参数以及可得的选项，这样就可以直接拿来用。  \n* 如果没有，也可能是你所需的网络服务和资源信息没有提供REST API，但却可以在floodlight模块中可获得这些信息，只是没通过API暴露出来。这种情况，你可以自己实现REST API来提供你所需的服务。  \n* 如果既没有REST API，又在floodlight中找不到，那你可以自己开发floodlight Java模块，并且实现自定义的模块的REST API来提供所需的服务。\n<!--more-->\n3、用所有你需要的REST API方法，设计以及组成你的应用。\n4、测试你的应用并且反馈给floodlight。\n\n\n下面通过在floodlight/apps目录下的 python Circuit Pusher应用说明。  \nCurcuit Pusher例子给我们展示了如何创建一个在OpenFlow集群中的两个有IP的主机A和B之间的静态单路径线路。\n#### 设计方法 \n1、确定所需的网络服务和信息：  \n* 主机A和B的接触点，即用（交换机ID，端口）表示的数据实体，代表A和B的物理位置。\n* A和B之间接触点的路由，即从A经过哪个交换机和哪个端口到达B的路径\n* 在A和B路由上所有交换机安装流量线路的服务\n\n2、从RESTAPI中查到的可提供的信息：\n+ 从/wm/device/的GET参数获取设备的接触点信息，比如IP地址\n+ 从/wm/topology/route/<switchIdA>/<portA>/<switchIdB>/<portB>/json可以获取A和B接触点之间的路由信息\n+ 用/wm/staticflowentrypusher/json的POST方法给指定的交换机安装流表项\n\n3、应用设计：\n+ 语言使用Python\n+ 使用os.popen方法发送curl 命令来调用REST API的方法(应该还可以使用os.system)\n+ 熟悉 /wm/device语法特点，然后在命令返回的结果中解析出A和B接触点的交换机\n+ 熟悉 /wm/topology/route的语法，获取交换机和端口用来下发流表项\n+ 对于每个交换机和端口对，可以通过/wm/staticflowentrypusher/json下发流表\n\n----","slug":"如何编写Floodlight-REST-应用","published":1,"updated":"2019-03-03T06:39:38.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtojsgtg000rkaq4rsd161a2","content":"<p>可以用任何你喜欢的编程语言编写REST应用</p>\n<h4 id=\"参照步骤\"><a href=\"#参照步骤\" class=\"headerlink\" title=\"参照步骤\"></a>参照步骤</h4><p>1、确定需求，也就是你编写的REST应用需要哪些网络服务和信息。<br>2、检查REST API，看看是否有提供你所需的服务。  </p>\n<ul>\n<li>如果有，了解其RESTAPI的语法，输入的参数以及可得的选项，这样就可以直接拿来用。  </li>\n<li>如果没有，也可能是你所需的网络服务和资源信息没有提供REST API，但却可以在floodlight模块中可获得这些信息，只是没通过API暴露出来。这种情况，你可以自己实现REST API来提供你所需的服务。  </li>\n<li>如果既没有REST API，又在floodlight中找不到，那你可以自己开发floodlight Java模块，并且实现自定义的模块的REST API来提供所需的服务。<a id=\"more\"></a>\n3、用所有你需要的REST API方法，设计以及组成你的应用。<br>4、测试你的应用并且反馈给floodlight。</li>\n</ul>\n<p>下面通过在floodlight/apps目录下的 python Circuit Pusher应用说明。<br>Curcuit Pusher例子给我们展示了如何创建一个在OpenFlow集群中的两个有IP的主机A和B之间的静态单路径线路。</p>\n<h4 id=\"设计方法\"><a href=\"#设计方法\" class=\"headerlink\" title=\"设计方法\"></a>设计方法</h4><p>1、确定所需的网络服务和信息：  </p>\n<ul>\n<li>主机A和B的接触点，即用（交换机ID，端口）表示的数据实体，代表A和B的物理位置。</li>\n<li>A和B之间接触点的路由，即从A经过哪个交换机和哪个端口到达B的路径</li>\n<li>在A和B路由上所有交换机安装流量线路的服务</li>\n</ul>\n<p>2、从RESTAPI中查到的可提供的信息：</p>\n<ul>\n<li>从/wm/device/的GET参数获取设备的接触点信息，比如IP地址</li>\n<li>从/wm/topology/route/<switchida>/<porta>/<switchidb>/<portb>/json可以获取A和B接触点之间的路由信息</portb></switchidb></porta></switchida></li>\n<li>用/wm/staticflowentrypusher/json的POST方法给指定的交换机安装流表项</li>\n</ul>\n<p>3、应用设计：</p>\n<ul>\n<li>语言使用Python</li>\n<li>使用os.popen方法发送curl 命令来调用REST API的方法(应该还可以使用os.system)</li>\n<li>熟悉 /wm/device语法特点，然后在命令返回的结果中解析出A和B接触点的交换机</li>\n<li>熟悉 /wm/topology/route的语法，获取交换机和端口用来下发流表项</li>\n<li>对于每个交换机和端口对，可以通过/wm/staticflowentrypusher/json下发流表</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"<p>可以用任何你喜欢的编程语言编写REST应用</p>\n<h4 id=\"参照步骤\"><a href=\"#参照步骤\" class=\"headerlink\" title=\"参照步骤\"></a>参照步骤</h4><p>1、确定需求，也就是你编写的REST应用需要哪些网络服务和信息。<br>2、检查REST API，看看是否有提供你所需的服务。  </p>\n<ul>\n<li>如果有，了解其RESTAPI的语法，输入的参数以及可得的选项，这样就可以直接拿来用。  </li>\n<li>如果没有，也可能是你所需的网络服务和资源信息没有提供REST API，但却可以在floodlight模块中可获得这些信息，只是没通过API暴露出来。这种情况，你可以自己实现REST API来提供你所需的服务。  </li>\n<li>如果既没有REST API，又在floodlight中找不到，那你可以自己开发floodlight Java模块，并且实现自定义的模块的REST API来提供所需的服务。","more":"3、用所有你需要的REST API方法，设计以及组成你的应用。<br>4、测试你的应用并且反馈给floodlight。</li>\n</ul>\n<p>下面通过在floodlight/apps目录下的 python Circuit Pusher应用说明。<br>Curcuit Pusher例子给我们展示了如何创建一个在OpenFlow集群中的两个有IP的主机A和B之间的静态单路径线路。</p>\n<h4 id=\"设计方法\"><a href=\"#设计方法\" class=\"headerlink\" title=\"设计方法\"></a>设计方法</h4><p>1、确定所需的网络服务和信息：  </p>\n<ul>\n<li>主机A和B的接触点，即用（交换机ID，端口）表示的数据实体，代表A和B的物理位置。</li>\n<li>A和B之间接触点的路由，即从A经过哪个交换机和哪个端口到达B的路径</li>\n<li>在A和B路由上所有交换机安装流量线路的服务</li>\n</ul>\n<p>2、从RESTAPI中查到的可提供的信息：</p>\n<ul>\n<li>从/wm/device/的GET参数获取设备的接触点信息，比如IP地址</li>\n<li>从/wm/topology/route/<switchida>/<porta>/<switchidb>/<portb>/json可以获取A和B接触点之间的路由信息</portb></switchidb></porta></switchida></li>\n<li>用/wm/staticflowentrypusher/json的POST方法给指定的交换机安装流表项</li>\n</ul>\n<p>3、应用设计：</p>\n<ul>\n<li>语言使用Python</li>\n<li>使用os.popen方法发送curl 命令来调用REST API的方法(应该还可以使用os.system)</li>\n<li>熟悉 /wm/device语法特点，然后在命令返回的结果中解析出A和B接触点的交换机</li>\n<li>熟悉 /wm/topology/route的语法，获取交换机和端口用来下发流表项</li>\n<li>对于每个交换机和端口对，可以通过/wm/staticflowentrypusher/json下发流表</li>\n</ul>\n<hr>"},{"title":"深入解析Class类文件的结构","copyright":true,"abbrlink":"7eb7d5c7","date":"2019-03-21T15:23:07.000Z","_content":"## 前言\n要深入学习Java以及Java虚拟机，深入学习Java字节码文件是绕不开的一条路，只有知道了字节码文件里的排列结构，你才能透彻的了解在JVM里，类加载是怎么加载Java类的，是怎么将二进制流转化为运行时数据结构的。\n\nClass文件是是一组以8字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在Class文件中，中间没有任何分隔符。\n\n这里的Class文件其实不是特指Java的字节码文件，任何编程语言的编译器只要按照字节码文件规范编译成Class文件，都可以在JVM上运行，所以字节码文件和JVM是和语言无关的。\n\n另外一般Class文件指的不一定是存储在磁盘上的以.class后缀结束的文件，是一种泛指，指的是一切按照字节码文件规范排列的二进制字节流。\n## 字节码文件解析\nClass文件采用下面这种类似C语言的结构体的伪结构来存储数据，整个Class文件是一张表，表里又由无符号数和表组成。<!--more-->\n```c++\nClassFile { \n    u4  magic; // 魔数，固定为\"0xCAFEBABY\"\n    u2  minor_version; //jdk次版本号\n    u2  major_version;  //jdk主版本号\n    u2  constant_pool_count;  //常量池数组大小，从1计数\n    cp_info  constant_pool[constant_pool_count - 1]; //常量池数组\n    u2  access_flags;  //类的访问标志，如：public\n    u2  this_class;  //类索引，指向常量池中的类符号引用\n    u2  super_class;  //父类索引，指向常量池中的类符号引用\n    u2  interfaces_count; //实现的接口的数量\n    u2  interfaces[interfaces_count]; //接口列表，按implements后面的接口顺序\n    u2  fields_count;  //字段数\n    field_info  fields[fields_count]; //字段表\n    u2  methods_count; //方法数\n    method_info  methods[methods_count]; //方法表\n    u2  attributes_count; //属性表大小\n    attribute_info  attributes[attributes_count]; //属性表\n}\n\n```\n从上面的伪结构可以看到，Class文件根据上面的顺序把规定的数据类型按照占用的字节依次排列下来。\n\n下面通过一个例子来实战分析一下Class文件\n```java\n//Test.class\npublic class Test { \n    public static int a = 1;\n    public static final int b = 1; \n    public void say(){\n        System.out.println(\"Hello\");\n    }\n}\n```\n\n![字节码文件实战分析](7eb7d5c7/字节码文件实战分析.png)\n\n上图是编译后的Test.class文件的二进制数据，可以按照上面ClassFile的结构顺序依次分析下，下面是部分分析结果：  \n(1) ***u4 magic***  \n&nbsp;&nbsp;&nbsp;&nbsp;4个字节(000h:0123)魔数: 0xCAFEBABY  \n\n(2) ***u2  minor_version***  \n&nbsp;&nbsp;&nbsp;&nbsp;2个字节(000h:45)次版本号: 0x0000, 次版本号为0  \n\n(3) ***u2  major_version***  \n&nbsp;&nbsp;&nbsp;&nbsp;2个字节(000h:67)主版本号: 0x0034,即52,JDK1.0-1.1：45.0 ~ 45.3, 1.1后版本增1，数字加1，所以这里用的是1.1 + 0.(52-45) = 1.8  \n\n(4) ***u2  constant_pool_count***  \n&nbsp;&nbsp;&nbsp;&nbsp;2个字节(000h:89)常量池大小:0x0027,即39，常量池数组是从1开始计数的，说明常量池中有38个常量，后面依次排列的就是常量池的38个常量  \n\n(5) ***cp_info  constant_pool[constant_pool_count - 1]***  \n&nbsp;&nbsp;&nbsp;&nbsp;常量池所占的字节数是由常量池中常量的数量以及类型所决定的，这里有38个常量，每个常量开头都有一个字节的tag标识常量的类型，具体类型可以参考最下面的脑图，根据这个标识可以找到这个常量所占的字节以及含义，下面分析其中一个常量，其余的读者有兴趣可以全部完成  \n- 000h:a 0x0A,表示常量类型为10，查表可知是CONSTANT_Methodref方法符号引用，那接下来的四个字节，前两个字节表示指向常量池中方法所在类的符号引用的索引项，就是常量池的数组下标，所在的位置是方法所在类的符号引用\n- 000h:bc 0x0007,指向常量池数组第7个元素，第7个常量是一个java.lang.Object类的符号引用\n- 000h:de 0x0018, 指向常量池数组的第24个元素，第24个常量是一个名称和类型的符号引用，方法名是`<init>`，描述符是`()V`\n这样第一个常量就分析完成，共占5个字节，表示的是方法符号引用，该方法所在的类是Object类，方法名称是`<init>`, 无参数，返回值是void  \n\n借助工具javap可以更直观的看到我们刚刚分析的部分结果以及全部类文件的结构，使用以下命令即可：\n```\njavap -v Test.class\n```\n结果如图：  \n![javap](7eb7d5c7/javap.png)\n\n通过上面的图可以看到，和我们上面的部分分析是一致的  \n## Class文件结构脑图\n下面是我在看《深入理解Java虚拟机》这本书的时候整理的关于Class文件结构的脑图，图片比较大，右键另存为图片再查看会更方便。  \n\n![Class文件结构脑图](7eb7d5c7/class.png)\n\n---","source":"_posts/深入解析Class类文件的结构.md","raw":"---\ntitle: 深入解析Class类文件的结构\ntags:\n  - java\n  - jvm\ncategories:\n  - 原创\n  - JVM\ncopyright: true\nabbrlink: 7eb7d5c7\ndate: 2019-03-21 23:23:07\n---\n## 前言\n要深入学习Java以及Java虚拟机，深入学习Java字节码文件是绕不开的一条路，只有知道了字节码文件里的排列结构，你才能透彻的了解在JVM里，类加载是怎么加载Java类的，是怎么将二进制流转化为运行时数据结构的。\n\nClass文件是是一组以8字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在Class文件中，中间没有任何分隔符。\n\n这里的Class文件其实不是特指Java的字节码文件，任何编程语言的编译器只要按照字节码文件规范编译成Class文件，都可以在JVM上运行，所以字节码文件和JVM是和语言无关的。\n\n另外一般Class文件指的不一定是存储在磁盘上的以.class后缀结束的文件，是一种泛指，指的是一切按照字节码文件规范排列的二进制字节流。\n## 字节码文件解析\nClass文件采用下面这种类似C语言的结构体的伪结构来存储数据，整个Class文件是一张表，表里又由无符号数和表组成。<!--more-->\n```c++\nClassFile { \n    u4  magic; // 魔数，固定为\"0xCAFEBABY\"\n    u2  minor_version; //jdk次版本号\n    u2  major_version;  //jdk主版本号\n    u2  constant_pool_count;  //常量池数组大小，从1计数\n    cp_info  constant_pool[constant_pool_count - 1]; //常量池数组\n    u2  access_flags;  //类的访问标志，如：public\n    u2  this_class;  //类索引，指向常量池中的类符号引用\n    u2  super_class;  //父类索引，指向常量池中的类符号引用\n    u2  interfaces_count; //实现的接口的数量\n    u2  interfaces[interfaces_count]; //接口列表，按implements后面的接口顺序\n    u2  fields_count;  //字段数\n    field_info  fields[fields_count]; //字段表\n    u2  methods_count; //方法数\n    method_info  methods[methods_count]; //方法表\n    u2  attributes_count; //属性表大小\n    attribute_info  attributes[attributes_count]; //属性表\n}\n\n```\n从上面的伪结构可以看到，Class文件根据上面的顺序把规定的数据类型按照占用的字节依次排列下来。\n\n下面通过一个例子来实战分析一下Class文件\n```java\n//Test.class\npublic class Test { \n    public static int a = 1;\n    public static final int b = 1; \n    public void say(){\n        System.out.println(\"Hello\");\n    }\n}\n```\n\n![字节码文件实战分析](7eb7d5c7/字节码文件实战分析.png)\n\n上图是编译后的Test.class文件的二进制数据，可以按照上面ClassFile的结构顺序依次分析下，下面是部分分析结果：  \n(1) ***u4 magic***  \n&nbsp;&nbsp;&nbsp;&nbsp;4个字节(000h:0123)魔数: 0xCAFEBABY  \n\n(2) ***u2  minor_version***  \n&nbsp;&nbsp;&nbsp;&nbsp;2个字节(000h:45)次版本号: 0x0000, 次版本号为0  \n\n(3) ***u2  major_version***  \n&nbsp;&nbsp;&nbsp;&nbsp;2个字节(000h:67)主版本号: 0x0034,即52,JDK1.0-1.1：45.0 ~ 45.3, 1.1后版本增1，数字加1，所以这里用的是1.1 + 0.(52-45) = 1.8  \n\n(4) ***u2  constant_pool_count***  \n&nbsp;&nbsp;&nbsp;&nbsp;2个字节(000h:89)常量池大小:0x0027,即39，常量池数组是从1开始计数的，说明常量池中有38个常量，后面依次排列的就是常量池的38个常量  \n\n(5) ***cp_info  constant_pool[constant_pool_count - 1]***  \n&nbsp;&nbsp;&nbsp;&nbsp;常量池所占的字节数是由常量池中常量的数量以及类型所决定的，这里有38个常量，每个常量开头都有一个字节的tag标识常量的类型，具体类型可以参考最下面的脑图，根据这个标识可以找到这个常量所占的字节以及含义，下面分析其中一个常量，其余的读者有兴趣可以全部完成  \n- 000h:a 0x0A,表示常量类型为10，查表可知是CONSTANT_Methodref方法符号引用，那接下来的四个字节，前两个字节表示指向常量池中方法所在类的符号引用的索引项，就是常量池的数组下标，所在的位置是方法所在类的符号引用\n- 000h:bc 0x0007,指向常量池数组第7个元素，第7个常量是一个java.lang.Object类的符号引用\n- 000h:de 0x0018, 指向常量池数组的第24个元素，第24个常量是一个名称和类型的符号引用，方法名是`<init>`，描述符是`()V`\n这样第一个常量就分析完成，共占5个字节，表示的是方法符号引用，该方法所在的类是Object类，方法名称是`<init>`, 无参数，返回值是void  \n\n借助工具javap可以更直观的看到我们刚刚分析的部分结果以及全部类文件的结构，使用以下命令即可：\n```\njavap -v Test.class\n```\n结果如图：  \n![javap](7eb7d5c7/javap.png)\n\n通过上面的图可以看到，和我们上面的部分分析是一致的  \n## Class文件结构脑图\n下面是我在看《深入理解Java虚拟机》这本书的时候整理的关于Class文件结构的脑图，图片比较大，右键另存为图片再查看会更方便。  \n\n![Class文件结构脑图](7eb7d5c7/class.png)\n\n---","slug":"深入解析Class类文件的结构","published":1,"updated":"2019-03-25T11:12:55.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtojsgtm000vkaq4p2wrw1u9","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>要深入学习Java以及Java虚拟机，深入学习Java字节码文件是绕不开的一条路，只有知道了字节码文件里的排列结构，你才能透彻的了解在JVM里，类加载是怎么加载Java类的，是怎么将二进制流转化为运行时数据结构的。</p>\n<p>Class文件是是一组以8字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在Class文件中，中间没有任何分隔符。</p>\n<p>这里的Class文件其实不是特指Java的字节码文件，任何编程语言的编译器只要按照字节码文件规范编译成Class文件，都可以在JVM上运行，所以字节码文件和JVM是和语言无关的。</p>\n<p>另外一般Class文件指的不一定是存储在磁盘上的以.class后缀结束的文件，是一种泛指，指的是一切按照字节码文件规范排列的二进制字节流。</p>\n<h2 id=\"字节码文件解析\"><a href=\"#字节码文件解析\" class=\"headerlink\" title=\"字节码文件解析\"></a>字节码文件解析</h2><p>Class文件采用下面这种类似C语言的结构体的伪结构来存储数据，整个Class文件是一张表，表里又由无符号数和表组成。<a id=\"more\"></a><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassFile &#123; </span><br><span class=\"line\">    u4  magic; <span class=\"comment\">// 魔数，固定为\"0xCAFEBABY\"</span></span><br><span class=\"line\">    u2  minor_version; <span class=\"comment\">//jdk次版本号</span></span><br><span class=\"line\">    u2  major_version;  <span class=\"comment\">//jdk主版本号</span></span><br><span class=\"line\">    u2  constant_pool_count;  <span class=\"comment\">//常量池数组大小，从1计数</span></span><br><span class=\"line\">    cp_info  constant_pool[constant_pool_count - <span class=\"number\">1</span>]; <span class=\"comment\">//常量池数组</span></span><br><span class=\"line\">    u2  access_flags;  <span class=\"comment\">//类的访问标志，如：public</span></span><br><span class=\"line\">    u2  this_class;  <span class=\"comment\">//类索引，指向常量池中的类符号引用</span></span><br><span class=\"line\">    u2  super_class;  <span class=\"comment\">//父类索引，指向常量池中的类符号引用</span></span><br><span class=\"line\">    u2  interfaces_count; <span class=\"comment\">//实现的接口的数量</span></span><br><span class=\"line\">    u2  interfaces[interfaces_count]; <span class=\"comment\">//接口列表，按implements后面的接口顺序</span></span><br><span class=\"line\">    u2  fields_count;  <span class=\"comment\">//字段数</span></span><br><span class=\"line\">    field_info  fields[fields_count]; <span class=\"comment\">//字段表</span></span><br><span class=\"line\">    u2  methods_count; <span class=\"comment\">//方法数</span></span><br><span class=\"line\">    method_info  methods[methods_count]; <span class=\"comment\">//方法表</span></span><br><span class=\"line\">    u2  attributes_count; <span class=\"comment\">//属性表大小</span></span><br><span class=\"line\">    attribute_info  attributes[attributes_count]; <span class=\"comment\">//属性表</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从上面的伪结构可以看到，Class文件根据上面的顺序把规定的数据类型按照占用的字节依次排列下来。</p>\n<p>下面通过一个例子来实战分析一下Class文件<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Test.class</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> b = <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"7eb7d5c7/字节码文件实战分析.png\" alt=\"字节码文件实战分析\"></p>\n<p>上图是编译后的Test.class文件的二进制数据，可以按照上面ClassFile的结构顺序依次分析下，下面是部分分析结果：<br>(1) <strong><em>u4 magic</em></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;4个字节(000h:0123)魔数: 0xCAFEBABY  </p>\n<p>(2) <strong><em>u2  minor_version</em></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;2个字节(000h:45)次版本号: 0x0000, 次版本号为0  </p>\n<p>(3) <strong><em>u2  major_version</em></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;2个字节(000h:67)主版本号: 0x0034,即52,JDK1.0-1.1：45.0 ~ 45.3, 1.1后版本增1，数字加1，所以这里用的是1.1 + 0.(52-45) = 1.8  </p>\n<p>(4) <strong><em>u2  constant_pool_count</em></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;2个字节(000h:89)常量池大小:0x0027,即39，常量池数组是从1开始计数的，说明常量池中有38个常量，后面依次排列的就是常量池的38个常量  </p>\n<p>(5) <strong><em>cp_info  constant_pool[constant_pool_count - 1]</em></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;常量池所占的字节数是由常量池中常量的数量以及类型所决定的，这里有38个常量，每个常量开头都有一个字节的tag标识常量的类型，具体类型可以参考最下面的脑图，根据这个标识可以找到这个常量所占的字节以及含义，下面分析其中一个常量，其余的读者有兴趣可以全部完成  </p>\n<ul>\n<li>000h:a 0x0A,表示常量类型为10，查表可知是CONSTANT_Methodref方法符号引用，那接下来的四个字节，前两个字节表示指向常量池中方法所在类的符号引用的索引项，就是常量池的数组下标，所在的位置是方法所在类的符号引用</li>\n<li>000h:bc 0x0007,指向常量池数组第7个元素，第7个常量是一个java.lang.Object类的符号引用</li>\n<li>000h:de 0x0018, 指向常量池数组的第24个元素，第24个常量是一个名称和类型的符号引用，方法名是<code>&lt;init&gt;</code>，描述符是<code>()V</code><br>这样第一个常量就分析完成，共占5个字节，表示的是方法符号引用，该方法所在的类是Object类，方法名称是<code>&lt;init&gt;</code>, 无参数，返回值是void  </li>\n</ul>\n<p>借助工具javap可以更直观的看到我们刚刚分析的部分结果以及全部类文件的结构，使用以下命令即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javap -v Test.class</span><br></pre></td></tr></table></figure></p>\n<p>结果如图：<br><img src=\"7eb7d5c7/javap.png\" alt=\"javap\"></p>\n<p>通过上面的图可以看到，和我们上面的部分分析是一致的  </p>\n<h2 id=\"Class文件结构脑图\"><a href=\"#Class文件结构脑图\" class=\"headerlink\" title=\"Class文件结构脑图\"></a>Class文件结构脑图</h2><p>下面是我在看《深入理解Java虚拟机》这本书的时候整理的关于Class文件结构的脑图，图片比较大，右键另存为图片再查看会更方便。  </p>\n<p><img src=\"7eb7d5c7/class.png\" alt=\"Class文件结构脑图\"></p>\n<hr>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>要深入学习Java以及Java虚拟机，深入学习Java字节码文件是绕不开的一条路，只有知道了字节码文件里的排列结构，你才能透彻的了解在JVM里，类加载是怎么加载Java类的，是怎么将二进制流转化为运行时数据结构的。</p>\n<p>Class文件是是一组以8字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在Class文件中，中间没有任何分隔符。</p>\n<p>这里的Class文件其实不是特指Java的字节码文件，任何编程语言的编译器只要按照字节码文件规范编译成Class文件，都可以在JVM上运行，所以字节码文件和JVM是和语言无关的。</p>\n<p>另外一般Class文件指的不一定是存储在磁盘上的以.class后缀结束的文件，是一种泛指，指的是一切按照字节码文件规范排列的二进制字节流。</p>\n<h2 id=\"字节码文件解析\"><a href=\"#字节码文件解析\" class=\"headerlink\" title=\"字节码文件解析\"></a>字节码文件解析</h2><p>Class文件采用下面这种类似C语言的结构体的伪结构来存储数据，整个Class文件是一张表，表里又由无符号数和表组成。","more":"<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassFile &#123; </span><br><span class=\"line\">    u4  magic; <span class=\"comment\">// 魔数，固定为\"0xCAFEBABY\"</span></span><br><span class=\"line\">    u2  minor_version; <span class=\"comment\">//jdk次版本号</span></span><br><span class=\"line\">    u2  major_version;  <span class=\"comment\">//jdk主版本号</span></span><br><span class=\"line\">    u2  constant_pool_count;  <span class=\"comment\">//常量池数组大小，从1计数</span></span><br><span class=\"line\">    cp_info  constant_pool[constant_pool_count - <span class=\"number\">1</span>]; <span class=\"comment\">//常量池数组</span></span><br><span class=\"line\">    u2  access_flags;  <span class=\"comment\">//类的访问标志，如：public</span></span><br><span class=\"line\">    u2  this_class;  <span class=\"comment\">//类索引，指向常量池中的类符号引用</span></span><br><span class=\"line\">    u2  super_class;  <span class=\"comment\">//父类索引，指向常量池中的类符号引用</span></span><br><span class=\"line\">    u2  interfaces_count; <span class=\"comment\">//实现的接口的数量</span></span><br><span class=\"line\">    u2  interfaces[interfaces_count]; <span class=\"comment\">//接口列表，按implements后面的接口顺序</span></span><br><span class=\"line\">    u2  fields_count;  <span class=\"comment\">//字段数</span></span><br><span class=\"line\">    field_info  fields[fields_count]; <span class=\"comment\">//字段表</span></span><br><span class=\"line\">    u2  methods_count; <span class=\"comment\">//方法数</span></span><br><span class=\"line\">    method_info  methods[methods_count]; <span class=\"comment\">//方法表</span></span><br><span class=\"line\">    u2  attributes_count; <span class=\"comment\">//属性表大小</span></span><br><span class=\"line\">    attribute_info  attributes[attributes_count]; <span class=\"comment\">//属性表</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从上面的伪结构可以看到，Class文件根据上面的顺序把规定的数据类型按照占用的字节依次排列下来。</p>\n<p>下面通过一个例子来实战分析一下Class文件<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Test.class</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> b = <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"7eb7d5c7/字节码文件实战分析.png\" alt=\"字节码文件实战分析\"></p>\n<p>上图是编译后的Test.class文件的二进制数据，可以按照上面ClassFile的结构顺序依次分析下，下面是部分分析结果：<br>(1) <strong><em>u4 magic</em></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;4个字节(000h:0123)魔数: 0xCAFEBABY  </p>\n<p>(2) <strong><em>u2  minor_version</em></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;2个字节(000h:45)次版本号: 0x0000, 次版本号为0  </p>\n<p>(3) <strong><em>u2  major_version</em></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;2个字节(000h:67)主版本号: 0x0034,即52,JDK1.0-1.1：45.0 ~ 45.3, 1.1后版本增1，数字加1，所以这里用的是1.1 + 0.(52-45) = 1.8  </p>\n<p>(4) <strong><em>u2  constant_pool_count</em></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;2个字节(000h:89)常量池大小:0x0027,即39，常量池数组是从1开始计数的，说明常量池中有38个常量，后面依次排列的就是常量池的38个常量  </p>\n<p>(5) <strong><em>cp_info  constant_pool[constant_pool_count - 1]</em></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;常量池所占的字节数是由常量池中常量的数量以及类型所决定的，这里有38个常量，每个常量开头都有一个字节的tag标识常量的类型，具体类型可以参考最下面的脑图，根据这个标识可以找到这个常量所占的字节以及含义，下面分析其中一个常量，其余的读者有兴趣可以全部完成  </p>\n<ul>\n<li>000h:a 0x0A,表示常量类型为10，查表可知是CONSTANT_Methodref方法符号引用，那接下来的四个字节，前两个字节表示指向常量池中方法所在类的符号引用的索引项，就是常量池的数组下标，所在的位置是方法所在类的符号引用</li>\n<li>000h:bc 0x0007,指向常量池数组第7个元素，第7个常量是一个java.lang.Object类的符号引用</li>\n<li>000h:de 0x0018, 指向常量池数组的第24个元素，第24个常量是一个名称和类型的符号引用，方法名是<code>&lt;init&gt;</code>，描述符是<code>()V</code><br>这样第一个常量就分析完成，共占5个字节，表示的是方法符号引用，该方法所在的类是Object类，方法名称是<code>&lt;init&gt;</code>, 无参数，返回值是void  </li>\n</ul>\n<p>借助工具javap可以更直观的看到我们刚刚分析的部分结果以及全部类文件的结构，使用以下命令即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javap -v Test.class</span><br></pre></td></tr></table></figure></p>\n<p>结果如图：<br><img src=\"7eb7d5c7/javap.png\" alt=\"javap\"></p>\n<p>通过上面的图可以看到，和我们上面的部分分析是一致的  </p>\n<h2 id=\"Class文件结构脑图\"><a href=\"#Class文件结构脑图\" class=\"headerlink\" title=\"Class文件结构脑图\"></a>Class文件结构脑图</h2><p>下面是我在看《深入理解Java虚拟机》这本书的时候整理的关于Class文件结构的脑图，图片比较大，右键另存为图片再查看会更方便。  </p>\n<p><img src=\"7eb7d5c7/class.png\" alt=\"Class文件结构脑图\"></p>\n<hr>"},{"title":"简单配置bind9 的master 和slave","copyright":true,"abbrlink":"7ce23410","date":"2016-01-02T12:55:21.000Z","_content":"**系统**：两台FreeBSD 10.1\n**部署**：一台做master，一台做slave\n\n**具体步骤如下：**\n1. 首先是安装bind9，我是用的ansible远程安装的，暂时还没有把主从两个安装和配置分开，所以一开始在两台FreeBSD上安装的是一样的bind9，包括named.conf和zone文件都是一样，后面再分开配置的。\n\n2. 安装的过程就不赘述了，网上有很多资料，安装完后，就该分别配置两台主机使它们分别作为主从域名服务器了，其实基本配置差不多，比如options里的参数就差不多，只需要改变zone的配置。  \n<!--more-->\n**在master中：**\n```\nzone\"XXX.com\" IN {\n            type master;\n            file \"XXX.com.zone\";\n            allow-update { none; };\n            allow-transfer { <slave的IP地址>; };  //允许被哪台slave复制数据过去\n};\n```\n  **在slave中：**\n  ```\n  zone \"XXX.com\" IN {\n             type slave;\n             file \"slaves/XXX.com.zone\"; //自动创建并从master复制内容\n             masters { <master的IP地址>; };  //指明那台是master，可以有多台，指定多台的时候，multi-master设置为yes\n  };\n  ```\n \n3. Zone对应的资源文件只需要在master里编写和修改就可以了，配置好了后，分别重启服务：service named restart ，就可以看到在slave中原本没有资源文件，现在自动从master中同步过来了。当master中的zone设置了allow-transfer，且资源文件里的Serial有改变时，就会通知slave同步masters里对应地址的主域名服务器的数据。\n\n----","source":"_posts/简单配置bind9-的master-和slave.md","raw":"---\ntitle: 简单配置bind9 的master 和slave\ntags:\n  - bind9\ncategories:\n  - 原创\n  - 网络\ncopyright: true\nabbrlink: 7ce23410\ndate: 2016-01-02 20:55:21\n---\n**系统**：两台FreeBSD 10.1\n**部署**：一台做master，一台做slave\n\n**具体步骤如下：**\n1. 首先是安装bind9，我是用的ansible远程安装的，暂时还没有把主从两个安装和配置分开，所以一开始在两台FreeBSD上安装的是一样的bind9，包括named.conf和zone文件都是一样，后面再分开配置的。\n\n2. 安装的过程就不赘述了，网上有很多资料，安装完后，就该分别配置两台主机使它们分别作为主从域名服务器了，其实基本配置差不多，比如options里的参数就差不多，只需要改变zone的配置。  \n<!--more-->\n**在master中：**\n```\nzone\"XXX.com\" IN {\n            type master;\n            file \"XXX.com.zone\";\n            allow-update { none; };\n            allow-transfer { <slave的IP地址>; };  //允许被哪台slave复制数据过去\n};\n```\n  **在slave中：**\n  ```\n  zone \"XXX.com\" IN {\n             type slave;\n             file \"slaves/XXX.com.zone\"; //自动创建并从master复制内容\n             masters { <master的IP地址>; };  //指明那台是master，可以有多台，指定多台的时候，multi-master设置为yes\n  };\n  ```\n \n3. Zone对应的资源文件只需要在master里编写和修改就可以了，配置好了后，分别重启服务：service named restart ，就可以看到在slave中原本没有资源文件，现在自动从master中同步过来了。当master中的zone设置了allow-transfer，且资源文件里的Serial有改变时，就会通知slave同步masters里对应地址的主域名服务器的数据。\n\n----","slug":"简单配置bind9-的master-和slave","published":1,"updated":"2019-03-03T06:39:22.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtojsgtn000xkaq46vd072v6","content":"<p><strong>系统</strong>：两台FreeBSD 10.1<br><strong>部署</strong>：一台做master，一台做slave</p>\n<p><strong>具体步骤如下：</strong></p>\n<ol>\n<li><p>首先是安装bind9，我是用的ansible远程安装的，暂时还没有把主从两个安装和配置分开，所以一开始在两台FreeBSD上安装的是一样的bind9，包括named.conf和zone文件都是一样，后面再分开配置的。</p>\n</li>\n<li><p>安装的过程就不赘述了，网上有很多资料，安装完后，就该分别配置两台主机使它们分别作为主从域名服务器了，其实基本配置差不多，比如options里的参数就差不多，只需要改变zone的配置。  </p>\n<a id=\"more\"></a>\n<p><strong>在master中：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zone&quot;XXX.com&quot; IN &#123;</span><br><span class=\"line\">            type master;</span><br><span class=\"line\">            file &quot;XXX.com.zone&quot;;</span><br><span class=\"line\">            allow-update &#123; none; &#125;;</span><br><span class=\"line\">            allow-transfer &#123; &lt;slave的IP地址&gt;; &#125;;  //允许被哪台slave复制数据过去</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>在slave中：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zone &quot;XXX.com&quot; IN &#123;</span><br><span class=\"line\">             type slave;</span><br><span class=\"line\">             file &quot;slaves/XXX.com.zone&quot;; //自动创建并从master复制内容</span><br><span class=\"line\">             masters &#123; &lt;master的IP地址&gt;; &#125;;  //指明那台是master，可以有多台，指定多台的时候，multi-master设置为yes</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"3\">\n<li>Zone对应的资源文件只需要在master里编写和修改就可以了，配置好了后，分别重启服务：service named restart ，就可以看到在slave中原本没有资源文件，现在自动从master中同步过来了。当master中的zone设置了allow-transfer，且资源文件里的Serial有改变时，就会通知slave同步masters里对应地址的主域名服务器的数据。</li>\n</ol>\n<hr>\n","site":{"data":{}},"excerpt":"<p><strong>系统</strong>：两台FreeBSD 10.1<br><strong>部署</strong>：一台做master，一台做slave</p>\n<p><strong>具体步骤如下：</strong></p>\n<ol>\n<li><p>首先是安装bind9，我是用的ansible远程安装的，暂时还没有把主从两个安装和配置分开，所以一开始在两台FreeBSD上安装的是一样的bind9，包括named.conf和zone文件都是一样，后面再分开配置的。</p>\n</li>\n<li><p>安装的过程就不赘述了，网上有很多资料，安装完后，就该分别配置两台主机使它们分别作为主从域名服务器了，其实基本配置差不多，比如options里的参数就差不多，只需要改变zone的配置。  </p>","more":"<p><strong>在master中：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zone&quot;XXX.com&quot; IN &#123;</span><br><span class=\"line\">            type master;</span><br><span class=\"line\">            file &quot;XXX.com.zone&quot;;</span><br><span class=\"line\">            allow-update &#123; none; &#125;;</span><br><span class=\"line\">            allow-transfer &#123; &lt;slave的IP地址&gt;; &#125;;  //允许被哪台slave复制数据过去</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>在slave中：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zone &quot;XXX.com&quot; IN &#123;</span><br><span class=\"line\">             type slave;</span><br><span class=\"line\">             file &quot;slaves/XXX.com.zone&quot;; //自动创建并从master复制内容</span><br><span class=\"line\">             masters &#123; &lt;master的IP地址&gt;; &#125;;  //指明那台是master，可以有多台，指定多台的时候，multi-master设置为yes</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"3\">\n<li>Zone对应的资源文件只需要在master里编写和修改就可以了，配置好了后，分别重启服务：service named restart ，就可以看到在slave中原本没有资源文件，现在自动从master中同步过来了。当master中的zone设置了allow-transfer，且资源文件里的Serial有改变时，就会通知slave同步masters里对应地址的主域名服务器的数据。</li>\n</ol>\n<hr>"},{"title":"记一次github提交失败的坑","copyright":true,"abbrlink":"f587e199","date":"2016-07-02T08:35:57.000Z","_content":"git push的时候出现错误：\n```shell\n$ blogweb git:(master) git push\n> remote: Permission to XXX/XXX.git denied to XXX.\nfatal: unable to access 'https://github.com/XXX/XXX.git/': The requested URL returned error: 403\n```\n<!--more-->\n先试着把https方式换成ssh方式\n```shell\n$ vim .git/config\n[core]\n        repositoryformatversion = 0\n        filemode = true\n        bare = false\n        logallrefupdates = true\n        ignorecase = true\n        precomposeunicode = true\n[remote \"origin\"]\n        url = git@github.com:XXX/XXX.git\n        fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n        remote = origin\n        merge = refs/heads/master\n```\n执行命令：\n```shell\n$ git remote set-url origin git@github.com:XXX/XXX.git\n$ git push\n```\n又报另一个错：\n```shell\n> ERROR: Permission to XXX/XXX.git denied to deploy key\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n因为之前在本机连过github，也推过代码，一开始也没想到key的问题\n\n最后还是去github上的设置看了下，发现竟然没加ssh keys，然后想把本地~/.ssh/id_rsa.pub里的公钥加上，结果报Error: Key already in use错误\n使用下面命令看看密钥用在哪儿了：\n```shell\n$ ssh -T -ai ~/.ssh/id_rsa git@github.com\n> Hi XXX/XXX! You've successfully authenticated, but GitHub does not provide shell access.\n```\n发现问题了，用户名竟然是我的github名+仓库名，去github上的这个仓库看了下，还真有个key的配置，删除后，再重新配置全局的ssh keys\n\n再执行以下命令，变正常了，push也成功了\n```shell\n$ ssh -T -ai ~/.ssh/id_rsa git@github.com\n> Hi XXX! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n参考：\nhttps://help.github.com/en/articles/error-permission-denied-publickey\nhttps://help.github.com/en/articles/error-key-already-in-use\n\n-----","source":"_posts/记一次github提交失败的坑.md","raw":"---\ntitle: 记一次github提交失败的坑\ntags:\n  - 填坑\ncategories:\n  - 原创\n  - Git\ncopyright: true\nabbrlink: f587e199\ndate: 2016-07-02 16:35:57\n---\ngit push的时候出现错误：\n```shell\n$ blogweb git:(master) git push\n> remote: Permission to XXX/XXX.git denied to XXX.\nfatal: unable to access 'https://github.com/XXX/XXX.git/': The requested URL returned error: 403\n```\n<!--more-->\n先试着把https方式换成ssh方式\n```shell\n$ vim .git/config\n[core]\n        repositoryformatversion = 0\n        filemode = true\n        bare = false\n        logallrefupdates = true\n        ignorecase = true\n        precomposeunicode = true\n[remote \"origin\"]\n        url = git@github.com:XXX/XXX.git\n        fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n        remote = origin\n        merge = refs/heads/master\n```\n执行命令：\n```shell\n$ git remote set-url origin git@github.com:XXX/XXX.git\n$ git push\n```\n又报另一个错：\n```shell\n> ERROR: Permission to XXX/XXX.git denied to deploy key\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n因为之前在本机连过github，也推过代码，一开始也没想到key的问题\n\n最后还是去github上的设置看了下，发现竟然没加ssh keys，然后想把本地~/.ssh/id_rsa.pub里的公钥加上，结果报Error: Key already in use错误\n使用下面命令看看密钥用在哪儿了：\n```shell\n$ ssh -T -ai ~/.ssh/id_rsa git@github.com\n> Hi XXX/XXX! You've successfully authenticated, but GitHub does not provide shell access.\n```\n发现问题了，用户名竟然是我的github名+仓库名，去github上的这个仓库看了下，还真有个key的配置，删除后，再重新配置全局的ssh keys\n\n再执行以下命令，变正常了，push也成功了\n```shell\n$ ssh -T -ai ~/.ssh/id_rsa git@github.com\n> Hi XXX! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n参考：\nhttps://help.github.com/en/articles/error-permission-denied-publickey\nhttps://help.github.com/en/articles/error-key-already-in-use\n\n-----","slug":"记一次github提交失败的坑","published":1,"updated":"2019-03-03T06:38:39.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtojsgtp0012kaq47ob53791","content":"<p>git push的时候出现错误：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> blogweb git:(master) git push</span><br><span class=\"line\"><span class=\"meta\">&gt;</span> remote: Permission to XXX/XXX.git denied to XXX.</span><br><span class=\"line\">fatal: unable to access 'https://github.com/XXX/XXX.git/': The requested URL returned error: 403</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>先试着把https方式换成ssh方式<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> vim .git/config</span><br><span class=\"line\">[core]</span><br><span class=\"line\">        repositoryformatversion = 0</span><br><span class=\"line\">        filemode = true</span><br><span class=\"line\">        bare = false</span><br><span class=\"line\">        logallrefupdates = true</span><br><span class=\"line\">        ignorecase = true</span><br><span class=\"line\">        precomposeunicode = true</span><br><span class=\"line\">[remote \"origin\"]</span><br><span class=\"line\">        url = git@github.com:XXX/XXX.git</span><br><span class=\"line\">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class=\"line\">[branch \"master\"]</span><br><span class=\"line\">        remote = origin</span><br><span class=\"line\">        merge = refs/heads/master</span><br></pre></td></tr></table></figure></p>\n<p>执行命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git remote set-url origin git@github.com:XXX/XXX.git</span><br><span class=\"line\"><span class=\"meta\">$</span> git push</span><br></pre></td></tr></table></figure></p>\n<p>又报另一个错：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span> ERROR: Permission to XXX/XXX.git denied to deploy key</span><br><span class=\"line\">fatal: Could not read from remote repository.</span><br><span class=\"line\"></span><br><span class=\"line\">Please make sure you have the correct access rights</span><br><span class=\"line\">and the repository exists.</span><br></pre></td></tr></table></figure></p>\n<p>因为之前在本机连过github，也推过代码，一开始也没想到key的问题</p>\n<p>最后还是去github上的设置看了下，发现竟然没加ssh keys，然后想把本地~/.ssh/id_rsa.pub里的公钥加上，结果报Error: Key already in use错误<br>使用下面命令看看密钥用在哪儿了：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> ssh -T -ai ~/.ssh/id_rsa git@github.com</span><br><span class=\"line\"><span class=\"meta\">&gt;</span> Hi XXX/XXX! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></p>\n<p>发现问题了，用户名竟然是我的github名+仓库名，去github上的这个仓库看了下，还真有个key的配置，删除后，再重新配置全局的ssh keys</p>\n<p>再执行以下命令，变正常了，push也成功了<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> ssh -T -ai ~/.ssh/id_rsa git@github.com</span><br><span class=\"line\"><span class=\"meta\">&gt;</span> Hi XXX! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"https://help.github.com/en/articles/error-permission-denied-publickey\" target=\"_blank\" rel=\"noopener\">https://help.github.com/en/articles/error-permission-denied-publickey</a><br><a href=\"https://help.github.com/en/articles/error-key-already-in-use\" target=\"_blank\" rel=\"noopener\">https://help.github.com/en/articles/error-key-already-in-use</a></p>\n<hr>\n","site":{"data":{}},"excerpt":"<p>git push的时候出现错误：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> blogweb git:(master) git push</span><br><span class=\"line\"><span class=\"meta\">&gt;</span> remote: Permission to XXX/XXX.git denied to XXX.</span><br><span class=\"line\">fatal: unable to access 'https://github.com/XXX/XXX.git/': The requested URL returned error: 403</span><br></pre></td></tr></table></figure></p>","more":"<p>先试着把https方式换成ssh方式<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> vim .git/config</span><br><span class=\"line\">[core]</span><br><span class=\"line\">        repositoryformatversion = 0</span><br><span class=\"line\">        filemode = true</span><br><span class=\"line\">        bare = false</span><br><span class=\"line\">        logallrefupdates = true</span><br><span class=\"line\">        ignorecase = true</span><br><span class=\"line\">        precomposeunicode = true</span><br><span class=\"line\">[remote \"origin\"]</span><br><span class=\"line\">        url = git@github.com:XXX/XXX.git</span><br><span class=\"line\">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class=\"line\">[branch \"master\"]</span><br><span class=\"line\">        remote = origin</span><br><span class=\"line\">        merge = refs/heads/master</span><br></pre></td></tr></table></figure></p>\n<p>执行命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git remote set-url origin git@github.com:XXX/XXX.git</span><br><span class=\"line\"><span class=\"meta\">$</span> git push</span><br></pre></td></tr></table></figure></p>\n<p>又报另一个错：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span> ERROR: Permission to XXX/XXX.git denied to deploy key</span><br><span class=\"line\">fatal: Could not read from remote repository.</span><br><span class=\"line\"></span><br><span class=\"line\">Please make sure you have the correct access rights</span><br><span class=\"line\">and the repository exists.</span><br></pre></td></tr></table></figure></p>\n<p>因为之前在本机连过github，也推过代码，一开始也没想到key的问题</p>\n<p>最后还是去github上的设置看了下，发现竟然没加ssh keys，然后想把本地~/.ssh/id_rsa.pub里的公钥加上，结果报Error: Key already in use错误<br>使用下面命令看看密钥用在哪儿了：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> ssh -T -ai ~/.ssh/id_rsa git@github.com</span><br><span class=\"line\"><span class=\"meta\">&gt;</span> Hi XXX/XXX! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></p>\n<p>发现问题了，用户名竟然是我的github名+仓库名，去github上的这个仓库看了下，还真有个key的配置，删除后，再重新配置全局的ssh keys</p>\n<p>再执行以下命令，变正常了，push也成功了<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> ssh -T -ai ~/.ssh/id_rsa git@github.com</span><br><span class=\"line\"><span class=\"meta\">&gt;</span> Hi XXX! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"https://help.github.com/en/articles/error-permission-denied-publickey\" target=\"_blank\" rel=\"noopener\">https://help.github.com/en/articles/error-permission-denied-publickey</a><br><a href=\"https://help.github.com/en/articles/error-key-already-in-use\" target=\"_blank\" rel=\"noopener\">https://help.github.com/en/articles/error-key-already-in-use</a></p>\n<hr>"},{"title":"深入理解JVM类加载机制","author":"Jackie Lee","abbrlink":"7a3ae3d8","copyright":true,"date":"2019-03-24T07:18:00.000Z","_content":"## 前言\n#### 什么是类加载？\n虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的java类型。\n#### 加载什么？\n前面的定义已经讲了是加载描述类的数据，也就是Class文件，关于Class文件，我在《深入解析Class类文件的结构》一文中进行了分析。\n#### 谁来加载？\n加载描述类的类文件的二进制流是由类加载器完成的，已有的三种类加载和自定义的类加载器组成了类加载器子系统，关于类加载器，下文会详细讲述。\n#### 怎么加载？\n这就是本文的重点，类加载机制中的类加载流程。\n可以通过下图整体上看一下类加载在JVM体系中的位置<!--more-->\n![JVM体系结构.png](7a3ae3d8/JVM体系结构.png)\n#### 类的生命周期\n类的生命周期共有7个阶段，分别如下图：  \n![类的生命周期.png](7a3ae3d8/类的生命周期.png)  \n前5个阶段属于类加载流程的范围，其中验证、准备、解析又被称为连接，类加载的5个阶段并不是按照顺序依次完成的，除了解析可能会在初始化之后开始，其他的几个阶段的开始顺序是确定的，但结束顺序不一定，可能会交叉着进行，加载还没完成，连接可能已经开始。\n\n## 类加载流程\n类加载分为5个过程，分别是加载、验证、准备、解析、初始化，下面分别对这几个过程进行讲述，尽量简短明了。\n### 加载\n>\"加载\"是\"类加载\"流程的一个阶段\n\n加载阶段主要干的3件事：\n1. 通过一个类的全限定名获取定义此类的二进制字节流\n2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构\n3. 在内存中生成一个代表这个类的java.lang.Class实例，作为访问入口\n\n在这三件事里，开发人员能干预的是第一件事，我们可以使用系统的三个类加载器去加载我们想要加载的类文件，也可以自定义类加载器去获取二进制字节流。 \n\n定义类的二进制字节流不一定是经过编译后存储在磁盘上的.class文件，有可能是以下来源：\n1. 从ZIP包中读取，如：JAR、EAR、WAR\n2. 从网络中获取，如：Applet\n3. 运行时计算生成，如：动态代理技术\n4. 由其他文件生成，如：JSP文件生成.class\n5. 从数据库中读取，中间件服务器，如：SAP Netweaver\n\nHotspot虚拟机中，Class实例不是在堆上分配空间，而是存放在方法区中，这个实例在代码中可以轻松的获取到，并通过它可以获取代表某个类的各种数据结构。\n### 验证\n>验证是对输入的字节流进行检查的过程\n\n为什么要有验证这个过程呢？就是因为加载的对象：描述类的二进制字节流，来源广泛，不得不防止它被小人利用，损害虚拟机的正常运行，导致崩溃。所以总共有四个验证过程，分别如下图：\n![4个验证过程.jpg](7a3ae3d8/4个验证过程.jpg)\n1. 文件格式验证\n这个阶段直接操作字节流，后面的三个阶段是基于方法区的存储结构，这个阶段主要是验证文件本身的字节码是不是符合规范，目的是保证输入的字节流可以被正确的存储在方法区内。上图中的四个检查项只是其中的一小部分，真正的验证点还有很多。\n2. 元数据验证\n这个阶段主要是验证类的元数据信息是否符合Java语言规范，比如检查是否有父类，除了Objec，其他类都应该要有父类，否则就不符合规范了；被final修饰的不允许被继承。\n3. 字节码验证\n这个阶段主要是对类的方法体进行验证，保证类方法的运行不会对虚拟机造成危害。这是4个验证里最复杂的一个，因为要通过数据流和控制流的分析，确定程序语义是合法的、符合逻辑的。\n4. 符号引用验证\n上面三个阶段是对类本身进行验证，而符号引用验证阶段主要是对类以外的信息进行验证，后面会讲到解析是将符号引用替换成直接引用，所以这里验证的目的是确保符号引用是正确的，确保后面的解析过程能顺利的进行。\n\n### 准备\n>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段\n\n注意这里是为类变量分配内存，而且是分配在方法区中，实例变量是后面随着实例一起分配在堆上的。\n\n设置初始值也不是代码里赋的值，而是各个数据类型规定的零值，比如基础类型是相应类型不同字节长度的0，引用类型是null。\n\n不是每个类变量都是设置为零值，被final修饰的常量，因为在编译期带有一个ConstantValue属性，属性值则是该常量在代码里赋的值，这个值在准备阶段前就已经确定了，所以在准备阶段设置值的时候，直接取的ConstantValue给类常量。\n下面的例子可以很好的了解准备阶段，准备阶段过后，a、b、c分别是多少？\n```java\npublic class Test {\n    public static int a; \n    public static int b = 1;\n    public static final int c = 2;\n    public void say(){\n        System.out.println(\"Hello\");\n    }\n}\n```\n答案揭晓：0, 0, 2  原因上文里写的很明白\n\n### 解析\n> 解析是将常量池内的符号引用替换为直接引用的过程\n\n那什么是符号引用和直接引用呢？\n- **符号引用**：以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义的定位到目标即可。\n- **直接引用**：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。\n\n符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是他们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。\n直接引用是和虚拟机实现的内存布局相关的，同一个符号引用在不同的虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在内存中存在。\n\n解析的时机根据虚拟机实现不同而不同，可以是类加载器加载时解析，也可以是符号引用使用前解析\n解析主要是对7类符号引用进行：类或接口、字段、类方法、接口方法、方法类型、方法句柄、调用点限定符\n![7类符号引用.png](7a3ae3d8/7类符号引用.png)\n\n### 初始化\n>初始化是执行类构造器`<clinit>()`方法的过程\n\n类初始化阶段是类加载流程的最后一个阶段，是执行`<clinit>()`方法的阶段，这个阶段才真正开始执行开发人员的代码。\n\n`<clinit>()`方法是编译器按照源文件中定义的顺序收集类变量和静态语句块形成的方法。它的一些特点和细节如下:\n1. 编译器自动收集静态变量和静态代码块合并产生的\n2. 不需要显示的调用父类的`<clinit>`，虚拟机保证父类先执行\n3. 父类定义的静态语句块优先于子类变量赋值操作\n4. 没有静态变量和静态语句块，可以不生成`<clinit>()`方法\n5. 接口也会有这个方法，但不需要先执行父类的`<clinit>()`方法\n6. 虚拟机保证该方法在多线程环境下被正确的加锁和同步\n\n#### 什么时候发生初始化？\n对一个类进行主动引用的时候必须初始化，主动引用的场景如下：\n1. 遇到new、getstatic、putstatic、invokestatic这四条指令时\n2. 使用java.lang.reflect包的方法对类进行反射调用时\n3. 初始化一个其父类还没被初始化的类时\n4. 虚拟机启动时，包含main方法的主类还没被初始化时\n5. 当使用动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法所对应的类没有进行初始化时\n\n#### 什么时候不发生初始化？\n对一个类进行被动引用的时候不初始化，被动引用的场景有下面一些：\n1. 通过子类引用父类的静态字段，不会导致子类的初始化\n2. 通过数组定义来引用类，不会触发此类的初始化\n3. 引用类的常量时，不会触发此类的初始化\n\n## 类加载器\n### 什么是类加载器？\n> 实现“通过一个类的全限定名来获取描述此类的二进制字节流”这个动作的代码模块就叫做类加载器\n\n类加载不仅仅是加载二进制字节码的作用，还起着独立的类名称空间的作用，确定一个类的唯一性由三个因素决定：\n1. 同一个java虚拟机\n2. 同一个类加载器\n3. 同一个全限定类名\n\n### 双亲委派模型\n下图中各个加载器之间的层次关系被称为类加载器的双亲委派模型\n![双亲委托模型图.png](7a3ae3d8/双亲委托模型图.png)\n图中可以看到，系统提供了三个类加载器：启动类加载器、扩展类加载器和应用程序类加载器，java程序启动的时候，三个类加载器分别从各自指定的路径中加载所需的类。最下面是开发人员自定义的类加载器，继承自ClassLoader，重写findClass()方法。\n\n一般我们自己写的类是默认由应用程程序加载器加载的，自定义的类加载器的父类加载器默认是应用程序加载器，应用程序加载器的父类加载器是扩展类加载器，扩展类加载器的父类加载器是启动类加载器，这种父子关系不是一般的继承或实现关系，而是子加载器持有父加载器的引用，是一种组合关系。自定义类加载器时，可以在构造函数中传入指定的父类加载器。\n#### 双亲委派模型的工作原理\n一个类加载器收到了类加载的请求时，它首先会先检查自身有没有加载过这个类，实质就是在JVM的常量池中查找该类的符号引用是否存在，如果有就直接返回，否则把这个请求委派给父类加载器，直至委派给启动类加载器，只有当父类加载器加载失败，子类加载器才会尝试自己去加载。\n\n下面是实现双亲委派模型的主要代码，代码简单易懂:\n```java\n//ClassLoader.java\nprotected Class<?> loadClass(String name, boolean resolve)\n        throws ClassNotFoundException\n    {\n        //加锁，整个类加载期间都持有锁\n        synchronized (getClassLoadingLock(name)) {\n            // 首先，检查此类是否已被加载过，是的话直接返回\n            Class<?> c = findLoadedClass(name);\n            if (c == null) {  //如果没有加载过，则继续\n                long t0 = System.nanoTime();\n                try {\n                    if (parent != null) { //有父类加载器，则交给父类加载器加载，递归执行loadClass方法\n                        c = parent.loadClass(name, false);\n                    } else {  //没有父类加载器,交给启动类加载器加载，执行一个本地方法\n                        c = findBootstrapClassOrNull(name);\n                    }\n                } catch (ClassNotFoundException e) {\n                    // 除了启动类加载器之外的类加载器加载类失败抛异常，此处不进行任何处理\n                }\n\n                if (c == null) {\n                    // 父类加载器未成功加载到类，则调用本加载器的findClass方法\n                    long t1 = System.nanoTime();\n                    c = findClass(name);\n\n                    // 记录一些状态\n                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                    sun.misc.PerfCounter.getFindClasses().increment();\n                }\n            }\n            //验证解析\n            if (resolve) {\n                resolveClass(c);\n            }\n            return c;\n        }\n    }\n```\n虽然易懂，但配合下面的图更容易加深理解，下面是这段代码的数据流程图：\n![双亲委派模型数据流程图.png](7a3ae3d8/双亲委派模型数据流程图.png)\n下面按照一般的双亲委派模型来分析，假设是自定义的类加载器调用了loadClass方法，触发了类加载的过程，则下面的过程会依次执行：\n- 自定义的类加载器首先会调用findLoadedClass(name)方法查看有没有被加载的这个类，如果有直接返回，否则执行下面步骤\n- 检查是否存在父类，如果有则递归调用父类的loadClass方法，否则说明父类加载器是启动类加载器，本类加载器是扩展类加载器，调用findBootstrapClassOrNull(name)使用启动类加载器进行类加载\n- 启动类加载器加载成功则返回，失败则调用扩展类加载器的findClass(name)方法来加载，成功则返回，失败则继续调用应用类加载器的findClass(name)方法，同样成功返回，失败调用自定义类加载器的findClass(name)\n- 我们自定义的类加载器一般会重写findClass方法，使用自定义的类加载器加载一个父类加载器加载不了的类的时候，就会执行自定义的findClass方法，在此方法中，会指定二进制字节码的路径读入字节数组，最后调用defineClass返回加载成功的类\n\n下面是自定义类加载器的示例代码：\n```java\npublic class MyClassLoader extends ClassLoader{\n    private String classpath;\n\n    //指定父类加载器的构造函数\n    public MyClassLoader(String classpath,ClassLoader classLoader) {\n        super(classLoader);\n        this.classpath = classpath;\n    }\n    //默认父类加载器为应用程序加载器的构造函数\n    public MyClassLoader(String classpath) {\n        this.classpath = classpath;\n    }\n\n    //重写findClass，加载类文件，返回类\n    @Override\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\n        String classFilePath = null;\n        String finalName = name.replace(\".\", \"/\");\n        classFilePath = classpath + \"/\" + finalName + \".class\";\n        Path path = Paths.get(classFilePath);\n        if (!Files.exists(path)) {\n            return null;\n        }\n        try {\n            byte[] classData =  Files.readAllBytes(path);\n            return defineClass(name, classData, 0, classData.length);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Can not read class file into byte array\");\n        }\n    }\n}\n```\n\n#### 为什么要使用这个模型？\n最后来讲讲为什么要使用这个模型？用这个模型有什么好处？\n\n采用双亲委派模式的好处之一是类和它对应的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关系可以避免类的重复加载，当父类加载器已经加载了该类时，子类加载器就没有必要再加载一次。\n\n其次是考虑到安全因素，保证java核心api中定义的类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改。\n\n---","source":"_posts/深入理解JVM类加载机制.md","raw":"---\ntitle: 深入理解JVM类加载机制\nauthor: Jackie Lee\nabbrlink: 7a3ae3d8\ntags:\n  - java\n  - jvm\n  - 类加载\ncategories:\n  - 原创\n  - JVM\ncopyright: true\ndate: 2019-03-24 15:18:00\n---\n## 前言\n#### 什么是类加载？\n虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的java类型。\n#### 加载什么？\n前面的定义已经讲了是加载描述类的数据，也就是Class文件，关于Class文件，我在《深入解析Class类文件的结构》一文中进行了分析。\n#### 谁来加载？\n加载描述类的类文件的二进制流是由类加载器完成的，已有的三种类加载和自定义的类加载器组成了类加载器子系统，关于类加载器，下文会详细讲述。\n#### 怎么加载？\n这就是本文的重点，类加载机制中的类加载流程。\n可以通过下图整体上看一下类加载在JVM体系中的位置<!--more-->\n![JVM体系结构.png](7a3ae3d8/JVM体系结构.png)\n#### 类的生命周期\n类的生命周期共有7个阶段，分别如下图：  \n![类的生命周期.png](7a3ae3d8/类的生命周期.png)  \n前5个阶段属于类加载流程的范围，其中验证、准备、解析又被称为连接，类加载的5个阶段并不是按照顺序依次完成的，除了解析可能会在初始化之后开始，其他的几个阶段的开始顺序是确定的，但结束顺序不一定，可能会交叉着进行，加载还没完成，连接可能已经开始。\n\n## 类加载流程\n类加载分为5个过程，分别是加载、验证、准备、解析、初始化，下面分别对这几个过程进行讲述，尽量简短明了。\n### 加载\n>\"加载\"是\"类加载\"流程的一个阶段\n\n加载阶段主要干的3件事：\n1. 通过一个类的全限定名获取定义此类的二进制字节流\n2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构\n3. 在内存中生成一个代表这个类的java.lang.Class实例，作为访问入口\n\n在这三件事里，开发人员能干预的是第一件事，我们可以使用系统的三个类加载器去加载我们想要加载的类文件，也可以自定义类加载器去获取二进制字节流。 \n\n定义类的二进制字节流不一定是经过编译后存储在磁盘上的.class文件，有可能是以下来源：\n1. 从ZIP包中读取，如：JAR、EAR、WAR\n2. 从网络中获取，如：Applet\n3. 运行时计算生成，如：动态代理技术\n4. 由其他文件生成，如：JSP文件生成.class\n5. 从数据库中读取，中间件服务器，如：SAP Netweaver\n\nHotspot虚拟机中，Class实例不是在堆上分配空间，而是存放在方法区中，这个实例在代码中可以轻松的获取到，并通过它可以获取代表某个类的各种数据结构。\n### 验证\n>验证是对输入的字节流进行检查的过程\n\n为什么要有验证这个过程呢？就是因为加载的对象：描述类的二进制字节流，来源广泛，不得不防止它被小人利用，损害虚拟机的正常运行，导致崩溃。所以总共有四个验证过程，分别如下图：\n![4个验证过程.jpg](7a3ae3d8/4个验证过程.jpg)\n1. 文件格式验证\n这个阶段直接操作字节流，后面的三个阶段是基于方法区的存储结构，这个阶段主要是验证文件本身的字节码是不是符合规范，目的是保证输入的字节流可以被正确的存储在方法区内。上图中的四个检查项只是其中的一小部分，真正的验证点还有很多。\n2. 元数据验证\n这个阶段主要是验证类的元数据信息是否符合Java语言规范，比如检查是否有父类，除了Objec，其他类都应该要有父类，否则就不符合规范了；被final修饰的不允许被继承。\n3. 字节码验证\n这个阶段主要是对类的方法体进行验证，保证类方法的运行不会对虚拟机造成危害。这是4个验证里最复杂的一个，因为要通过数据流和控制流的分析，确定程序语义是合法的、符合逻辑的。\n4. 符号引用验证\n上面三个阶段是对类本身进行验证，而符号引用验证阶段主要是对类以外的信息进行验证，后面会讲到解析是将符号引用替换成直接引用，所以这里验证的目的是确保符号引用是正确的，确保后面的解析过程能顺利的进行。\n\n### 准备\n>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段\n\n注意这里是为类变量分配内存，而且是分配在方法区中，实例变量是后面随着实例一起分配在堆上的。\n\n设置初始值也不是代码里赋的值，而是各个数据类型规定的零值，比如基础类型是相应类型不同字节长度的0，引用类型是null。\n\n不是每个类变量都是设置为零值，被final修饰的常量，因为在编译期带有一个ConstantValue属性，属性值则是该常量在代码里赋的值，这个值在准备阶段前就已经确定了，所以在准备阶段设置值的时候，直接取的ConstantValue给类常量。\n下面的例子可以很好的了解准备阶段，准备阶段过后，a、b、c分别是多少？\n```java\npublic class Test {\n    public static int a; \n    public static int b = 1;\n    public static final int c = 2;\n    public void say(){\n        System.out.println(\"Hello\");\n    }\n}\n```\n答案揭晓：0, 0, 2  原因上文里写的很明白\n\n### 解析\n> 解析是将常量池内的符号引用替换为直接引用的过程\n\n那什么是符号引用和直接引用呢？\n- **符号引用**：以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义的定位到目标即可。\n- **直接引用**：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。\n\n符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是他们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。\n直接引用是和虚拟机实现的内存布局相关的，同一个符号引用在不同的虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在内存中存在。\n\n解析的时机根据虚拟机实现不同而不同，可以是类加载器加载时解析，也可以是符号引用使用前解析\n解析主要是对7类符号引用进行：类或接口、字段、类方法、接口方法、方法类型、方法句柄、调用点限定符\n![7类符号引用.png](7a3ae3d8/7类符号引用.png)\n\n### 初始化\n>初始化是执行类构造器`<clinit>()`方法的过程\n\n类初始化阶段是类加载流程的最后一个阶段，是执行`<clinit>()`方法的阶段，这个阶段才真正开始执行开发人员的代码。\n\n`<clinit>()`方法是编译器按照源文件中定义的顺序收集类变量和静态语句块形成的方法。它的一些特点和细节如下:\n1. 编译器自动收集静态变量和静态代码块合并产生的\n2. 不需要显示的调用父类的`<clinit>`，虚拟机保证父类先执行\n3. 父类定义的静态语句块优先于子类变量赋值操作\n4. 没有静态变量和静态语句块，可以不生成`<clinit>()`方法\n5. 接口也会有这个方法，但不需要先执行父类的`<clinit>()`方法\n6. 虚拟机保证该方法在多线程环境下被正确的加锁和同步\n\n#### 什么时候发生初始化？\n对一个类进行主动引用的时候必须初始化，主动引用的场景如下：\n1. 遇到new、getstatic、putstatic、invokestatic这四条指令时\n2. 使用java.lang.reflect包的方法对类进行反射调用时\n3. 初始化一个其父类还没被初始化的类时\n4. 虚拟机启动时，包含main方法的主类还没被初始化时\n5. 当使用动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法所对应的类没有进行初始化时\n\n#### 什么时候不发生初始化？\n对一个类进行被动引用的时候不初始化，被动引用的场景有下面一些：\n1. 通过子类引用父类的静态字段，不会导致子类的初始化\n2. 通过数组定义来引用类，不会触发此类的初始化\n3. 引用类的常量时，不会触发此类的初始化\n\n## 类加载器\n### 什么是类加载器？\n> 实现“通过一个类的全限定名来获取描述此类的二进制字节流”这个动作的代码模块就叫做类加载器\n\n类加载不仅仅是加载二进制字节码的作用，还起着独立的类名称空间的作用，确定一个类的唯一性由三个因素决定：\n1. 同一个java虚拟机\n2. 同一个类加载器\n3. 同一个全限定类名\n\n### 双亲委派模型\n下图中各个加载器之间的层次关系被称为类加载器的双亲委派模型\n![双亲委托模型图.png](7a3ae3d8/双亲委托模型图.png)\n图中可以看到，系统提供了三个类加载器：启动类加载器、扩展类加载器和应用程序类加载器，java程序启动的时候，三个类加载器分别从各自指定的路径中加载所需的类。最下面是开发人员自定义的类加载器，继承自ClassLoader，重写findClass()方法。\n\n一般我们自己写的类是默认由应用程程序加载器加载的，自定义的类加载器的父类加载器默认是应用程序加载器，应用程序加载器的父类加载器是扩展类加载器，扩展类加载器的父类加载器是启动类加载器，这种父子关系不是一般的继承或实现关系，而是子加载器持有父加载器的引用，是一种组合关系。自定义类加载器时，可以在构造函数中传入指定的父类加载器。\n#### 双亲委派模型的工作原理\n一个类加载器收到了类加载的请求时，它首先会先检查自身有没有加载过这个类，实质就是在JVM的常量池中查找该类的符号引用是否存在，如果有就直接返回，否则把这个请求委派给父类加载器，直至委派给启动类加载器，只有当父类加载器加载失败，子类加载器才会尝试自己去加载。\n\n下面是实现双亲委派模型的主要代码，代码简单易懂:\n```java\n//ClassLoader.java\nprotected Class<?> loadClass(String name, boolean resolve)\n        throws ClassNotFoundException\n    {\n        //加锁，整个类加载期间都持有锁\n        synchronized (getClassLoadingLock(name)) {\n            // 首先，检查此类是否已被加载过，是的话直接返回\n            Class<?> c = findLoadedClass(name);\n            if (c == null) {  //如果没有加载过，则继续\n                long t0 = System.nanoTime();\n                try {\n                    if (parent != null) { //有父类加载器，则交给父类加载器加载，递归执行loadClass方法\n                        c = parent.loadClass(name, false);\n                    } else {  //没有父类加载器,交给启动类加载器加载，执行一个本地方法\n                        c = findBootstrapClassOrNull(name);\n                    }\n                } catch (ClassNotFoundException e) {\n                    // 除了启动类加载器之外的类加载器加载类失败抛异常，此处不进行任何处理\n                }\n\n                if (c == null) {\n                    // 父类加载器未成功加载到类，则调用本加载器的findClass方法\n                    long t1 = System.nanoTime();\n                    c = findClass(name);\n\n                    // 记录一些状态\n                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                    sun.misc.PerfCounter.getFindClasses().increment();\n                }\n            }\n            //验证解析\n            if (resolve) {\n                resolveClass(c);\n            }\n            return c;\n        }\n    }\n```\n虽然易懂，但配合下面的图更容易加深理解，下面是这段代码的数据流程图：\n![双亲委派模型数据流程图.png](7a3ae3d8/双亲委派模型数据流程图.png)\n下面按照一般的双亲委派模型来分析，假设是自定义的类加载器调用了loadClass方法，触发了类加载的过程，则下面的过程会依次执行：\n- 自定义的类加载器首先会调用findLoadedClass(name)方法查看有没有被加载的这个类，如果有直接返回，否则执行下面步骤\n- 检查是否存在父类，如果有则递归调用父类的loadClass方法，否则说明父类加载器是启动类加载器，本类加载器是扩展类加载器，调用findBootstrapClassOrNull(name)使用启动类加载器进行类加载\n- 启动类加载器加载成功则返回，失败则调用扩展类加载器的findClass(name)方法来加载，成功则返回，失败则继续调用应用类加载器的findClass(name)方法，同样成功返回，失败调用自定义类加载器的findClass(name)\n- 我们自定义的类加载器一般会重写findClass方法，使用自定义的类加载器加载一个父类加载器加载不了的类的时候，就会执行自定义的findClass方法，在此方法中，会指定二进制字节码的路径读入字节数组，最后调用defineClass返回加载成功的类\n\n下面是自定义类加载器的示例代码：\n```java\npublic class MyClassLoader extends ClassLoader{\n    private String classpath;\n\n    //指定父类加载器的构造函数\n    public MyClassLoader(String classpath,ClassLoader classLoader) {\n        super(classLoader);\n        this.classpath = classpath;\n    }\n    //默认父类加载器为应用程序加载器的构造函数\n    public MyClassLoader(String classpath) {\n        this.classpath = classpath;\n    }\n\n    //重写findClass，加载类文件，返回类\n    @Override\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\n        String classFilePath = null;\n        String finalName = name.replace(\".\", \"/\");\n        classFilePath = classpath + \"/\" + finalName + \".class\";\n        Path path = Paths.get(classFilePath);\n        if (!Files.exists(path)) {\n            return null;\n        }\n        try {\n            byte[] classData =  Files.readAllBytes(path);\n            return defineClass(name, classData, 0, classData.length);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Can not read class file into byte array\");\n        }\n    }\n}\n```\n\n#### 为什么要使用这个模型？\n最后来讲讲为什么要使用这个模型？用这个模型有什么好处？\n\n采用双亲委派模式的好处之一是类和它对应的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关系可以避免类的重复加载，当父类加载器已经加载了该类时，子类加载器就没有必要再加载一次。\n\n其次是考虑到安全因素，保证java核心api中定义的类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改。\n\n---","slug":"深入理解JVM类加载机制","published":1,"updated":"2019-03-25T16:10:03.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtojsgyr003akaq44p7diglj","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h4 id=\"什么是类加载？\"><a href=\"#什么是类加载？\" class=\"headerlink\" title=\"什么是类加载？\"></a>什么是类加载？</h4><p>虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的java类型。</p>\n<h4 id=\"加载什么？\"><a href=\"#加载什么？\" class=\"headerlink\" title=\"加载什么？\"></a>加载什么？</h4><p>前面的定义已经讲了是加载描述类的数据，也就是Class文件，关于Class文件，我在《深入解析Class类文件的结构》一文中进行了分析。</p>\n<h4 id=\"谁来加载？\"><a href=\"#谁来加载？\" class=\"headerlink\" title=\"谁来加载？\"></a>谁来加载？</h4><p>加载描述类的类文件的二进制流是由类加载器完成的，已有的三种类加载和自定义的类加载器组成了类加载器子系统，关于类加载器，下文会详细讲述。</p>\n<h4 id=\"怎么加载？\"><a href=\"#怎么加载？\" class=\"headerlink\" title=\"怎么加载？\"></a>怎么加载？</h4><p>这就是本文的重点，类加载机制中的类加载流程。<br>可以通过下图整体上看一下类加载在JVM体系中的位置<a id=\"more\"></a><br><img src=\"7a3ae3d8/JVM体系结构.png\" alt=\"JVM体系结构.png\"></p>\n<h4 id=\"类的生命周期\"><a href=\"#类的生命周期\" class=\"headerlink\" title=\"类的生命周期\"></a>类的生命周期</h4><p>类的生命周期共有7个阶段，分别如下图：<br><img src=\"7a3ae3d8/类的生命周期.png\" alt=\"类的生命周期.png\"><br>前5个阶段属于类加载流程的范围，其中验证、准备、解析又被称为连接，类加载的5个阶段并不是按照顺序依次完成的，除了解析可能会在初始化之后开始，其他的几个阶段的开始顺序是确定的，但结束顺序不一定，可能会交叉着进行，加载还没完成，连接可能已经开始。</p>\n<h2 id=\"类加载流程\"><a href=\"#类加载流程\" class=\"headerlink\" title=\"类加载流程\"></a>类加载流程</h2><p>类加载分为5个过程，分别是加载、验证、准备、解析、初始化，下面分别对这几个过程进行讲述，尽量简短明了。</p>\n<h3 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h3><blockquote>\n<p>“加载”是”类加载”流程的一个阶段</p>\n</blockquote>\n<p>加载阶段主要干的3件事：</p>\n<ol>\n<li>通过一个类的全限定名获取定义此类的二进制字节流</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li>\n<li>在内存中生成一个代表这个类的java.lang.Class实例，作为访问入口</li>\n</ol>\n<p>在这三件事里，开发人员能干预的是第一件事，我们可以使用系统的三个类加载器去加载我们想要加载的类文件，也可以自定义类加载器去获取二进制字节流。 </p>\n<p>定义类的二进制字节流不一定是经过编译后存储在磁盘上的.class文件，有可能是以下来源：</p>\n<ol>\n<li>从ZIP包中读取，如：JAR、EAR、WAR</li>\n<li>从网络中获取，如：Applet</li>\n<li>运行时计算生成，如：动态代理技术</li>\n<li>由其他文件生成，如：JSP文件生成.class</li>\n<li>从数据库中读取，中间件服务器，如：SAP Netweaver</li>\n</ol>\n<p>Hotspot虚拟机中，Class实例不是在堆上分配空间，而是存放在方法区中，这个实例在代码中可以轻松的获取到，并通过它可以获取代表某个类的各种数据结构。</p>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><blockquote>\n<p>验证是对输入的字节流进行检查的过程</p>\n</blockquote>\n<p>为什么要有验证这个过程呢？就是因为加载的对象：描述类的二进制字节流，来源广泛，不得不防止它被小人利用，损害虚拟机的正常运行，导致崩溃。所以总共有四个验证过程，分别如下图：<br><img src=\"7a3ae3d8/4个验证过程.jpg\" alt=\"4个验证过程.jpg\"></p>\n<ol>\n<li>文件格式验证<br>这个阶段直接操作字节流，后面的三个阶段是基于方法区的存储结构，这个阶段主要是验证文件本身的字节码是不是符合规范，目的是保证输入的字节流可以被正确的存储在方法区内。上图中的四个检查项只是其中的一小部分，真正的验证点还有很多。</li>\n<li>元数据验证<br>这个阶段主要是验证类的元数据信息是否符合Java语言规范，比如检查是否有父类，除了Objec，其他类都应该要有父类，否则就不符合规范了；被final修饰的不允许被继承。</li>\n<li>字节码验证<br>这个阶段主要是对类的方法体进行验证，保证类方法的运行不会对虚拟机造成危害。这是4个验证里最复杂的一个，因为要通过数据流和控制流的分析，确定程序语义是合法的、符合逻辑的。</li>\n<li>符号引用验证<br>上面三个阶段是对类本身进行验证，而符号引用验证阶段主要是对类以外的信息进行验证，后面会讲到解析是将符号引用替换成直接引用，所以这里验证的目的是确保符号引用是正确的，确保后面的解析过程能顺利的进行。</li>\n</ol>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><blockquote>\n<p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段</p>\n</blockquote>\n<p>注意这里是为类变量分配内存，而且是分配在方法区中，实例变量是后面随着实例一起分配在堆上的。</p>\n<p>设置初始值也不是代码里赋的值，而是各个数据类型规定的零值，比如基础类型是相应类型不同字节长度的0，引用类型是null。</p>\n<p>不是每个类变量都是设置为零值，被final修饰的常量，因为在编译期带有一个ConstantValue属性，属性值则是该常量在代码里赋的值，这个值在准备阶段前就已经确定了，所以在准备阶段设置值的时候，直接取的ConstantValue给类常量。<br>下面的例子可以很好的了解准备阶段，准备阶段过后，a、b、c分别是多少？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> c = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>答案揭晓：0, 0, 2  原因上文里写的很明白</p>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><blockquote>\n<p>解析是将常量池内的符号引用替换为直接引用的过程</p>\n</blockquote>\n<p>那什么是符号引用和直接引用呢？</p>\n<ul>\n<li><strong>符号引用</strong>：以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义的定位到目标即可。</li>\n<li><strong>直接引用</strong>：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。</li>\n</ul>\n<p>符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是他们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。<br>直接引用是和虚拟机实现的内存布局相关的，同一个符号引用在不同的虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在内存中存在。</p>\n<p>解析的时机根据虚拟机实现不同而不同，可以是类加载器加载时解析，也可以是符号引用使用前解析<br>解析主要是对7类符号引用进行：类或接口、字段、类方法、接口方法、方法类型、方法句柄、调用点限定符<br><img src=\"7a3ae3d8/7类符号引用.png\" alt=\"7类符号引用.png\"></p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><blockquote>\n<p>初始化是执行类构造器<code>&lt;clinit&gt;()</code>方法的过程</p>\n</blockquote>\n<p>类初始化阶段是类加载流程的最后一个阶段，是执行<code>&lt;clinit&gt;()</code>方法的阶段，这个阶段才真正开始执行开发人员的代码。</p>\n<p><code>&lt;clinit&gt;()</code>方法是编译器按照源文件中定义的顺序收集类变量和静态语句块形成的方法。它的一些特点和细节如下:</p>\n<ol>\n<li>编译器自动收集静态变量和静态代码块合并产生的</li>\n<li>不需要显示的调用父类的<code>&lt;clinit&gt;</code>，虚拟机保证父类先执行</li>\n<li>父类定义的静态语句块优先于子类变量赋值操作</li>\n<li>没有静态变量和静态语句块，可以不生成<code>&lt;clinit&gt;()</code>方法</li>\n<li>接口也会有这个方法，但不需要先执行父类的<code>&lt;clinit&gt;()</code>方法</li>\n<li>虚拟机保证该方法在多线程环境下被正确的加锁和同步</li>\n</ol>\n<h4 id=\"什么时候发生初始化？\"><a href=\"#什么时候发生初始化？\" class=\"headerlink\" title=\"什么时候发生初始化？\"></a>什么时候发生初始化？</h4><p>对一个类进行主动引用的时候必须初始化，主动引用的场景如下：</p>\n<ol>\n<li>遇到new、getstatic、putstatic、invokestatic这四条指令时</li>\n<li>使用java.lang.reflect包的方法对类进行反射调用时</li>\n<li>初始化一个其父类还没被初始化的类时</li>\n<li>虚拟机启动时，包含main方法的主类还没被初始化时</li>\n<li>当使用动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法所对应的类没有进行初始化时</li>\n</ol>\n<h4 id=\"什么时候不发生初始化？\"><a href=\"#什么时候不发生初始化？\" class=\"headerlink\" title=\"什么时候不发生初始化？\"></a>什么时候不发生初始化？</h4><p>对一个类进行被动引用的时候不初始化，被动引用的场景有下面一些：</p>\n<ol>\n<li>通过子类引用父类的静态字段，不会导致子类的初始化</li>\n<li>通过数组定义来引用类，不会触发此类的初始化</li>\n<li>引用类的常量时，不会触发此类的初始化</li>\n</ol>\n<h2 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h2><h3 id=\"什么是类加载器？\"><a href=\"#什么是类加载器？\" class=\"headerlink\" title=\"什么是类加载器？\"></a>什么是类加载器？</h3><blockquote>\n<p>实现“通过一个类的全限定名来获取描述此类的二进制字节流”这个动作的代码模块就叫做类加载器</p>\n</blockquote>\n<p>类加载不仅仅是加载二进制字节码的作用，还起着独立的类名称空间的作用，确定一个类的唯一性由三个因素决定：</p>\n<ol>\n<li>同一个java虚拟机</li>\n<li>同一个类加载器</li>\n<li>同一个全限定类名</li>\n</ol>\n<h3 id=\"双亲委派模型\"><a href=\"#双亲委派模型\" class=\"headerlink\" title=\"双亲委派模型\"></a>双亲委派模型</h3><p>下图中各个加载器之间的层次关系被称为类加载器的双亲委派模型<br><img src=\"7a3ae3d8/双亲委托模型图.png\" alt=\"双亲委托模型图.png\"><br>图中可以看到，系统提供了三个类加载器：启动类加载器、扩展类加载器和应用程序类加载器，java程序启动的时候，三个类加载器分别从各自指定的路径中加载所需的类。最下面是开发人员自定义的类加载器，继承自ClassLoader，重写findClass()方法。</p>\n<p>一般我们自己写的类是默认由应用程程序加载器加载的，自定义的类加载器的父类加载器默认是应用程序加载器，应用程序加载器的父类加载器是扩展类加载器，扩展类加载器的父类加载器是启动类加载器，这种父子关系不是一般的继承或实现关系，而是子加载器持有父加载器的引用，是一种组合关系。自定义类加载器时，可以在构造函数中传入指定的父类加载器。</p>\n<h4 id=\"双亲委派模型的工作原理\"><a href=\"#双亲委派模型的工作原理\" class=\"headerlink\" title=\"双亲委派模型的工作原理\"></a>双亲委派模型的工作原理</h4><p>一个类加载器收到了类加载的请求时，它首先会先检查自身有没有加载过这个类，实质就是在JVM的常量池中查找该类的符号引用是否存在，如果有就直接返回，否则把这个请求委派给父类加载器，直至委派给启动类加载器，只有当父类加载器加载失败，子类加载器才会尝试自己去加载。</p>\n<p>下面是实现双亲委派模型的主要代码，代码简单易懂:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ClassLoader.java</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"keyword\">boolean</span> resolve)</span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//加锁，整个类加载期间都持有锁</span></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 首先，检查此类是否已被加载过，是的话直接返回</span></span><br><span class=\"line\">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;  <span class=\"comment\">//如果没有加载过，则继续</span></span><br><span class=\"line\">                <span class=\"keyword\">long</span> t0 = System.nanoTime();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//有父类加载器，则交给父类加载器加载，递归执行loadClass方法</span></span><br><span class=\"line\">                        c = parent.loadClass(name, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">//没有父类加载器,交给启动类加载器加载，执行一个本地方法</span></span><br><span class=\"line\">                        c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 除了启动类加载器之外的类加载器加载类失败抛异常，此处不进行任何处理</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 父类加载器未成功加载到类，则调用本加载器的findClass方法</span></span><br><span class=\"line\">                    <span class=\"keyword\">long</span> t1 = System.nanoTime();</span><br><span class=\"line\">                    c = findClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 记录一些状态</span></span><br><span class=\"line\">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//验证解析</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">                resolveClass(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>虽然易懂，但配合下面的图更容易加深理解，下面是这段代码的数据流程图：<br><img src=\"7a3ae3d8/双亲委派模型数据流程图.png\" alt=\"双亲委派模型数据流程图.png\"><br>下面按照一般的双亲委派模型来分析，假设是自定义的类加载器调用了loadClass方法，触发了类加载的过程，则下面的过程会依次执行：</p>\n<ul>\n<li>自定义的类加载器首先会调用findLoadedClass(name)方法查看有没有被加载的这个类，如果有直接返回，否则执行下面步骤</li>\n<li>检查是否存在父类，如果有则递归调用父类的loadClass方法，否则说明父类加载器是启动类加载器，本类加载器是扩展类加载器，调用findBootstrapClassOrNull(name)使用启动类加载器进行类加载</li>\n<li>启动类加载器加载成功则返回，失败则调用扩展类加载器的findClass(name)方法来加载，成功则返回，失败则继续调用应用类加载器的findClass(name)方法，同样成功返回，失败调用自定义类加载器的findClass(name)</li>\n<li>我们自定义的类加载器一般会重写findClass方法，使用自定义的类加载器加载一个父类加载器加载不了的类的时候，就会执行自定义的findClass方法，在此方法中，会指定二进制字节码的路径读入字节数组，最后调用defineClass返回加载成功的类</li>\n</ul>\n<p>下面是自定义类加载器的示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClassLoader</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClassLoader</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String classpath;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//指定父类加载器的构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyClassLoader</span><span class=\"params\">(String classpath,ClassLoader classLoader)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(classLoader);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.classpath = classpath;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//默认父类加载器为应用程序加载器的构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyClassLoader</span><span class=\"params\">(String classpath)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.classpath = classpath;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重写findClass，加载类文件，返回类</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Class&lt;?&gt; findClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">        String classFilePath = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        String finalName = name.replace(<span class=\"string\">\".\"</span>, <span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">        classFilePath = classpath + <span class=\"string\">\"/\"</span> + finalName + <span class=\"string\">\".class\"</span>;</span><br><span class=\"line\">        Path path = Paths.get(classFilePath);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Files.exists(path)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] classData =  Files.readAllBytes(path);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> defineClass(name, classData, <span class=\"number\">0</span>, classData.length);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Can not read class file into byte array\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"为什么要使用这个模型？\"><a href=\"#为什么要使用这个模型？\" class=\"headerlink\" title=\"为什么要使用这个模型？\"></a>为什么要使用这个模型？</h4><p>最后来讲讲为什么要使用这个模型？用这个模型有什么好处？</p>\n<p>采用双亲委派模式的好处之一是类和它对应的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关系可以避免类的重复加载，当父类加载器已经加载了该类时，子类加载器就没有必要再加载一次。</p>\n<p>其次是考虑到安全因素，保证java核心api中定义的类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h4 id=\"什么是类加载？\"><a href=\"#什么是类加载？\" class=\"headerlink\" title=\"什么是类加载？\"></a>什么是类加载？</h4><p>虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的java类型。</p>\n<h4 id=\"加载什么？\"><a href=\"#加载什么？\" class=\"headerlink\" title=\"加载什么？\"></a>加载什么？</h4><p>前面的定义已经讲了是加载描述类的数据，也就是Class文件，关于Class文件，我在《深入解析Class类文件的结构》一文中进行了分析。</p>\n<h4 id=\"谁来加载？\"><a href=\"#谁来加载？\" class=\"headerlink\" title=\"谁来加载？\"></a>谁来加载？</h4><p>加载描述类的类文件的二进制流是由类加载器完成的，已有的三种类加载和自定义的类加载器组成了类加载器子系统，关于类加载器，下文会详细讲述。</p>\n<h4 id=\"怎么加载？\"><a href=\"#怎么加载？\" class=\"headerlink\" title=\"怎么加载？\"></a>怎么加载？</h4><p>这就是本文的重点，类加载机制中的类加载流程。<br>可以通过下图整体上看一下类加载在JVM体系中的位置","more":"<br><img src=\"7a3ae3d8/JVM体系结构.png\" alt=\"JVM体系结构.png\"></p>\n<h4 id=\"类的生命周期\"><a href=\"#类的生命周期\" class=\"headerlink\" title=\"类的生命周期\"></a>类的生命周期</h4><p>类的生命周期共有7个阶段，分别如下图：<br><img src=\"7a3ae3d8/类的生命周期.png\" alt=\"类的生命周期.png\"><br>前5个阶段属于类加载流程的范围，其中验证、准备、解析又被称为连接，类加载的5个阶段并不是按照顺序依次完成的，除了解析可能会在初始化之后开始，其他的几个阶段的开始顺序是确定的，但结束顺序不一定，可能会交叉着进行，加载还没完成，连接可能已经开始。</p>\n<h2 id=\"类加载流程\"><a href=\"#类加载流程\" class=\"headerlink\" title=\"类加载流程\"></a>类加载流程</h2><p>类加载分为5个过程，分别是加载、验证、准备、解析、初始化，下面分别对这几个过程进行讲述，尽量简短明了。</p>\n<h3 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h3><blockquote>\n<p>“加载”是”类加载”流程的一个阶段</p>\n</blockquote>\n<p>加载阶段主要干的3件事：</p>\n<ol>\n<li>通过一个类的全限定名获取定义此类的二进制字节流</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li>\n<li>在内存中生成一个代表这个类的java.lang.Class实例，作为访问入口</li>\n</ol>\n<p>在这三件事里，开发人员能干预的是第一件事，我们可以使用系统的三个类加载器去加载我们想要加载的类文件，也可以自定义类加载器去获取二进制字节流。 </p>\n<p>定义类的二进制字节流不一定是经过编译后存储在磁盘上的.class文件，有可能是以下来源：</p>\n<ol>\n<li>从ZIP包中读取，如：JAR、EAR、WAR</li>\n<li>从网络中获取，如：Applet</li>\n<li>运行时计算生成，如：动态代理技术</li>\n<li>由其他文件生成，如：JSP文件生成.class</li>\n<li>从数据库中读取，中间件服务器，如：SAP Netweaver</li>\n</ol>\n<p>Hotspot虚拟机中，Class实例不是在堆上分配空间，而是存放在方法区中，这个实例在代码中可以轻松的获取到，并通过它可以获取代表某个类的各种数据结构。</p>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><blockquote>\n<p>验证是对输入的字节流进行检查的过程</p>\n</blockquote>\n<p>为什么要有验证这个过程呢？就是因为加载的对象：描述类的二进制字节流，来源广泛，不得不防止它被小人利用，损害虚拟机的正常运行，导致崩溃。所以总共有四个验证过程，分别如下图：<br><img src=\"7a3ae3d8/4个验证过程.jpg\" alt=\"4个验证过程.jpg\"></p>\n<ol>\n<li>文件格式验证<br>这个阶段直接操作字节流，后面的三个阶段是基于方法区的存储结构，这个阶段主要是验证文件本身的字节码是不是符合规范，目的是保证输入的字节流可以被正确的存储在方法区内。上图中的四个检查项只是其中的一小部分，真正的验证点还有很多。</li>\n<li>元数据验证<br>这个阶段主要是验证类的元数据信息是否符合Java语言规范，比如检查是否有父类，除了Objec，其他类都应该要有父类，否则就不符合规范了；被final修饰的不允许被继承。</li>\n<li>字节码验证<br>这个阶段主要是对类的方法体进行验证，保证类方法的运行不会对虚拟机造成危害。这是4个验证里最复杂的一个，因为要通过数据流和控制流的分析，确定程序语义是合法的、符合逻辑的。</li>\n<li>符号引用验证<br>上面三个阶段是对类本身进行验证，而符号引用验证阶段主要是对类以外的信息进行验证，后面会讲到解析是将符号引用替换成直接引用，所以这里验证的目的是确保符号引用是正确的，确保后面的解析过程能顺利的进行。</li>\n</ol>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><blockquote>\n<p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段</p>\n</blockquote>\n<p>注意这里是为类变量分配内存，而且是分配在方法区中，实例变量是后面随着实例一起分配在堆上的。</p>\n<p>设置初始值也不是代码里赋的值，而是各个数据类型规定的零值，比如基础类型是相应类型不同字节长度的0，引用类型是null。</p>\n<p>不是每个类变量都是设置为零值，被final修饰的常量，因为在编译期带有一个ConstantValue属性，属性值则是该常量在代码里赋的值，这个值在准备阶段前就已经确定了，所以在准备阶段设置值的时候，直接取的ConstantValue给类常量。<br>下面的例子可以很好的了解准备阶段，准备阶段过后，a、b、c分别是多少？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> c = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>答案揭晓：0, 0, 2  原因上文里写的很明白</p>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><blockquote>\n<p>解析是将常量池内的符号引用替换为直接引用的过程</p>\n</blockquote>\n<p>那什么是符号引用和直接引用呢？</p>\n<ul>\n<li><strong>符号引用</strong>：以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义的定位到目标即可。</li>\n<li><strong>直接引用</strong>：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。</li>\n</ul>\n<p>符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是他们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。<br>直接引用是和虚拟机实现的内存布局相关的，同一个符号引用在不同的虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在内存中存在。</p>\n<p>解析的时机根据虚拟机实现不同而不同，可以是类加载器加载时解析，也可以是符号引用使用前解析<br>解析主要是对7类符号引用进行：类或接口、字段、类方法、接口方法、方法类型、方法句柄、调用点限定符<br><img src=\"7a3ae3d8/7类符号引用.png\" alt=\"7类符号引用.png\"></p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><blockquote>\n<p>初始化是执行类构造器<code>&lt;clinit&gt;()</code>方法的过程</p>\n</blockquote>\n<p>类初始化阶段是类加载流程的最后一个阶段，是执行<code>&lt;clinit&gt;()</code>方法的阶段，这个阶段才真正开始执行开发人员的代码。</p>\n<p><code>&lt;clinit&gt;()</code>方法是编译器按照源文件中定义的顺序收集类变量和静态语句块形成的方法。它的一些特点和细节如下:</p>\n<ol>\n<li>编译器自动收集静态变量和静态代码块合并产生的</li>\n<li>不需要显示的调用父类的<code>&lt;clinit&gt;</code>，虚拟机保证父类先执行</li>\n<li>父类定义的静态语句块优先于子类变量赋值操作</li>\n<li>没有静态变量和静态语句块，可以不生成<code>&lt;clinit&gt;()</code>方法</li>\n<li>接口也会有这个方法，但不需要先执行父类的<code>&lt;clinit&gt;()</code>方法</li>\n<li>虚拟机保证该方法在多线程环境下被正确的加锁和同步</li>\n</ol>\n<h4 id=\"什么时候发生初始化？\"><a href=\"#什么时候发生初始化？\" class=\"headerlink\" title=\"什么时候发生初始化？\"></a>什么时候发生初始化？</h4><p>对一个类进行主动引用的时候必须初始化，主动引用的场景如下：</p>\n<ol>\n<li>遇到new、getstatic、putstatic、invokestatic这四条指令时</li>\n<li>使用java.lang.reflect包的方法对类进行反射调用时</li>\n<li>初始化一个其父类还没被初始化的类时</li>\n<li>虚拟机启动时，包含main方法的主类还没被初始化时</li>\n<li>当使用动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法所对应的类没有进行初始化时</li>\n</ol>\n<h4 id=\"什么时候不发生初始化？\"><a href=\"#什么时候不发生初始化？\" class=\"headerlink\" title=\"什么时候不发生初始化？\"></a>什么时候不发生初始化？</h4><p>对一个类进行被动引用的时候不初始化，被动引用的场景有下面一些：</p>\n<ol>\n<li>通过子类引用父类的静态字段，不会导致子类的初始化</li>\n<li>通过数组定义来引用类，不会触发此类的初始化</li>\n<li>引用类的常量时，不会触发此类的初始化</li>\n</ol>\n<h2 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h2><h3 id=\"什么是类加载器？\"><a href=\"#什么是类加载器？\" class=\"headerlink\" title=\"什么是类加载器？\"></a>什么是类加载器？</h3><blockquote>\n<p>实现“通过一个类的全限定名来获取描述此类的二进制字节流”这个动作的代码模块就叫做类加载器</p>\n</blockquote>\n<p>类加载不仅仅是加载二进制字节码的作用，还起着独立的类名称空间的作用，确定一个类的唯一性由三个因素决定：</p>\n<ol>\n<li>同一个java虚拟机</li>\n<li>同一个类加载器</li>\n<li>同一个全限定类名</li>\n</ol>\n<h3 id=\"双亲委派模型\"><a href=\"#双亲委派模型\" class=\"headerlink\" title=\"双亲委派模型\"></a>双亲委派模型</h3><p>下图中各个加载器之间的层次关系被称为类加载器的双亲委派模型<br><img src=\"7a3ae3d8/双亲委托模型图.png\" alt=\"双亲委托模型图.png\"><br>图中可以看到，系统提供了三个类加载器：启动类加载器、扩展类加载器和应用程序类加载器，java程序启动的时候，三个类加载器分别从各自指定的路径中加载所需的类。最下面是开发人员自定义的类加载器，继承自ClassLoader，重写findClass()方法。</p>\n<p>一般我们自己写的类是默认由应用程程序加载器加载的，自定义的类加载器的父类加载器默认是应用程序加载器，应用程序加载器的父类加载器是扩展类加载器，扩展类加载器的父类加载器是启动类加载器，这种父子关系不是一般的继承或实现关系，而是子加载器持有父加载器的引用，是一种组合关系。自定义类加载器时，可以在构造函数中传入指定的父类加载器。</p>\n<h4 id=\"双亲委派模型的工作原理\"><a href=\"#双亲委派模型的工作原理\" class=\"headerlink\" title=\"双亲委派模型的工作原理\"></a>双亲委派模型的工作原理</h4><p>一个类加载器收到了类加载的请求时，它首先会先检查自身有没有加载过这个类，实质就是在JVM的常量池中查找该类的符号引用是否存在，如果有就直接返回，否则把这个请求委派给父类加载器，直至委派给启动类加载器，只有当父类加载器加载失败，子类加载器才会尝试自己去加载。</p>\n<p>下面是实现双亲委派模型的主要代码，代码简单易懂:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ClassLoader.java</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"keyword\">boolean</span> resolve)</span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//加锁，整个类加载期间都持有锁</span></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 首先，检查此类是否已被加载过，是的话直接返回</span></span><br><span class=\"line\">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;  <span class=\"comment\">//如果没有加载过，则继续</span></span><br><span class=\"line\">                <span class=\"keyword\">long</span> t0 = System.nanoTime();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//有父类加载器，则交给父类加载器加载，递归执行loadClass方法</span></span><br><span class=\"line\">                        c = parent.loadClass(name, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">//没有父类加载器,交给启动类加载器加载，执行一个本地方法</span></span><br><span class=\"line\">                        c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 除了启动类加载器之外的类加载器加载类失败抛异常，此处不进行任何处理</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 父类加载器未成功加载到类，则调用本加载器的findClass方法</span></span><br><span class=\"line\">                    <span class=\"keyword\">long</span> t1 = System.nanoTime();</span><br><span class=\"line\">                    c = findClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 记录一些状态</span></span><br><span class=\"line\">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//验证解析</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">                resolveClass(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>虽然易懂，但配合下面的图更容易加深理解，下面是这段代码的数据流程图：<br><img src=\"7a3ae3d8/双亲委派模型数据流程图.png\" alt=\"双亲委派模型数据流程图.png\"><br>下面按照一般的双亲委派模型来分析，假设是自定义的类加载器调用了loadClass方法，触发了类加载的过程，则下面的过程会依次执行：</p>\n<ul>\n<li>自定义的类加载器首先会调用findLoadedClass(name)方法查看有没有被加载的这个类，如果有直接返回，否则执行下面步骤</li>\n<li>检查是否存在父类，如果有则递归调用父类的loadClass方法，否则说明父类加载器是启动类加载器，本类加载器是扩展类加载器，调用findBootstrapClassOrNull(name)使用启动类加载器进行类加载</li>\n<li>启动类加载器加载成功则返回，失败则调用扩展类加载器的findClass(name)方法来加载，成功则返回，失败则继续调用应用类加载器的findClass(name)方法，同样成功返回，失败调用自定义类加载器的findClass(name)</li>\n<li>我们自定义的类加载器一般会重写findClass方法，使用自定义的类加载器加载一个父类加载器加载不了的类的时候，就会执行自定义的findClass方法，在此方法中，会指定二进制字节码的路径读入字节数组，最后调用defineClass返回加载成功的类</li>\n</ul>\n<p>下面是自定义类加载器的示例代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClassLoader</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClassLoader</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String classpath;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//指定父类加载器的构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyClassLoader</span><span class=\"params\">(String classpath,ClassLoader classLoader)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(classLoader);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.classpath = classpath;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//默认父类加载器为应用程序加载器的构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyClassLoader</span><span class=\"params\">(String classpath)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.classpath = classpath;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重写findClass，加载类文件，返回类</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Class&lt;?&gt; findClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">        String classFilePath = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        String finalName = name.replace(<span class=\"string\">\".\"</span>, <span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">        classFilePath = classpath + <span class=\"string\">\"/\"</span> + finalName + <span class=\"string\">\".class\"</span>;</span><br><span class=\"line\">        Path path = Paths.get(classFilePath);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Files.exists(path)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] classData =  Files.readAllBytes(path);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> defineClass(name, classData, <span class=\"number\">0</span>, classData.length);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Can not read class file into byte array\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"为什么要使用这个模型？\"><a href=\"#为什么要使用这个模型？\" class=\"headerlink\" title=\"为什么要使用这个模型？\"></a>为什么要使用这个模型？</h4><p>最后来讲讲为什么要使用这个模型？用这个模型有什么好处？</p>\n<p>采用双亲委派模式的好处之一是类和它对应的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关系可以避免类的重复加载，当父类加载器已经加载了该类时，子类加载器就没有必要再加载一次。</p>\n<p>其次是考虑到安全因素，保证java核心api中定义的类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改。</p>\n<hr>"}],"PostAsset":[{"_id":"source/_posts/深入理解JVM类加载机制/4个验证过程.jpg","slug":"4个验证过程.jpg","post":"cjtojsgyr003akaq44p7diglj","modified":1,"renderable":0},{"_id":"source/_posts/深入理解JVM类加载机制/双亲委托模型图.png","slug":"双亲委托模型图.png","post":"cjtojsgyr003akaq44p7diglj","modified":1,"renderable":0},{"_id":"source/_posts/深入理解JVM类加载机制/类的生命周期.png","slug":"类的生命周期.png","post":"cjtojsgyr003akaq44p7diglj","modified":1,"renderable":0},{"_id":"source/_posts/linux和windows的线程机制的区别/1.jpg","post":"cjtojsgtf000pkaq4xi6orkmz","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/linux和windows的线程机制的区别/2.jpg","post":"cjtojsgtf000pkaq4xi6orkmz","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/深入解析Class类文件的结构/class.png","slug":"class.png","post":"cjtojsgtm000vkaq4p2wrw1u9","modified":1,"renderable":0},{"_id":"source/_posts/深入解析Class类文件的结构/javap.png","slug":"javap.png","post":"cjtojsgtm000vkaq4p2wrw1u9","modified":1,"renderable":0},{"_id":"source/_posts/深入解析Class类文件的结构/字节码文件实战分析.png","slug":"字节码文件实战分析.png","post":"cjtojsgtm000vkaq4p2wrw1u9","modified":1,"renderable":0},{"_id":"source/_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网/1.png","post":"cjtojsgtc000jkaq4n31tp2nz","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网/2.png","post":"cjtojsgtc000jkaq4n31tp2nz","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网/3.png","post":"cjtojsgtc000jkaq4n31tp2nz","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网/4.png","post":"cjtojsgtc000jkaq4n31tp2nz","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网/5.png","post":"cjtojsgtc000jkaq4n31tp2nz","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网/6.png","post":"cjtojsgtc000jkaq4n31tp2nz","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网/7.png","post":"cjtojsgtc000jkaq4n31tp2nz","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网/8.png","post":"cjtojsgtc000jkaq4n31tp2nz","slug":"8.png","modified":1,"renderable":1},{"_id":"source/_posts/Vmware-Ubuntu14-04-mininet中的host如何访问外网/9.png","post":"cjtojsgtc000jkaq4n31tp2nz","slug":"9.png","modified":1,"renderable":1},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/1.png","post":"cjtojsgt3000bkaq4gym4005p","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/10.png","post":"cjtojsgt3000bkaq4gym4005p","slug":"10.png","modified":1,"renderable":1},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/11.png","post":"cjtojsgt3000bkaq4gym4005p","slug":"11.png","modified":1,"renderable":1},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/2.png","post":"cjtojsgt3000bkaq4gym4005p","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/3.png","post":"cjtojsgt3000bkaq4gym4005p","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/4.png","post":"cjtojsgt3000bkaq4gym4005p","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/5.png","post":"cjtojsgt3000bkaq4gym4005p","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/6.png","post":"cjtojsgt3000bkaq4gym4005p","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/7.png","post":"cjtojsgt3000bkaq4gym4005p","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/8.png","post":"cjtojsgt3000bkaq4gym4005p","slug":"8.png","modified":1,"renderable":1},{"_id":"source/_posts/Floodligh-Web-UI显示的host比实际多且不会被清除的原因及解决方法/9.png","post":"cjtojsgt3000bkaq4gym4005p","slug":"9.png","modified":1,"renderable":1},{"_id":"source/_posts/深入理解JVM类加载机制/7类符号引用.png","slug":"7类符号引用.png","post":"cjtojsgyr003akaq44p7diglj","modified":1,"renderable":0},{"_id":"source/_posts/深入理解JVM类加载机制/JVM体系结构.png","slug":"JVM体系结构.png","post":"cjtojsgyr003akaq44p7diglj","modified":1,"renderable":0},{"_id":"source/_posts/深入理解JVM类加载机制/双亲委派模型数据流程图.png","post":"cjtojsgyr003akaq44p7diglj","slug":"双亲委派模型数据流程图.png","modified":1,"renderable":1},{"_id":"source/_posts/深入理解JVM类加载机制/双亲委派模型核心代码.png","slug":"双亲委派模型核心代码.png","post":"cjtojsgyr003akaq44p7diglj","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cjtojsgt00009kaq4e2hgg8w0","category_id":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgto000zkaq4cwhn02c4"},{"post_id":"cjtojsgt00009kaq4e2hgg8w0","category_id":"cjtojsgte000mkaq4m1t1ntpf","_id":"cjtojsgtq0013kaq4jnwtlc0v"},{"post_id":"cjtojsgsm0001kaq4q2yc3ti2","category_id":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgtr0014kaq4n8pzhl4a"},{"post_id":"cjtojsgsm0001kaq4q2yc3ti2","category_id":"cjtojsgte000mkaq4m1t1ntpf","_id":"cjtojsgts0018kaq46bhaiayy"},{"post_id":"cjtojsgt3000bkaq4gym4005p","category_id":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgts001ckaq4tsxezm7q"},{"post_id":"cjtojsgt3000bkaq4gym4005p","category_id":"cjtojsgto000ykaq4qq260eig","_id":"cjtojsgtt001ekaq42a5bxb90"},{"post_id":"cjtojsgt8000fkaq46jqmudor","category_id":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgtt001hkaq46h9extbm"},{"post_id":"cjtojsgt8000fkaq46jqmudor","category_id":"cjtojsgto000ykaq4qq260eig","_id":"cjtojsgtu001jkaq4hswl8n3l"},{"post_id":"cjtojsgss0003kaq4t7hubi9o","category_id":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgtu001lkaq4aa0n0hwq"},{"post_id":"cjtojsgss0003kaq4t7hubi9o","category_id":"cjtojsgte000mkaq4m1t1ntpf","_id":"cjtojsgtv001nkaq4uhalyk63"},{"post_id":"cjtojsgt9000gkaq4www7wqin","category_id":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgtw001qkaq4y91xcgo6"},{"post_id":"cjtojsgt9000gkaq4www7wqin","category_id":"cjtojsgto000ykaq4qq260eig","_id":"cjtojsgtw001tkaq4u3m95rnl"},{"post_id":"cjtojsgtc000jkaq4n31tp2nz","category_id":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgtx001vkaq4b00qu0xu"},{"post_id":"cjtojsgtc000jkaq4n31tp2nz","category_id":"cjtojsgto000ykaq4qq260eig","_id":"cjtojsgty001xkaq4u61epfuz"},{"post_id":"cjtojsgsy0007kaq4atiq1rae","category_id":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgty0020kaq45q9o5s1v"},{"post_id":"cjtojsgsy0007kaq4atiq1rae","category_id":"cjtojsgte000mkaq4m1t1ntpf","_id":"cjtojsgtz0023kaq4jqe784et"},{"post_id":"cjtojsgtd000lkaq417vokw77","category_id":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgtz0024kaq40g2hx2ng"},{"post_id":"cjtojsgtd000lkaq417vokw77","category_id":"cjtojsgte000mkaq4m1t1ntpf","_id":"cjtojsgu00027kaq4p4bwfms4"},{"post_id":"cjtojsgtf000pkaq4xi6orkmz","category_id":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgu0002bkaq49zgve9ba"},{"post_id":"cjtojsgtf000pkaq4xi6orkmz","category_id":"cjtojsgty001zkaq4wtxsk6dh","_id":"cjtojsgu1002dkaq4wnjhrwg6"},{"post_id":"cjtojsgtg000rkaq4rsd161a2","category_id":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgu1002ekaq457jzrvoh"},{"post_id":"cjtojsgtg000rkaq4rsd161a2","category_id":"cjtojsgto000ykaq4qq260eig","_id":"cjtojsgu1002hkaq4es5ecoz2"},{"post_id":"cjtojsgtm000vkaq4p2wrw1u9","category_id":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgu2002ikaq4zu6jff1c"},{"post_id":"cjtojsgtm000vkaq4p2wrw1u9","category_id":"cjtojsgu0002akaq448i00t3m","_id":"cjtojsgu3002lkaq4hhjp42ol"},{"post_id":"cjtojsgtn000xkaq46vd072v6","category_id":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgu3002okaq4i3ivhr5h"},{"post_id":"cjtojsgtn000xkaq46vd072v6","category_id":"cjtojsgu1002fkaq4s3uf5oia","_id":"cjtojsgu3002rkaq4agz3uk6v"},{"post_id":"cjtojsgtp0012kaq47ob53791","category_id":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgu3002skaq4tka1wyab"},{"post_id":"cjtojsgtp0012kaq47ob53791","category_id":"cjtojsgu2002jkaq4fd7e71dt","_id":"cjtojsgu4002ukaq4ad1fhrf0"},{"post_id":"cjtojsgyr003akaq44p7diglj","category_id":"cjtojsgsv0005kaq4lbnk2plg","_id":"cjtojsgyv003ckaq4yoe3ryd2"},{"post_id":"cjtojsgyr003akaq44p7diglj","category_id":"cjtojsgu0002akaq448i00t3m","_id":"cjtojsgyv003dkaq4tuif83e8"}],"PostTag":[{"post_id":"cjtojsgsm0001kaq4q2yc3ti2","tag_id":"cjtojsgsx0006kaq4j8nvpgz3","_id":"cjtojsgtc000kkaq4uopcil0l"},{"post_id":"cjtojsgsm0001kaq4q2yc3ti2","tag_id":"cjtojsgt5000dkaq4dt66384p","_id":"cjtojsgte000nkaq4891pa1un"},{"post_id":"cjtojsgtd000lkaq417vokw77","tag_id":"cjtojsgsx0006kaq4j8nvpgz3","_id":"cjtojsgtg000qkaq476z5a5f9"},{"post_id":"cjtojsgtd000lkaq417vokw77","tag_id":"cjtojsgt5000dkaq4dt66384p","_id":"cjtojsgtl000ukaq48tqvppc3"},{"post_id":"cjtojsgss0003kaq4t7hubi9o","tag_id":"cjtojsgsx0006kaq4j8nvpgz3","_id":"cjtojsgtn000wkaq4ukiu197o"},{"post_id":"cjtojsgss0003kaq4t7hubi9o","tag_id":"cjtojsgt5000dkaq4dt66384p","_id":"cjtojsgtp0011kaq412iu5bbk"},{"post_id":"cjtojsgsy0007kaq4atiq1rae","tag_id":"cjtojsgsx0006kaq4j8nvpgz3","_id":"cjtojsgts0017kaq4l5fo5rp5"},{"post_id":"cjtojsgsy0007kaq4atiq1rae","tag_id":"cjtojsgt5000dkaq4dt66384p","_id":"cjtojsgts0019kaq4fzoqeylz"},{"post_id":"cjtojsgt00009kaq4e2hgg8w0","tag_id":"cjtojsgsx0006kaq4j8nvpgz3","_id":"cjtojsgtt001dkaq40wbvwun8"},{"post_id":"cjtojsgt00009kaq4e2hgg8w0","tag_id":"cjtojsgt5000dkaq4dt66384p","_id":"cjtojsgtt001fkaq42lq4dhvl"},{"post_id":"cjtojsgt3000bkaq4gym4005p","tag_id":"cjtojsgts001akaq44h8m563o","_id":"cjtojsgtv001okaq4su3n7mp0"},{"post_id":"cjtojsgt3000bkaq4gym4005p","tag_id":"cjtojsgtu001ikaq46eng5piv","_id":"cjtojsgtw001rkaq4vnd4flsy"},{"post_id":"cjtojsgt8000fkaq46jqmudor","tag_id":"cjtojsgts001akaq44h8m563o","_id":"cjtojsgty001ykaq4kufzeizd"},{"post_id":"cjtojsgt8000fkaq46jqmudor","tag_id":"cjtojsgtu001ikaq46eng5piv","_id":"cjtojsgty0021kaq4hkgrpd8j"},{"post_id":"cjtojsgt9000gkaq4www7wqin","tag_id":"cjtojsgts001akaq44h8m563o","_id":"cjtojsgu00028kaq4c79rxhwd"},{"post_id":"cjtojsgt9000gkaq4www7wqin","tag_id":"cjtojsgtu001ikaq46eng5piv","_id":"cjtojsgu00029kaq4se0hkb2n"},{"post_id":"cjtojsgtc000jkaq4n31tp2nz","tag_id":"cjtojsgts001akaq44h8m563o","_id":"cjtojsgu3002mkaq4n1wlu0bm"},{"post_id":"cjtojsgtc000jkaq4n31tp2nz","tag_id":"cjtojsgu0002ckaq4yb1u7eus","_id":"cjtojsgu3002nkaq4swichmsu"},{"post_id":"cjtojsgtc000jkaq4n31tp2nz","tag_id":"cjtojsgu1002gkaq4cgwf3nmb","_id":"cjtojsgu3002qkaq4zzlus29f"},{"post_id":"cjtojsgtf000pkaq4xi6orkmz","tag_id":"cjtojsgu2002kkaq45pffqd3c","_id":"cjtojsgu4002wkaq4gfcaenul"},{"post_id":"cjtojsgtf000pkaq4xi6orkmz","tag_id":"cjtojsgu3002pkaq4g4qf3tjt","_id":"cjtojsgu4002xkaq4d8oz23lz"},{"post_id":"cjtojsgtf000pkaq4xi6orkmz","tag_id":"cjtojsgu4002tkaq4ejlm03dh","_id":"cjtojsgu5002zkaq453rwnmvt"},{"post_id":"cjtojsgtg000rkaq4rsd161a2","tag_id":"cjtojsgts001akaq44h8m563o","_id":"cjtojsgu60031kaq4sv51t3rd"},{"post_id":"cjtojsgtg000rkaq4rsd161a2","tag_id":"cjtojsgtu001ikaq46eng5piv","_id":"cjtojsgu60032kaq4p57b96mz"},{"post_id":"cjtojsgtm000vkaq4p2wrw1u9","tag_id":"cjtojsgu60030kaq4iddo5rsq","_id":"cjtojsgu70035kaq4yk7uvjvw"},{"post_id":"cjtojsgtm000vkaq4p2wrw1u9","tag_id":"cjtojsgu60033kaq4wejhk3ty","_id":"cjtojsgu70036kaq4qiya7ldi"},{"post_id":"cjtojsgtn000xkaq46vd072v6","tag_id":"cjtojsgu70034kaq4w01vxfce","_id":"cjtojsgu70038kaq4idhchabq"},{"post_id":"cjtojsgtp0012kaq47ob53791","tag_id":"cjtojsgu70037kaq4xrjtedc1","_id":"cjtojsgu70039kaq4u80zz6zc"},{"post_id":"cjtojsgyr003akaq44p7diglj","tag_id":"cjtojsgu60030kaq4iddo5rsq","_id":"cjtojsgyv003ekaq4hw77r60v"},{"post_id":"cjtojsgyr003akaq44p7diglj","tag_id":"cjtojsgu60033kaq4wejhk3ty","_id":"cjtojsgyv003fkaq461dxgq93"},{"post_id":"cjtojsgyr003akaq44p7diglj","tag_id":"cjtojsgyu003bkaq4atjkoj73","_id":"cjtojsgyw003gkaq4rtzult7m"}],"Tag":[{"name":"Python","_id":"cjtojsgsx0006kaq4j8nvpgz3"},{"name":"Django","_id":"cjtojsgt5000dkaq4dt66384p"},{"name":"SDN","_id":"cjtojsgts001akaq44h8m563o"},{"name":"Floodlight","_id":"cjtojsgtu001ikaq46eng5piv"},{"name":"Mininet","_id":"cjtojsgu0002ckaq4yb1u7eus"},{"name":"Linux","_id":"cjtojsgu1002gkaq4cgwf3nmb"},{"name":"linux","_id":"cjtojsgu2002kkaq45pffqd3c"},{"name":"windows","_id":"cjtojsgu3002pkaq4g4qf3tjt"},{"name":"线程机制","_id":"cjtojsgu4002tkaq4ejlm03dh"},{"name":"java","_id":"cjtojsgu60030kaq4iddo5rsq"},{"name":"jvm","_id":"cjtojsgu60033kaq4wejhk3ty"},{"name":"bind9","_id":"cjtojsgu70034kaq4w01vxfce"},{"name":"填坑","_id":"cjtojsgu70037kaq4xrjtedc1"},{"name":"类加载","_id":"cjtojsgyu003bkaq4atjkoj73"}]}}